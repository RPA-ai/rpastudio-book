<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NuGet.Packaging</name>
    </assembly>
    <members>
        <member name="T:NuGet.Client.AnyFramework">
            <summary>
            An internal NuGetFramework marker for ManagedCodeConventions.
            Most conventions disallow the string 'any' as a txm, so to allow
            it for conventions with no txm in the path we use this special type.
            </summary>
        </member>
        <member name="T:NuGet.Client.ManagedCodeConventions">
            <summary>
            Defines all the package conventions used by Managed Code packages
            </summary>
        </member>
        <member name="P:NuGet.Client.ManagedCodeConventions.ManagedCodePatterns.AnyTargettedFile">
            <summary>
            Pattern used to locate all files targetted at a specific runtime and/or framework
            </summary>
        </member>
        <member name="P:NuGet.Client.ManagedCodeConventions.ManagedCodePatterns.RuntimeAssemblies">
            <summary>
            Pattern used to locate all files designed for loading as managed code assemblies at run-time
            </summary>
        </member>
        <member name="P:NuGet.Client.ManagedCodeConventions.ManagedCodePatterns.CompileRefAssemblies">
            <summary>
            Pattern used to locate ref assemblies for compile.
            </summary>
        </member>
        <member name="P:NuGet.Client.ManagedCodeConventions.ManagedCodePatterns.CompileLibAssemblies">
            <summary>
            Pattern used to locate lib assemblies for compile.
            </summary>
        </member>
        <member name="P:NuGet.Client.ManagedCodeConventions.ManagedCodePatterns.NativeLibraries">
            <summary>
            Pattern used to locate all files designed for loading as native code libraries at run-time
            </summary>
        </member>
        <member name="P:NuGet.Client.ManagedCodeConventions.ManagedCodePatterns.ResourceAssemblies">
            <summary>
            Pattern used to locate all files designed for loading as managed code resource assemblies at run-time
            </summary>
        </member>
        <member name="P:NuGet.Client.ManagedCodeConventions.ManagedCodePatterns.MSBuildFiles">
            <summary>
            Pattern used to identify MSBuild targets and props files
            </summary>
        </member>
        <member name="P:NuGet.Client.ManagedCodeConventions.ManagedCodePatterns.MSBuildMultiTargetingFiles">
            <summary>
            Pattern used to identify MSBuild global targets and props files
            </summary>
        </member>
        <member name="P:NuGet.Client.ManagedCodeConventions.ManagedCodePatterns.ContentFiles">
            <summary>
            Pattern used to identify content files
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.ContentItemCollection.HasContract">
            <summary>
            True if lib/contract exists
            </summary>
        </member>
        <member name="M:NuGet.ContentModel.ContentItemCollection.IsValidAsset(System.String)">
            <summary>
            False if the path would not match any patterns.
            </summary>
        </member>
        <member name="T:NuGet.ContentModel.ContentPropertyDefinition">
            <summary>
            Defines a property that can be used in Content Model query patterns
            <seealso cref="T:NuGet.ContentModel.PatternSet" />
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.ContentPropertyDefinition.CompareTest">
            <summary>
            Find the nearest compatible candidate.
            </summary>
        </member>
        <member name="T:NuGet.ContentModel.PatternSet">
            <summary>
            A set of patterns that can be used to query a set of file paths for items matching a provided criteria.
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.PatternSet.GroupPatterns">
            <summary>
            Patterns used to select a group of items that matches the criteria
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.PatternSet.GroupExpressions">
            <summary>
            Pattern expressions.
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.PatternSet.PathPatterns">
            <summary>
            Patterns used to select individual items that match the criteria
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.PatternSet.PathExpressions">
            <summary>
            Path expressions.
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.PatternSet.PropertyDefinitions">
            <summary>
            Property definitions used for matching patterns
            </summary>
        </member>
        <member name="T:NuGet.ContentModel.PatternDefinition">
            <summary>
            A pattern that can be used to match file paths given a provided criteria.
            </summary>
            <remarks>
            The pattern is defined as a sequence of literal path strings that must match exactly and property
            references,
            wrapped in {} characters, which are tested for compatibility with the consumer-provided criteria.
            <seealso cref="T:NuGet.ContentModel.ContentPropertyDefinition" />
            </remarks>
        </member>
        <member name="P:NuGet.ContentModel.PatternDefinition.Table">
            <summary>
            Replacement token table.
            </summary>
        </member>
        <member name="T:NuGet.ContentModel.PatternTable">
            <summary>
            Replacement token table organized by property.
            </summary>
        </member>
        <member name="M:NuGet.ContentModel.PatternTable.TryLookup(System.String,System.String,System.Object@)">
            <summary>
            Lookup a token and get the replacement if it exists.
            </summary>
            <param name="propertyName">Property moniker</param>
            <param name="name">Token name</param>
            <param name="value">Replacement value</param>
        </member>
        <member name="P:NuGet.ContentModel.PatternTableEntry.PropertyName">
            <summary>
            PropertyName moniker
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.PatternTableEntry.Name">
            <summary>
            Item name
            </summary>
        </member>
        <member name="P:NuGet.ContentModel.PatternTableEntry.Value">
            <summary>
            Item replacement value
            </summary>
        </member>
        <member name="T:NuGet.Packaging.IAsyncPackageContentReader">
            <summary>
            An asynchronous package content reader.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IAsyncPackageContentReader.GetFrameworkItemsAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns all framework references found in the nuspec.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns an
            <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
            <exception cref="!:OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.IAsyncPackageContentReader.GetBuildItemsAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns all items under the build folder.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns an
            <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
            <exception cref="!:OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.IAsyncPackageContentReader.GetToolItemsAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns all items under the tools folder.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns an
            <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
            <exception cref="!:OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.IAsyncPackageContentReader.GetContentItemsAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns all items found in the content folder.
            </summary>
            <remarks>
            Some legacy behavior has been dropped here due to the mix of content folders and target framework
            folders here.
            </remarks>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns an
            <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
            <exception cref="!:OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.IAsyncPackageContentReader.GetLibItemsAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns all lib items without any filtering.
            </summary>
            <remarks>Use GetReferenceItemsAsync(...) for the filtered list.</remarks>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns an
            <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
            <exception cref="!:OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.IAsyncPackageContentReader.GetReferenceItemsAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns lib items + filtering based on the nuspec and other NuGet rules.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns an
            <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
            <exception cref="!:OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.IAsyncPackageContentReader.GetPackageDependenciesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns package dependencies.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns an
            <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
            <exception cref="!:OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="T:NuGet.Packaging.INuspecReader">
            <summary>
            A development package nuspec reader
            </summary>
        </member>
        <member name="M:NuGet.Packaging.INuspecReader.GetLanguage">
            <summary>
            The locale ID for the package, such as en-us.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageContentReader.GetFrameworkItems">
            <summary>
            Returns all framework references found in the nuspec.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageContentReader.GetBuildItems">
            <summary>
            Returns all items under the build folder.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageContentReader.GetToolItems">
            <summary>
            Returns all items under the tools folder.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageContentReader.GetContentItems">
            <summary>
            Returns all items found in the content folder.
            </summary>
            <remarks>
            Some legacy behavior has been dropped here due to the mix of content folders and target framework
            folders here.
            </remarks>
        </member>
        <member name="M:NuGet.Packaging.IPackageContentReader.GetLibItems">
            <summary>
            Returns all lib items without any filtering. Use GetReferenceItems for the filtered list.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageContentReader.GetReferenceItems">
            <summary>
            Returns lib items + filtering based on the nuspec and other NuGet rules.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageContentReader.GetPackageDependencies">
            <summary>
            Returns package dependencies.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.IPackageDownloader">
            <summary>
            A package downloader.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.IPackageDownloader.ContentReader">
            <summary>
            Gets an asynchronous package content reader.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
        </member>
        <member name="P:NuGet.Packaging.IPackageDownloader.CoreReader">
            <summary>
            Gets an asynchronous package core reader.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
        </member>
        <member name="M:NuGet.Packaging.IPackageDownloader.CopyNupkgFileToAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously copies a .nupkg to a target file path.
            </summary>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.Boolean" />
            indicating whether or not the copy was successful.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="destinationFilePath" />
            is either <c>null</c> or empty.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.IPackageDownloader.GetPackageHashAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets a package hash.
            </summary>
            <param name="hashAlgorithm">The hash algorithm.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.String" />
            representing the package hash.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="hashAlgorithm" />
            is either <c>null</c> or empty.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.IPackageDownloader.SetExceptionHandler(System.Func{System.Exception,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Sets an exception handler for package downloads.
            </summary>
            <remarks>The exception handler returns a task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.Boolean" />
            indicating whether or not the exception was handled.  To handle an exception and stop its
            propagation, the task should return <c>true</c>.  Otherwise, the exception will be rethrown.</remarks>
            <param name="handleExceptionAsync">An exception handler.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="handleExceptionAsync" />
            is <c>null</c>.</exception>
        </member>
        <member name="M:NuGet.Packaging.IPackageDownloader.SetThrottle(System.Threading.SemaphoreSlim)">
            <summary>
            Sets a throttle for package downloads.
            </summary>
            <param name="throttle">A throttle.  Can be <c>null</c>.</param>
        </member>
        <member name="T:NuGet.Packaging.IPackageResolver">
            <summary>
            Core package resolver
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageResolver.Resolve(System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageIdentity},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependencyInfo},System.Threading.CancellationToken)">
            <summary>
            Resolve a set of packages
            </summary>
            <param name="targets">Package or packages to install</param>
            <param name="availablePackages">All relevant packages. This list must include the target packages.</param>
            <returns>A set of packages meeting the package dependency requirements</returns>
        </member>
        <member name="M:NuGet.Packaging.IPackageResolver.Resolve(System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageIdentity},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependencyInfo},System.Collections.Generic.IEnumerable{NuGet.Packaging.PackageReference},System.Threading.CancellationToken)">
            <summary>
            Resolve a set of packages
            </summary>
            <param name="targets">Package or packages to install</param>
            <param name="availablePackages">
            All relevant packages. This list must include the target packages and
            installed packages.
            </param>
            <param name="installedPackages">
            Packages already installed into the project. These will be favored as
            dependency options.
            </param>
            <returns>A set of packages meeting the package dependency requirements</returns>
        </member>
        <member name="M:NuGet.Packaging.IPackageResolver.Resolve(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependencyInfo},System.Threading.CancellationToken)">
            <summary>
            Resolve a set of packages
            </summary>
            <param name="targets">Package or packages to install</param>
            <param name="availablePackages">All relevant packages. This list must include the target packages.</param>
            <returns>A set of packages meeting the package dependency requirements</returns>
        </member>
        <member name="M:NuGet.Packaging.IPackageResolver.Resolve(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependencyInfo},System.Collections.Generic.IEnumerable{NuGet.Packaging.PackageReference},System.Threading.CancellationToken)">
            <summary>
            Resolve a set of packages
            </summary>
            <param name="targets">Package or packages to install</param>
            <param name="availablePackages">
            All relevant packages. This list must include the target packages and
            installed packages.
            </param>
            <param name="installedPackages">
            Packages already installed into the project. These will be favored as
            dependency options.
            </param>
            <returns>A set of packages meeting the package dependency requirements</returns>
        </member>
        <member name="T:NuGet.Packaging.MinClientVersionException">
            <summary>
            Custom exception type for a package that has a higher minClientVersion than the current client.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.FallbackPackagePathInfo.PathResolver">
            <summary>
            Path resolver for the root package folder containing this package.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.FallbackPackagePathInfo.Id">
            <summary>
            Package id.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.FallbackPackagePathInfo.Version">
            <summary>
            Package version.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.FallbackPackagePathResolver.#ctor(NuGet.Common.INuGetPathContext)">
            <summary>
            Creates a package folder path resolver that scans multiple folders to find a package.
            </summary>
            <param name="pathContext">NuGet paths loaded from NuGet.Config settings.</param>
        </member>
        <member name="M:NuGet.Packaging.FallbackPackagePathResolver.GetPackageDirectory(System.String,System.String)">
            <summary>
            Returns the root directory of an installed package.
            </summary>
            <param name="packageId">Package id.</param>
            <param name="version">Package version.</param>
            <returns>Returns the path if the package exists in any of the folders. Null if the package does not exist.</returns>
        </member>
        <member name="M:NuGet.Packaging.FallbackPackagePathResolver.GetPackageDirectory(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Returns the root directory of an installed package.
            </summary>
            <param name="packageId">Package id.</param>
            <param name="version">Package version.</param>
            <returns>Returns the path if the package exists in any of the folders. Null if the package does not exist.</returns>
        </member>
        <member name="M:NuGet.Packaging.FallbackPackagePathResolver.GetPackageInfo(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Returns the package info along with a path resolver specific to the folder where the package exists.
            </summary>
            <param name="packageId">Package id.</param>
            <param name="version">Package version.</param>
            <returns>Returns the package info if the package exists in any of the folders. Null if the package does not exist.</returns>
        </member>
        <member name="T:NuGet.Packaging.LocalPackageArchiveDownloader">
            <summary>
            A package downloader for local archive packages.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.LocalPackageArchiveDownloader.ContentReader">
            <summary>
            Gets an asynchronous package content reader.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
        </member>
        <member name="P:NuGet.Packaging.LocalPackageArchiveDownloader.CoreReader">
            <summary>
            Gets an asynchronous package core reader.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
        </member>
        <member name="M:NuGet.Packaging.LocalPackageArchiveDownloader.#ctor(System.String,NuGet.Packaging.Core.PackageIdentity,NuGet.Common.ILogger)">
            <summary>
            Initializes a new <see cref="T:NuGet.Packaging.LocalPackageArchiveDownloader" /> class.
            </summary>
            <param name="packageFilePath">A source package archive file path.</param>
            <param name="packageIdentity">A package identity.</param>
            <param name="logger">A logger.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="packageFilePath" />
            is either <c>null</c> or an empty string.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packageIdentity" />
            is either <c>null</c> or an empty string.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="logger" />
            is either <c>null</c> or an empty string.</exception>
        </member>
        <member name="M:NuGet.Packaging.LocalPackageArchiveDownloader.Dispose">
            <summary>
            Disposes of this instance.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.LocalPackageArchiveDownloader.CopyNupkgFileToAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously copies a .nupkg to a target file path.
            </summary>
            <param name="destinationFilePath">The destination file path.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.Boolean" />
            indicating whether or not the copy was successful.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="destinationFilePath" />
            is either <c>null</c> or empty.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.LocalPackageArchiveDownloader.GetPackageHashAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets a package hash.
            </summary>
            <param name="hashAlgorithm">The hash algorithm.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.String" />
            representing the package hash.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if this object is disposed.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="hashAlgorithm" />
            is either <c>null</c> or empty.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" />
            is cancelled.</exception>
        </member>
        <member name="M:NuGet.Packaging.LocalPackageArchiveDownloader.SetExceptionHandler(System.Func{System.Exception,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Sets an exception handler for package downloads.
            </summary>
            <remarks>The exception handler returns a task that represents the asynchronous operation.
            The task result (<see cref="P:System.Threading.Tasks.Task`1.Result" />) returns a <see cref="T:System.Boolean" />
            indicating whether or not the exception was handled.  To handle an exception and stop its
            propagation, the task should return <c>true</c>.  Otherwise, the exception will be rethrown.</remarks>
            <param name="handleExceptionAsync">An exception handler.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="handleExceptionAsync" />
            is <c>null</c>.</exception>
        </member>
        <member name="M:NuGet.Packaging.LocalPackageArchiveDownloader.SetThrottle(System.Threading.SemaphoreSlim)">
            <summary>
            Sets a throttle for package downloads.
            </summary>
            <param name="throttle">A throttle.  Can be <c>null</c>.</param>
        </member>
        <member name="T:NuGet.Packaging.MinClientVersionUtility">
            <summary>
            Helpers for dealing with the NuGet client version and package minClientVersions.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.MinClientVersionUtility.VerifyMinClientVersion(NuGet.Packaging.Core.NuspecCoreReaderBase)">
            <summary>
            Check the package minClientVersion and throw if it is greater than the current client version.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.MinClientVersionUtility.IsMinClientVersionCompatible(NuGet.Packaging.Core.NuspecCoreReaderBase)">
            <summary>
            Verify minClientVersion.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.MinClientVersionUtility.IsMinClientVersionCompatible(NuGet.Versioning.NuGetVersion)">
            <summary>
            Verify minClientVersion.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.MinClientVersionUtility.GetNuGetClientVersion">
            <summary>
            Read the NuGet client version from the assembly info as a NuGetVersion.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.NuspecReader">
            <summary>
            Reads .nuspec files
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.String)">
            <summary>
            Nuspec file reader.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.String,NuGet.Frameworks.IFrameworkNameProvider)">
            <summary>
            Nuspec file reader.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.IO.Stream)">
            <summary>
            Nuspec file reader
            </summary>
            <param name="stream">Nuspec file stream.</param>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.Xml.Linq.XDocument)">
            <summary>
            Nuspec file reader
            </summary>
            <param name="xml">Nuspec file xml data.</param>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.IO.Stream,NuGet.Frameworks.IFrameworkNameProvider,System.Boolean)">
            <summary>
            Nuspec file reader
            </summary>
            <param name="stream">Nuspec file stream.</param>
            <param name="frameworkProvider">Framework mapping provider for NuGetFramework parsing.</param>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.Xml.Linq.XDocument,NuGet.Frameworks.IFrameworkNameProvider)">
            <summary>
            Nuspec file reader
            </summary>
            <param name="xml">Nuspec file xml data.</param>
            <param name="frameworkProvider">Framework mapping provider for NuGetFramework parsing.</param>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetDependencyGroups">
            <summary>
            Read package dependencies for all frameworks
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetDependencyGroups(System.Boolean)">
            <summary>
            Read package dependencies for all frameworks
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetReferenceGroups">
            <summary>
            Reference item groups
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetFrameworkReferenceGroups">
            <summary>
            Framework reference groups
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetLanguage">
            <summary>
            Package language
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetLicenseUrl">
            <summary>
            Package License Url
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetContentFiles">
            <summary>
            Build action groups
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetTitle">
            <summary>
            Package title.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetAuthors">
            <summary>
            Package authors.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetTags">
            <summary>
            Package tags.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetOwners">
            <summary>
            Package owners.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetDescription">
            <summary>
            Package description.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetReleaseNotes">
            <summary>
            Package release notes.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetSummary">
            <summary>
            Package summary.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetProjectUrl">
            <summary>
            Package project url.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetIconUrl">
            <summary>
            Package icon url.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetCopyright">
            <summary>
            Copyright information.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetRequireLicenseAcceptance">
            <summary>
            Require license acceptance when installing the package.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackageArchiveReader">
            <summary>
            Reads a development nupkg
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.#ctor(System.IO.Stream)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="stream">Nupkg data stream.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.#ctor(System.IO.Stream,NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="stream">Nupkg data stream.</param>
            <param name="frameworkProvider">Framework mapping provider for NuGetFramework parsing.</param>
            <param name="compatibilityProvider">Framework compatibility provider.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="stream">Nupkg data stream.</param>
            <param name="leaveStreamOpen">If true the nupkg stream will not be closed by the zip reader.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.#ctor(System.IO.Stream,System.Boolean,NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="stream">Nupkg data stream.</param>
            <param name="leaveStreamOpen">leave nupkg stream open</param>
            <param name="frameworkProvider">Framework mapping provider for NuGetFramework parsing.</param>
            <param name="compatibilityProvider">Framework compatibility provider.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.#ctor(System.IO.Compression.ZipArchive)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="zipArchive">ZipArchive containing the nupkg data.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.#ctor(System.IO.Compression.ZipArchive,NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="zipArchive">ZipArchive containing the nupkg data.</param>
            <param name="frameworkProvider">Framework mapping provider for NuGetFramework parsing.</param>
            <param name="compatibilityProvider">Framework compatibility provider.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageArchiveReader.ValidatePackageEntriesAsync(System.Threading.CancellationToken)">
            <summary>
            Validate all files in package are not traversed outside of the expected extraction path.
            Eg: file entry like ../../foo.dll can get outside of the expected extraction path.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.EmptyFrameworkFolderFile">
            <summary>
            Represents an empty framework folder in NuGet 2.0+ packages. 
            An empty framework folder is represented by a file named "_._".
            </summary>
        </member>
        <member name="P:NuGet.Packaging.IPackageFile.Path">
            <summary>
            Gets the full path of the file inside the package.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.IPackageFile.EffectivePath">
            <summary>
            Gets the path that excludes the root folder (content/lib/tools) and framework folder (if present).
            </summary>
            <example>
            If a package has the Path as 'content\[net40]\scripts\jQuery.js', the EffectivePath 
            will be 'scripts\jQuery.js'.
            
            If it is 'tools\init.ps1', the EffectivePath will be 'init.ps1'.
            </example>
        </member>
        <member name="P:NuGet.Packaging.IPackageMetadata.FrameworkReferences">
            <summary>
            Specifies assemblies from GAC that the package depends on.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.IPackageMetadata.PackageAssemblyReferences">
            <summary>
            Returns sets of References specified in the manifest.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.IPackageMetadata.DependencyGroups">
            <summary>
            Specifies sets other packages that the package depends on.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.IPackageMetadata.ContentFiles">
            <summary>
            Returns sets of Content Files specified in the manifest.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Manifest.Save(System.IO.Stream)">
            <summary>
            Saves the current manifest to the specified stream.
            </summary>
            <param name="stream">The target stream.</param>
        </member>
        <member name="M:NuGet.Packaging.Manifest.Save(System.IO.Stream,System.Int32)">
            <summary>
            Saves the current manifest to the specified stream.
            </summary>
            <param name="stream">The target stream.</param>
            <param name="minimumManifestVersion">The minimum manifest version that this class must use when saving.</param>
        </member>
        <member name="M:NuGet.Packaging.ManifestMetadata.#ctor(NuGet.Packaging.IPackageMetadata)">
            <summary>
            Constructs a ManifestMetadata instance from an IPackageMetadata instance
            </summary>
        </member>
        <member name="F:NuGet.Packaging.ManifestSchemaUtility.SchemaVersionV1">
            <summary>
            Baseline schema 
            </summary>
        </member>
        <member name="F:NuGet.Packaging.ManifestSchemaUtility.SchemaVersionV2">
            <summary>
            Added copyrights, references and release notes
            </summary>
        </member>
        <member name="F:NuGet.Packaging.ManifestSchemaUtility.SchemaVersionV3">
            <summary>
            Used if the version is a semantic version.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.ManifestSchemaUtility.SchemaVersionV4">
            <summary>
            Added 'targetFramework' attribute for 'dependency' elements.
            Allow framework folders under 'content' and 'tools' folders. 
            </summary>
        </member>
        <member name="F:NuGet.Packaging.ManifestSchemaUtility.SchemaVersionV5">
            <summary>
            Added 'targetFramework' attribute for 'references' elements.
            Added 'minClientVersion' attribute
            </summary>
        </member>
        <member name="F:NuGet.Packaging.ManifestSchemaUtility.SchemaVersionV6">
            <summary>
            Allows XDT transformation
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageBuilder.Properties">
            <summary>
            Exposes the additional properties extracted by the metadata 
            extractor or received from the command line.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageBuilder.ContentFiles">
            <summary>
            ContentFiles section from the manifest for content v2
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageBuilder.ResolvePackagePath(System.String,System.String,System.String,System.String)">
            <summary>
            Determins the path of the file inside a package.
            For recursive wildcard paths, we preserve the path portion beginning with the wildcard.
            For non-recursive wildcard paths, we use the file name from the actual file path on disk.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageBuilder.IsKnownFolder(System.String)">
            <summary>
            Returns true if the path uses a known folder root.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageBuilder.ParseTags(System.String)">
            <summary>
            Tags come in this format. tag1 tag2 tag3 etc..
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReferenceSet.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new Package Reference Set
            </summary>
            <param name="references">IEnumerable set of string references</param>
        </member>
        <member name="M:NuGet.Packaging.PackageReferenceSet.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new Package Reference Set
            </summary>
            <param name="targetFramework">The target framework to use, pass Any for AnyFramework. Does not allow null.</param>
            <param name="references">IEnumerable set of string references</param>
        </member>
        <member name="M:NuGet.Packaging.PackageReferenceSet.#ctor(NuGet.Frameworks.NuGetFramework,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new Package Reference Set
            </summary>
            <param name="targetFramework">The target framework to use.</param>
            <param name="references">IEnumerable set of string references</param>
        </member>
        <member name="P:NuGet.Packaging.PhysicalPackageFile.SourcePath">
            <summary>
            Path on disk
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PhysicalPackageFile.TargetPath">
            <summary>
            Path in package
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackageCreation.Resources.NuGetResources">
            <summary>
               A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.ResourceManager">
            <summary>
               Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Culture">
            <summary>
               Overrides the current thread's CurrentUICulture property for all
               resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.CannotCreateEmptyPackage">
            <summary>
               Looks up a localized string similar to Cannot create a package that has no dependencies nor content..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.DependencyHasInvalidVersion">
            <summary>
               Looks up a localized string similar to Dependency '{0}' has an invalid version..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.DuplicateDependenciesDefined">
            <summary>
               Looks up a localized string similar to '{0}' already has a dependency defined for '{1}'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.IncompatibleSchema">
            <summary>
               Looks up a localized string similar to The schema version of '{0}' is incompatible with version {1} of NuGet. Please upgrade NuGet to the latest version from http://go.microsoft.com/fwlink/?LinkId=213942..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.InvalidPackageId">
            <summary>
               Looks up a localized string similar to The package ID '{0}' contains invalid characters. Examples of valid package IDs include 'MyPackage' and 'MyPackage.Sample'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_DependenciesHasMixedElements">
            <summary>
               Looks up a localized string similar to &lt;dependencies&gt; element must not contain both &lt;group&gt; and &lt;dependency&gt; child elements..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_ExcludeContainsInvalidCharacters">
            <summary>
               Looks up a localized string similar to Exclude path '{0}' contains invalid characters..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_IdMaxLengthExceeded">
            <summary>
               Looks up a localized string similar to Id must not exceed 100 characters..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_InvalidMinClientVersion">
            <summary>
               Looks up a localized string similar to The 'minClientVersion' attribute in the package manifest has invalid value. It must be a valid version string..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_InvalidReference">
            <summary>
               Looks up a localized string similar to Invalid assembly reference '{0}'. Ensure that a file named '{0}' exists in the lib directory..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_InvalidReferenceFile">
            <summary>
               Looks up a localized string similar to Assembly reference '{0}' contains invalid characters..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_ReferencesHasMixedElements">
            <summary>
               Looks up a localized string similar to &lt;references&gt; element must not contain both &lt;group&gt; and &lt;reference&gt; child elements..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_ReferencesIsEmpty">
            <summary>
               Looks up a localized string similar to The element package\metadata\references\group must contain at least one &lt;reference&gt; child element..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_RequiredElementMissing">
            <summary>
               Looks up a localized string similar to The required element '{0}' is missing from the manifest..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_RequiredMetadataMissing">
            <summary>
               Looks up a localized string similar to {0} is required..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_RequireLicenseAcceptanceRequiresLicenseUrl">
            <summary>
               Looks up a localized string similar to Enabling license acceptance requires a license url..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_SourceContainsInvalidCharacters">
            <summary>
               Looks up a localized string similar to Source path '{0}' contains invalid characters..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_TargetContainsInvalidCharacters">
            <summary>
               Looks up a localized string similar to Target path '{0}' contains invalid characters..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.Manifest_UriCannotBeEmpty">
            <summary>
               Looks up a localized string similar to {0} cannot be empty..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.PackageAuthoring_FileNotFound">
            <summary>
               Looks up a localized string similar to File not found: '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageCreation.Resources.NuGetResources.UnknownSchemaVersion">
            <summary>
               Looks up a localized string similar to Unknown schema version '{0}'..
            </summary>
        </member>
        <member name="M:NuGet.Packaging.FrameworkNameUtility.ParseFrameworkFolderName(System.String,System.Boolean,System.String@)">
            <summary>
            Parses the specified string into FrameworkName object.
            </summary>
            <param name="path">The string to be parse.</param>
            <param name="strictParsing">if set to <c>true</c>, parse the first folder of path even if it is unrecognized framework.</param>
            <param name="effectivePath">returns the path after the parsed target framework</param>
            <returns></returns>
        </member>
        <member name="P:NuGet.Packaging.PackageExtraction.PackageExtractionBehavior.XmlDocFileSaveMode">
            <summary>
            Gets or sets the <see cref="!:PackageExtraction.XmlDocFileSaveMode" />.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageExtractionContext.UseLegacyPackageInstallPath">
            <summary>
            If True package folder paths will use the non-normalized version path,
            even for new installs.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageHelper.GetSatellitePackageInfoAsync(NuGet.Packaging.Core.IAsyncPackageCoreReader,System.Threading.CancellationToken)">
            <summary>
            A package is deemed to be a satellite package if it has a language property set, the id of the package is
            of the format [.*].[Language]
            and it has at least one dependency with an id that maps to the runtime package .
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageHelper.GetInstalledPackageFilesAsync(NuGet.Packaging.PackageArchiveReader,NuGet.Packaging.Core.PackageIdentity,NuGet.Packaging.PackagePathResolver,NuGet.Packaging.PackageSaveMode,System.Threading.CancellationToken)">
            <summary>
            This returns all the installed package files (does not include satellite files)
            </summary>
        </member>
        <member name="F:NuGet.Packaging.PackageSaveMode.Defaultv2">
            <summary>
            Default package save mode for v2 (packages.config)-style restore.
            This includes <see cref="F:NuGet.Packaging.PackageSaveMode.Files" /> and <see cref="F:NuGet.Packaging.PackageSaveMode.Nupkg" />.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.PackageSaveMode.Defaultv3">
            <summary>
            Default package save mode for v3 (project.json)-style restore.
            This includes <see cref="F:NuGet.Packaging.PackageSaveMode.Files" />, <see cref="F:NuGet.Packaging.PackageSaveMode.Nuspec" />, and <see cref="F:NuGet.Packaging.PackageSaveMode.Nupkg" />.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.XmlDocFileSaveMode.None">
            <summary>
            Treat XML doc files as regular files (legacy behavior).
            </summary>
        </member>
        <member name="F:NuGet.Packaging.XmlDocFileSaveMode.Skip">
            <summary>
            Do not extract XML documentation files
            </summary>
        </member>
        <member name="F:NuGet.Packaging.XmlDocFileSaveMode.Compress">
            <summary>
            Compress XML doc files in a zip archive.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.ZipArchiveExtensions">
            <summary>
            Nupkg reading helper methods
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageExtractor.InstallFromSourceAsync(System.Func{System.IO.Stream,System.Threading.Tasks.Task},NuGet.Packaging.VersionFolderPathContext,System.Threading.CancellationToken)">
            <summary>
            Uses a copy function to install a package to a global packages directory.
            </summary>
            <param name="copyToAsync">
            A function which should copy the package to the provided destination stream.
            </param>
            <param name="versionFolderPathContext">
            The version folder path context, which encapsulates all of the parameters to observe
            while installing the package.
            </param>
            <param name="token">The cancellation token.</param>
            <returns>
            True if the package was installed. False if the package already exists and therefore
            resulted in no copy operation.
            </returns>
        </member>
        <member name="T:NuGet.Packaging.PackageFolderReader">
            <summary>
            Reads an unzipped nupkg folder.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.#ctor(System.String)">
            <summary>
            Package folder reader
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Package folder reader
            </summary>
            <param name="folder">root directory of an extracted nupkg</param>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.#ctor(System.String,NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Package folder reader
            </summary>
            <param name="folderPath">root directory of an extracted nupkg</param>
            <param name="frameworkProvider">framework mappings</param>
            <param name="compatibilityProvider">framework compatibility provider</param>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.#ctor(System.IO.DirectoryInfo,NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Package folder reader
            </summary>
            <param name="folder">root directory of an extracted nupkg</param>
            <param name="frameworkProvider">framework mappings</param>
            <param name="compatibilityProvider">framework compatibility provider</param>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.GetStream(System.String)">
            <summary>
            Opens a local file in read only mode.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.GetRelativePath(System.IO.DirectoryInfo,System.IO.FileInfo)">
            <summary>
            Build the relative path in the same format that ZipArchive uses
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackagePathResolver">
            <summary>
            A V2 path resolver.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackageReaderBase">
            <summary>
            Abstract class that both the zip and folder package readers extend
            This class contains the path conventions for both zip and folder readers
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.#ctor(NuGet.Frameworks.IFrameworkNameProvider)">
            <summary>
            Instantiates a new <see cref="T:NuGet.Packaging.PackageReaderBase" /> class.
            </summary>
            <param name="frameworkProvider">A framework mapping provider.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="frameworkProvider" /> is <c>null</c>.</exception>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.#ctor(NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Instantiates a new <see cref="T:NuGet.Packaging.PackageReaderBase" /> class.
            </summary>
            <param name="frameworkProvider">A framework mapping provider.</param>
            <param name="compatibilityProvider">A framework compatibility provider.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="frameworkProvider" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="compatibilityProvider" /> is <c>null</c>.</exception>
        </member>
        <member name="P:NuGet.Packaging.PackageReaderBase.NuspecReader">
            <summary>
            Nuspec reader
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.GetSupportedFrameworks">
            <summary>
            Frameworks mentioned in the package.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.IsAllowedBuildFile(System.String,System.String)">
            <summary>
            only packageId.targets and packageId.props should be used from the build folder
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.IsReferenceAssembly(System.String)">
            <summary>
            True only for assemblies that should be added as references to msbuild projects
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.ValidatePackageEntry(System.String,System.String,NuGet.Packaging.Core.PackageIdentity)">
            <summary>
            Validate file entry in package is not traversed outside of the expected extraction path.
            Eg: file entry like ../../foo.dll can get outside of the expected extraction path.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackageReference">
            <summary>
            Represents a package element in the packages.config file
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReference.#ctor(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Creates a new packages config entry
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReference.#ctor(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework,System.Boolean)">
            <summary>
            Creates a new packages config entry
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReference.#ctor(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new packages config entry
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReference.#ctor(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework,System.Boolean,System.Boolean,System.Boolean,NuGet.Versioning.VersionRange)">
            <summary>
            Creates a new packages config entry
            </summary>
            <param name="identity">Package id and version</param>
            <param name="targetFramework">Package target framework installed to the project</param>
            <param name="userInstalled">True if the user installed this package directly</param>
            <param name="developmentDependency">True if the package is a development dependency</param>
            <param name="requireReinstallation">True if this package needs to be reinstalled</param>
            <param name="allowedVersions">Restrict package versions to the allowedVersions range</param>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.PackageIdentity">
            <summary>
            Id and Version of the package
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.AllowedVersions">
            <summary>
            The allowed range of versions that this package can be upgraded/downgraded to.
            </summary>
            <remarks>This is null if unbounded</remarks>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.HasAllowedVersions">
            <summary>
            True if allowedVersions exists.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.TargetFramework">
            <summary>
            Installed target framework version of the package.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.IsDevelopmentDependency">
            <summary>
            Development dependency
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.IsUserInstalled">
            <summary>
            True if the user installed or updated this package directly.
            False if this package was installed as a dependency by another package.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.RequireReinstallation">
            <summary>
            Require reinstallation
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReference.ToString">
            <summary>
            Displays the identity and target framework of the reference.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfig.HasAttributeValue(System.Xml.Linq.XElement,System.String,System.String,System.Xml.Linq.XElement@)">
            <summary>
            Determine if the package node has the attribute value as the targetValue.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfig.BoolAttribute(System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            Get a boolean attribute value, or false if it does not exist
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackagesConfigReader">
            <summary>
            Reads packages.config
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.#ctor(System.Xml.Linq.XDocument)">
            <summary>
            Packages.config reader
            </summary>
            <param name="xml">Packages.config XML</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.#ctor(NuGet.Frameworks.IFrameworkNameProvider,System.Xml.Linq.XDocument)">
            <summary>
            Packages.config reader
            </summary>
            <param name="frameworkMappings">Additional target framework mappings for parsing target frameworks</param>
            <param name="xml">Packages.config XML</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.#ctor(System.IO.Stream)">
            <summary>
            Packages.config reader
            </summary>
            <param name="stream">Stream containing packages.config</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Packages.config reader
            </summary>
            <param name="stream">Stream containing packages.config</param>
            <param name="leaveStreamOpen">True will leave the stream open</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.#ctor(NuGet.Frameworks.IFrameworkNameProvider,System.IO.Stream,System.Boolean)">
            <summary>
            Packages.config reader
            </summary>
            <param name="stream">Stream containing packages.config</param>
            <param name="leaveStreamOpen">True will leave the stream open</param>
            <param name="frameworkMappings">Additional target framework mappings for parsing target frameworks</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.GetMinClientVersion">
            <summary>
            Reads the minimum client version from packages.config
            </summary>
            <returns>Minimum client version or the default of 2.5.0</returns>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.GetPackages">
            <summary>
            Reads all package node entries in the config.
            If duplicate package ids exist an exception will be thrown.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.GetPackages(System.Boolean)">
            <summary>
            Reads all package node entries in the config.
            </summary>
            <param name="allowDuplicatePackageIds">If True validation will be performed to ensure that 
            only one entry exists for each unique package id.</param>
        </member>
        <member name="T:NuGet.Packaging.PackagesConfigWriter">
            <summary>
            Writes the packages.config XML file to a stream
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.#ctor(System.String,System.Boolean)">
            <summary>
            Create a packages.config writer using file path
            </summary>
            <param name="fullPath">The full path to write the XML packages.config file into, or load existing packages.config from</param>
            <param name="createNew">Whether to create a new packages.config file, or load an existing one</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.#ctor(System.String,System.Boolean,NuGet.Frameworks.IFrameworkNameProvider)">
            <summary>
            Create a packages.config writer using file path
            </summary>
            <param name="fullPath">The full path to write the XML packages.config file into, or load existing packages.config from</param>
            <param name="createNew">Whether to create a new packages.config file, or load an existing one</param>
            <param name="frameworkMappings">Framework mappings</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Create a packages.config writer using stream
            </summary>
            <param name="stream">Stream to write the XML packages.config file into, or load existing packages.config from</param>
            <param name="createNew">Whether to create a new packages.config file, or load an existing one</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.#ctor(System.IO.Stream,System.Boolean,NuGet.Frameworks.IFrameworkNameProvider)">
            <summary>
            Create a packages.config writer using stream
            </summary>
            <param name="stream">Stream to write the XML packages.config file into, or load existing packages.config from</param>
            <param name="createNew">Whether to create a new packages.config file, or load an existing one</param>
            <param name="frameworkMappings">Framework mappings</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.WriteMinClientVersion(NuGet.Versioning.NuGetVersion)">
            <summary>
            Write a minimum client version to packages.config
            </summary>
            <param name="version">Minumum version of the client required to parse and use this file.</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.AddPackageEntry(System.String,NuGet.Versioning.NuGetVersion,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Add a package entry
            </summary>
            <param name="packageId">Package Id</param>
            <param name="version">Package Version</param>
            <param name="targetFramework">Package targetFramework that's compatible with current project</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.AddPackageEntry(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Adds a basic package entry to the file
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.AddPackageEntry(NuGet.Packaging.PackageReference)">
            <summary>
            Adds a package entry to the file
            </summary>
            <param name="entry">Package reference entry</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.UpdatePackageEntry(NuGet.Packaging.PackageReference,NuGet.Packaging.PackageReference)">
            <summary>
            Update a package entry to the file
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.UpdateOrAddPackageEntry(System.Xml.Linq.XDocument,NuGet.Packaging.PackageReference)">
            <summary>
            Update a package entry using the original entry as a base if it exists.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.RemovePackageEntry(System.String,NuGet.Versioning.NuGetVersion,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Remove a package entry
            </summary>
            <param name="packageId">Package Id</param>
            <param name="version">Package version</param>
            <param name="targetFramework">Package targetFramework</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.RemovePackageEntry(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Remove a package identity from the file
            </summary>
            <param name="identity">Package identity</param>
            <param name="targetFramework">Package targetFramework</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.RemovePackageEntry(NuGet.Packaging.PackageReference)">
            <summary>
            Removes a package entry from the file
            </summary>
            <param name="entry">Package reference entry</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.WriteFile(System.String)">
            <summary>
            Write the XDocument to the packages.config and disallow further changes.
            </summary>
            <param name="fullPath">the full path to packages.config file</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.Dispose">
            <summary>
            Write the XDocument to the stream and close it to disallow further changes.
            </summary>
        </member>
        <member name="F:NuGet.Packaging.PackagingConstants.ManifestExtension">
            <summary>
            Represents the ".nuspec" extension.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Error_InvalidTargetFramework">
            <summary>
              Looks up a localized string similar to Unsupported targetFramework value '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorDuplicatePackages">
            <summary>
              Looks up a localized string similar to There are duplicate packages: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorInvalidAllowedVersions">
            <summary>
              Looks up a localized string similar to Invalid allowedVersions for package id '{0}': '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorInvalidMinClientVersion">
            <summary>
              Looks up a localized string similar to Invalid minClientVersion: '{0}'.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorInvalidPackageVersion">
            <summary>
              Looks up a localized string similar to Invalid package version for package id '{0}': '{1}'.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorInvalidPackageVersionForDependency">
            <summary>
              Looks up a localized string similar to Invalid package version for a dependency with id '{0}' in package '{1}': '{2}'.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorNullOrEmptyPackageId">
            <summary>
              Looks up a localized string similar to Null or empty package id.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorUnableToDeleteFile">
            <summary>
              Looks up a localized string similar to Unable to delete temporary file '{0}'. Error: '{1}'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.FailedFileTime">
            <summary>
              Looks up a localized string similar to Failed to update file time for {0}: {1}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorUnableCheckPackageEntries">
            <summary>
              Looks up a localized string similar to An unexpected error occurred while checking package entries..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorUnsafePackageEntry">
            <summary>
              Looks up a localized string similar to The package '{0}' contains an entry which is unsafe for extraction..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.FailToLoadPackagesConfig">
            <summary>
              Looks up a localized string similar to Fail to load packages.config as XML file. Please check it. .
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.FailToWritePackagesConfig">
            <summary>
              Looks up a localized string similar to Failed to write packages.config as XML file '{0}'. Error: '{1}'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.FallbackFolderNotFound">
            <summary>
              Looks up a localized string similar to Unable to find fallback package folder '{0}'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidNuspecElement">
            <summary>
              Looks up a localized string similar to {0} This validation error occurred in a '{1}' element..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidNuspecEntry">
            <summary>
              Looks up a localized string similar to The nuspec contains an invalid entry '{0}' in package '{1}' ..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidPackageFrameworkFolderName">
            <summary>
              Looks up a localized string similar to The framework in the folder name of '{0}' in package '{1}' could not be parsed..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Log_InstallingPackage">
            <summary>
              Looks up a localized string similar to Installing {0} {1}..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MinClientVersionAlreadyExist">
            <summary>
              Looks up a localized string similar to MinClientVersion already exists in packages.config.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MissingNuspec">
            <summary>
              Looks up a localized string similar to Nuspec file does not exist in package..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MultipleNuspecFiles">
            <summary>
              Looks up a localized string similar to Package contains multiple nuspec files..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MustContainAbsolutePath">
            <summary>
              Looks up a localized string similar to '{0}' must contain an absolute path '{1}'..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PackageEntryAlreadyExist">
            <summary>
              Looks up a localized string similar to Package entry already exists in packages.config. Id: {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PackageEntryNotExist">
            <summary>
              Looks up a localized string similar to Package entry does not exists in packages.config. Id: {0}, Version: {1}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PackageMinVersionNotSatisfied">
            <summary>
              Looks up a localized string similar to The '{0}' package requires NuGet client version '{1}' or above, but the current NuGet version is '{2}'. To upgrade NuGet, please go to http://docs.nuget.org/consume/installing-nuget.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PackagesNodeNotExist">
            <summary>
              Looks up a localized string similar to Packages node does not exists in packages.config at {0}..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PackageStreamShouldBeSeekable">
            <summary>
              Looks up a localized string similar to Package stream should be seekable.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.StringCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to String argument '{0}' cannot be null or empty.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.UnableToAddEntry">
            <summary>
              Looks up a localized string similar to An error occurred while updating packages.config. The file was closed before the entry could be added..
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.UnableToParseClientVersion">
            <summary>
              Looks up a localized string similar to Unable to parse the current NuGet client version..
            </summary>
        </member>
        <member name="M:NuGet.Packaging.TopologicalSortUtility.SortPackagesByDependencyOrder``1(System.Collections.Generic.IEnumerable{``0},System.StringComparer,System.Func{``0,System.String},System.Func{``0,System.String[]})">
            <summary>
            Order dependencies by children first.
            </summary>
            <param name="items">Items to sort.</param>
            <param name="comparer">Comparer for Ids.</param>
            <param name="getId">Retrieve the id of the item.</param>
            <param name="getDependencies">Retrieve dependency ids.</param>
            <returns></returns>
        </member>
        <member name="M:NuGet.Packaging.TopologicalSortUtility.SortPackagesByDependencyOrder(System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependencyInfo})">
            <summary>
            Order dependencies by children first.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.TopologicalSortUtility.SortPackagesByDependencyOrder(System.Collections.Generic.List{NuGet.Packaging.TopologicalSortUtility.ItemDependencyInfo},System.StringComparer)">
            <summary>
            Order dependencies by children first.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.VersionFolderPathResolver">
            <summary>
            A V3 path resolver.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.VersionFolderPathResolver.RootPath">
            <summary>
            Gets the packages directory root folder.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.VersionFolderPathResolver.IsLowerCase">
            <summary>
            Gets a flag indicating whether or not package ID's and versions are made lowercase.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:NuGet.Packaging.VersionFolderPathResolver" /> class.
            </summary>
            <param name="rootPath">The packages directory root folder.</param>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:NuGet.Packaging.VersionFolderPathResolver" /> class.
            </summary>
            <param name="rootPath">The packages directory root folder.</param>
            <param name="isLowercase"><c>true</c> if package ID's and versions are made lowercase;
            otherwise <c>false</c>.</param>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetInstallPath(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Gets the package install path.
            </summary>
            <param name="packageId">The package ID.</param>
            <param name="version">The package version.</param>
            <returns>The package install path.</returns>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetVersionListPath(System.String)">
            <summary>
            Gets the package version list path.
            </summary>
            <param name="packageId">The package ID.</param>
            <returns>The package version list path.</returns>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetPackageFilePath(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Gets the package file path.
            </summary>
            <param name="packageId">The package ID.</param>
            <param name="version">The package version.</param>
            <returns>The package file path.</returns>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetManifestFilePath(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Gets the manifest file path.
            </summary>
            <param name="packageId">The package ID.</param>
            <param name="version">The package version.</param>
            <returns>The manifest file path.</returns>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetHashPath(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Gets the hash file path.
            </summary>
            <param name="packageId">The package ID.</param>
            <param name="version">The package version.</param>
            <returns>The hash file path.</returns>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetHashFileName(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Gets the hash file name.
            </summary>
            <param name="packageId">The package ID.</param>
            <param name="version">The package version.</param>
            <returns>The hash file name.</returns>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetVersionListDirectory(System.String)">
            <summary>
            Gets the version list directory.
            </summary>
            <param name="packageId">The package ID.</param>
            <returns>The version list directory.</returns>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetPackageDirectory(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Gets the package directory.
            </summary>
            <param name="packageId">The package ID.</param>
            <param name="version">The package version.</param>
            <returns>The package directory.</returns>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetPackageFileName(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Gets the package file name.
            </summary>
            <param name="packageId">The package ID.</param>
            <param name="version">The package version.</param>
            <returns>The package file name.</returns>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetPackageDownloadMarkerFileName(System.String)">
            <summary>
            Gets the package download marker file name.
            </summary>
            <param name="packageId">The package ID.</param>
            <returns>The package download marker file name.</returns>
        </member>
        <member name="M:NuGet.Packaging.VersionFolderPathResolver.GetManifestFileName(System.String,NuGet.Versioning.NuGetVersion)">
            <summary>
            Gets the manifest file name.
            </summary>
            <param name="packageId">The package ID.</param>
            <param name="version">The package version.</param>
            <returns>The manifest file name.</returns>
        </member>
        <member name="T:NuGet.RuntimeModel.IObjectWriter">
            <summary>
            Provides functionality for writing an object graph.
            The output format is defined by implementors.
            </summary>
        </member>
        <member name="M:NuGet.RuntimeModel.IObjectWriter.WriteObjectStart(System.String)">
             <summary>
             Writes the start of a nested object.
            
             This new object becomes the scope for all other method calls until either WriteObjectStart
             is called again to start a new nested object or WriteObjectEnd is called.
            
             Every call to WriteObjectStart must be balanced by a corresponding call to WriteObjectEnd.
             </summary>
             <param name="name">The name of the object.  Throws if <c>null</c>.</param>
        </member>
        <member name="M:NuGet.RuntimeModel.IObjectWriter.WriteObjectEnd">
             <summary>
             Writes the end of a nested object.
            
             The parent object for this object becomes the scope for subsequent method calls.
             If this object is the root object, no further writing is allowed.
            
             Every call to WriteObjectStart must be balanced by a corresponding call to WriteObjectEnd.
             </summary>
        </member>
        <member name="M:NuGet.RuntimeModel.IObjectWriter.WriteNameValue(System.String,System.Int32)">
            <summary>
            Writes a name-value pair.
            </summary>
            <param name="name">The name of the datum.  Throws if <c>null</c>.</param>
            <param name="value">The datum.</param>
        </member>
        <member name="M:NuGet.RuntimeModel.IObjectWriter.WriteNameValue(System.String,System.Boolean)">
            <summary>
            Writes a name-value pair.
            </summary>
            <param name="name">The name of the datum.  Throws if <c>null</c>.</param>
            <param name="value">The datum.</param>
        </member>
        <member name="M:NuGet.RuntimeModel.IObjectWriter.WriteNameValue(System.String,System.String)">
            <summary>
            Writes a name-value pair.
            </summary>
            <param name="name">The name of the datum.  Throws if <c>null</c>.</param>
            <param name="value">The datum.</param>
        </member>
        <member name="M:NuGet.RuntimeModel.IObjectWriter.WriteNameArray(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes a name-collection pair.
            </summary>
            <param name="name">The name of the data.  Throws if <c>null</c>.</param>
            <param name="values">The data.</param>
        </member>
        <member name="T:NuGet.RuntimeModel.JsonObjectWriter">
             <summary>
             Generates JSON from an object graph.
            
             This is non-private only to facilitate unit testing.
             </summary>
        </member>
        <member name="M:NuGet.RuntimeModel.JsonObjectWriter.GetJson">
             <summary>
             Gets the JSON for the object.
            
             Once <see cref="M:NuGet.RuntimeModel.JsonObjectWriter.GetJson" /> is called, no further writing is allowed.
             </summary>
        </member>
        <member name="M:NuGet.RuntimeModel.JsonObjectWriter.GetJObject">
            <summary>
            Gets the JObject (in-memory JSON model) for the object.
            
            Once <see cref="M:NuGet.RuntimeModel.JsonObjectWriter.GetJObject" /> is called, no further writing is allowed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NuGet.RuntimeModel.JsonObjectWriter.WriteTo(Newtonsoft.Json.JsonTextWriter)">
             <summary>
             Writes the result to a <c>JsonTextWriter</c>.
            
             Once WriteTo is called, no further writing is allowed.
             </summary>
        </member>
        <member name="M:NuGet.RuntimeModel.RuntimeDescription.Merge(NuGet.RuntimeModel.RuntimeDescription,NuGet.RuntimeModel.RuntimeDescription)">
            <summary>
            Merges the content of the other runtime description in to this runtime description
            </summary>
            <param name="other">The other description to merge in to this description</param>
        </member>
        <member name="M:NuGet.RuntimeModel.RuntimeGraph.Merge(NuGet.RuntimeModel.RuntimeGraph,NuGet.RuntimeModel.RuntimeGraph)">
            <summary>
            Merges the content of the other runtime graph in to this runtime graph
            </summary>
            <param name="other">The other graph to merge in to this graph</param>
        </member>
        <member name="M:NuGet.RuntimeModel.RuntimeGraph.AreCompatible(System.String,System.String)">
            <summary>
            Determines if two runtime identifiers are compatible, based on the import graph
            </summary>
            <param name="criteria">The criteria being tested</param>
            <param name="provided">The value the criteria is being tested against</param>
            <returns>
            true if an asset for the runtime in <paramref name="provided" /> can be installed in a project
            targetting <paramref name="criteria" />, false otherwise
            </returns>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.OrderedEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two enumberables for equality, ordered according to the specified key and optional comparer. Handles null values gracefully.
            </summary>
            <typeparam name="TSource">The type of the list</typeparam>
            <typeparam name="TKey">The type of the sorting key</typeparam>
            <param name="self">This list</param>
            <param name="other">The other list</param>
            <param name="keySelector">The function to extract the key from each item in the list</param>
            <param name="orderComparer">An optional comparer for comparing keys</param>
            <param name="sequenceComparer">An optional comparer for sequences</param>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.SequenceEqualWithNullCheck``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two sequence for equality, allowing either sequence to be null. If one is null, both have to be
            null for equality.
            </summary>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.SetEqualsWithNullCheck``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two sets for equality, allowing either sequence to be null.
            If one is null, both have to be null for equality.
            </summary>
        </member>
        <member name="T:NuGet.Shared.HashCodeCombiner">
            <summary>
            Hash code creator, based on the original NuGet hash code combiner/ASP hash code combiner implementations
            </summary>
        </member>
        <member name="M:NuGet.Shared.HashCodeCombiner.GetHashCode``2(``0,``1)">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="M:NuGet.Shared.HashCodeCombiner.GetHashCode``3(``0,``1,``2)">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="M:NuGet.Shared.Extensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return the enumerable as a List of T, copying if required. Optimized for common case where it is an List of T.
            Avoid mutating the return value.
            </summary>
            <remarks>https://aspnetwebstack.codeplex.com/SourceControl/latest#src/Common/CollectionExtensions.cs</remarks>
        </member>
        <member name="M:NuGet.Shared.Extensions.AsHashSet``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Return the ISet as a HashSet of T, copying if required. Optimized for common case where it is a HashSet of T.
            Avoid mutating the return value.
            </summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" /><DigestValue>vrBDx5Cs1VXJBs3HR1j0jLPdCuY=</DigestValue></Reference></SignedInfo><SignatureValue>ZKNcO4X5nPWAkgnrbd4GJM+QL+nUjaj8EY6ZptUbPvXoVkC363j8RNtTo4vMB3SuhAIazDv6Nr//g/H3fI6hEPzZawWdxUVIX+vXiAxcEZKnc9tWKxfO6iob8o8jm21/zCU6/SfeBvMKGZY1RauntrcML1Z/eqTA77c4J6eoB//6EK/dFSD04v1iGVglCax0jqMBvNQczuN+sw4WIs8orC8toQRZfClz3Bhy06lqcLXXuKicCkkFNLjTap56wbPqaDApYAQUlZAWjQJ6kcMU/MaLCmjsxW1grOjg9Jo67JZA9oSZ4dmI+6Uph5jBJ/NRiEE3ANtFZg5JPXJBTRKddw==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>m1K+Tyy0HVPLPV0jHraDo5/A5UrgV7PC+C3WipFfzBLODN0Ct0Z49Gub3ufLICGP1D4OJZRyOnhjZi61X+Hbl/2IjqiIl1VMHR4+qWlJLRNj+X7DparTv3/CBzkhMGY2lZdvp96rpRL2heloKGkmmxqet6/sU3hvw8wxMIf29zYrMEBZSEaAUajNDIDd40qeLXRV7OanRHrVE770wiR9DP0zzeYjX5rN1CltAtUyWmonz7DJAYuUr+UMi3offSITg4byWkvThGNXGmtJeDpU6Y/hhcblP5Yl5175yMvHofLyGw0iW7kv/Izp2yjEVRe26PTXes/9nNOP7ul2KoKMoQ==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>MIIE2zCCA8OgAwIBAgITMwAAAbHd7bpU6WW4XwABAAABsTANBgkqhkiG9w0BAQUFADB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpNaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQTAeFw0xODA3MTIyMDExMTlaFw0xOTA3MjYyMDExMTlaMHQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xHjAcBgNVBAMTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJtSvk8stB1Tyz1dIx62g6OfwOVK4Fezwvgt1oqRX8wSzgzdArdGePRrm97nyyAhj9Q+DiWUcjp4Y2YutV/h25f9iI6oiJdVTB0ePqlpSS0TY/l+w6Wq079/wgc5ITBmNpWXb6feq6US9oXpaChpJpsanrev7FN4b8PMMTCH9vc2KzBAWUhGgFGozQyA3eNKni10Vezmp0R61RO+9MIkfQz9M83mI1+azdQpbQLVMlpqJ8+wyQGLlK/lDIt6H30iE4OG8lpL04RjVxprSXg6VOmP4YXG5T+WJede+cjLx6Hy8hsNIlu5L/yM6dsoxFUXtuj013rP/ZzTj+7pdiqCjKECAwEAAaOCAV8wggFbMBMGA1UdJQQMMAoGCCsGAQUFBwMDMB0GA1UdDgQWBBREE7QCnXc+kFVx9eQcf6wXFM8+czBQBgNVHREESTBHpEUwQzEpMCcGA1UECxMgTWljcm9zb2Z0IE9wZXJhdGlvbnMgUHVlcnRvIFJpY28xFjAUBgNVBAUTDTIyOTgwMys0Mzc5NTAwHwYDVR0jBBgwFoAUyxHoytK0FlgByTcuMxYWuUyaCh8wVgYDVR0fBE8wTTBLoEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWljQ29kU2lnUENBXzA4LTMxLTIwMTAuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEFBQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNDb2RTaWdQQ0FfMDgtMzEtMjAxMC5jcnQwDQYJKoZIhvcNAQEFBQADggEBAIOp8qYzxaF7HNJegK7spKbD6ShdVyUjjd0lCWlw6E1pFi+UuwXZm4DsWdBoZBuDNKjcz2ONnWt2APV7r0J0B8X8kcDirEUzll2x/fqORrJJ4kMGGZiFcXjTnunblRZBMTRwLEOWogJ3qS89YUpjWfGXfdFSlWCFqLwbRQc/2cGP91D1uX4IieRCxFiOQcCVOEkf1x34ME8pLztHWZI37pch7RdmkBwvLW1r/wt15aoS3fqvxBG04CEyWr8FzkX5P41Wrs5R1syufQQZMBLyv59IJpwOAA0oraXeRC3M1If/lEmVVwxNNJwjCt3DjTIJ9L01KMXe0Ig/qRIToTBwoBE=</X509Certificate><X509Certificate>MIIFvDCCA6SgAwIBAgIKYTMmGgAAAAAAMTANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMTAwODMxMjIxOTMyWhcNMjAwODMxMjIyOTMyWjB5MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSMwIQYDVQQDExpNaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJyWVwZMGS/HZpgICBCmXZTbD4b1m/My/Hqa/6XFhDg3zp0gxq3L6Ay7P/ewkJOI9VyANs1VwqJyq4gSfTwaKxNS42lvXlLcZtHB9r9Jd+ddYjPqnNEf9eB2/O98jakyVxF3K+tPeAoaJcap6Vyc1bxF5Tk/TWUcqDWdl8ed0WDhTgW0HNbBbpnUo2lsmkv2hkL/pJ0KeJ2L1TdFDBZ+NKNYv3LyV9GMVC5JxPkQDDPcikQKCLHN049oDI9kM2hOAaFXE5WgigqBTK3S9dPY+fSLWLxRT3nrAgA9kahntFbjCZT6HqqSvJGzzc8OJ60d1ylF56NyxGPVjzBrAlfA9MCAwEAAaOCAV4wggFaMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFMsR6MrStBZYAck3LjMWFrlMmgofMAsGA1UdDwQEAwIBhjASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBT90TFO0yaKleGYYDuoMW+mPLzYLTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTAfBgNVHSMEGDAWgBQOrIJgQFYnl+UlE/wq4QpTlVnkpDBQBgNVHR8ESTBHMEWgQ6BBhj9odHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9taWNyb3NvZnRyb290Y2VydC5jcmwwVAYIKwYBBQUHAQEESDBGMEQGCCsGAQUFBzAChjhodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY3Jvc29mdFJvb3RDZXJ0LmNydDANBgkqhkiG9w0BAQUFAAOCAgEAWTk+fyZGr+tvQLEytWrrDi9uqEn361917Uw7LddDrQv+y+ktMaMjzHxQmIAhXaw9L0y6oqhWnONwu7i0+Hm1SXL3PupBf8rhDBdpy6WcIC36C1DEVs0t40rSvHDnqA2iA6VW4LiKS1fylUKc8fPv7uOGHzQ8uFaa8FMjhSqkghyT4pQHHfLiTviMocroE6WRTsgb0o9ylSpxbZsa+BzwU9ZnzCL/XB3Nooy9J7J5Y1ZEolHN+emjWFbdmwJFRC9f9Nqu1IIybvyklRPk62nnqaIsvsgrEA5ljpnb9aL6EiYJZTiU8XofSrvR4Vbo0HiWGFzJNRZf3ZMdSY4tvq00RBzuEBUaAF3dNVshzpjHCe6FDoxPbQ4TTj18KUicctHzbMrB7HCjV5JXfZSNoBtIA1r3z6NnCnSlNu0tLxfI5nI3EvRvsTxngvlSso0zFmUeDordEN5k9G/ORtTTF+l5xAS00/ss3x+KnqwK+xMnQK3k+eGpf0a7B2BHZWBATrBC7E7ts3Z52Ao0CW0cgDEf4g5U3eWh++VHEK1kmP9QFi58vwUheuKVQSdpw5OPlcmN2Jshrg1cnPCiroZogwxqLbt2awAdlq3yFnv2FoMkuYjPaqhHMS+a3ONxPdcAfmJH0c6IybgY+g5yjcGjPa8CQGr/aZuW4hCoELQ3UAjWwz0=</X509Certificate><X509Certificate>MIIFmTCCA4GgAwIBAgIQea0WoUqgpa1Mc1j0BxMuZTANBgkqhkiG9w0BAQUFADBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDEwNTA5MjMxOTIyWhcNMjEwNTA5MjMyODEzWjBfMRMwEQYKCZImiZPyLGQBGRYDY29tMRkwFwYKCZImiZPyLGQBGRYJbWljcm9zb2Z0MS0wKwYDVQQDEyRNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDzXfqAZ9Rap6kMLJAg0DUIPHWEzbcHiZyJ2t7Ow2D6kWhanpRxKRh2fMLgyCV2lA5Y+gQ0Nubfr/eAuulYCyuT5Z0F43cikfc0ZDwikR1e4QmQvBT+/HVYGeF5tweSo66IWQjYnwfKA1j8aCltMtfSqMtL/OELSDJP5uu4rU/kXG8TlJnbldV126gat5SRtHdb9UgMj2p5fRRwBH1tr5D12nDYR7e/my9s5wW34RFgrHmRFHzF1qbk4X7Vw37lktI8ALU2gt554W3ztW74nzPJy1J9c5g224uha6KVl5uj3sJNJv8GlmclBsjnrOTuEjOVMZnINQhONMp5U9W1vmMyWUA2wKVOBE0921sHM+RYv+8/U2TYQlk1V/0PRXwkBE2e1jh0EZcikM5oRHSSb9VLb7CG48c2QqDQ/MHAWvmjYbkwR3GWChawkcBCle8Qfyhq4yofseTNAz93cQTHIPxJDx1FiKTXy36IrY4t7EXbxFEEySr87IaemhGXW97OU4jm4rf9rJXCKEDb7wSQ34EzOdmyRaUjhwalVYkxuwYtYA5BGH0fLrWXyxHrFdUkpZTvFRSJ/Utz+jJb/NEzAPlZYnAHMuouq0Ate8rdIWcbMJmPFqojqEHRsG4RmzbE3kB0nOFYZcFgHnpbOMiPuwQmfNQWQOW2a2yqhv0Av87BNQIDAQABo1EwTzALBgNVHQ8EBAMCAcYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUDqyCYEBWJ5flJRP8KuEKU5VZ5KQwEAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQEFBQADggIBAMURTQM6YN1dUhF3j7K7NsiyBb+0t6jYIJ1cEwO2HCL6BhM1tshj1JpHbyZX0lXxBLEmX9apUGigvNK4bszD6azfGc14rFl0rGY0NsQbPmw4TDMOMBINoyb+UVMA/69aToQNDx/kbQUuToVLjWwzb1TSZKu/UK99ejmgN+1jAw/8EwbOFjbUVDuVG1FiOuVNF9QFOZKaJ6hbqr3su77jIIlgcWxWs6UT0G0OI36VA+1oPfLYY7hrTbboMLXhypRL96KqXZkwsj2nwlFsKCABJCcrSwC3nRFrcL6yEIK8DJto0I07JIeqmShynTNfWZC99d6TnjpiWjQ54ohVHbkGsMGJay3XacMZEjaE0Mmg2v8vaXiy5Xra69cMwPe9Yxe4ORM4ojZbe/KFVmodZGLBOOKqv1FmopT1EpxmIhBr8rcwki3yKfA9OxRDaKLxnCk3y844ICVtfGfzfiQSJAMIgUfspZ6X9RjXz7vV73aW7/3O21adlaBC+ZdY4dcxItNfWeY+biIA6kOEtiXb2fMIVmjAZGsdfOy2k6JiV24u2OdYj8QxSSbd3ik1h/UwcXBbFDxpvYkSfesuo/7Yf56CWlIKK8FDK9kwiJ/IEPuJjeahhXUzfmye23MTZGJppS99ypZtn/gETTCSPW4hFCHJPeDD/YprnUr90aGdmUN3P7Da</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>MIIE3jCCA8agAwIBAgITMwAAAPr+Xnt2AOhChgAAAAAA+jANBgkqhkiG9w0BAQUFADB3MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSEwHwYDVQQDExhNaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EwHhcNMTgwODIzMjAyMDA4WhcNMTkxMTIzMjAyMDA4WjCBzjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEpMCcGA1UECxMgTWljcm9zb2Z0IE9wZXJhdGlvbnMgUHVlcnRvIFJpY28xJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOjk4RkQtQzYxRS1FNjQxMSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzwcAGQJX1ai/xcQS8o1UJGIXvx/LmhIK4BHeev3tvaQXCkGhvB3/lZjUpzsT8ROFSbPqDJXGBORDiD3sD2B7rveRS+VjZ1zdfwI/KcNPmzAYjq9qxaroRe8xJo3iHzY33dgCvRTrIiUVRAO4ewUEdXKhemEM9Y0/+Auy5J5xn/LySSjLpm39Mqm54oWr8di8cNxc2ctoWpDXFhs09PHghvYvDUTCsANn8b+9M4C8PzUPzqBev1FWwiJcWFZN5/r8V5f67Gw3N4cTqzy/yIKXB6W9xpJ4OpO0IXBSlNTUyElqXEiYrwu/uMZSzGLpyTAwT4coVXr48oDM3VlaF4loGwIDAQABo4IBCTCCAQUwHQYDVR0OBBYEFGffDVHzuflzYlNd4GaI1GFWR1dKMB8GA1UdIwQYMBaAFCM0+NlSRnAK7UD7dvuzK7DDNbMPMFQGA1UdHwRNMEswSaBHoEWGQ2h0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY3Jvc29mdFRpbWVTdGFtcFBDQS5jcmwwWAYIKwYBBQUHAQEETDBKMEgGCCsGAQUFBzAChjxodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY3Jvc29mdFRpbWVTdGFtcFBDQS5jcnQwEwYDVR0lBAwwCgYIKwYBBQUHAwgwDQYJKoZIhvcNAQEFBQADggEBACbUXkej3SanMKMw+xl2/cC8upmwcv1e9VUP/po7Xo0l0Zbx6q4SRbxjPKK/YF8GmeUD3dsrGw5tcH+BgXQ/2x7LVo0aioR1gtA1rfl7OjfXw1mqYHTvIidpKnFyc3gWVG8zIL+XNqSLUWP3G07xNqtuNGBYLjoy1ozdx2ZaBx5IFNEaDxdvkf6/esikvhSgLe8cK9Ko+T6XPGuK/qEvldA/gB28MU7sFMHGFxkq5ZsiYd6lReJfsj8r9ZCJnNjcNxs0VNO8+RD5X1bQEAC2fH+ZjcuDUead080pI0Gh7P4RHKT//MhhbXf6evSyUeg4VacwIB+9L0E6k55CXiHgb9w=</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">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</CounterSignature></Object></Signature></doc>
