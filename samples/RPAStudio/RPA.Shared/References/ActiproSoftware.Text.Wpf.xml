<?xml version="1.0"?><doc><assembly><name>ActiproSoftware.Text.Wpf</name></assembly><members><member name="T:ActiproSoftware.Text.CaseSensitivity"><summary>
            Represents the type of case sensitivity to apply.
            </summary></member><member name="F:ActiproSoftware.Text.CaseSensitivity.Sensitive"><summary>
            Case sensitive - exact letter case is matched.
            </summary></member><member name="F:ActiproSoftware.Text.CaseSensitivity.Insensitive"><summary>
            Case insensitive - upper and lower case of a letter is matched.
            </summary></member><member name="F:ActiproSoftware.Text.CaseSensitivity.AutoCorrect"><summary>
            Treated the same as <c>Insensitive</c> however the text is converted to the exact pattern if not already equal to it.
            This is useful for languages like <c>VB.NET</c> where keywords should be forced to be certain combinations of mixed case letters.
            </summary></member><member name="T:ActiproSoftware.Text.CharacterCasing"><summary>
            Specifies the target case of text characters.
            </summary></member><member name="F:ActiproSoftware.Text.CharacterCasing.Normal"><summary>
            The case of characters is left unchanged.
            </summary></member><member name="F:ActiproSoftware.Text.CharacterCasing.Upper"><summary>
            Converts all characters to uppercase.
            </summary></member><member name="F:ActiproSoftware.Text.CharacterCasing.Lower"><summary>
            Converts all characters to lowercase.
            </summary></member><member name="T:ActiproSoftware.Text.ClassificationTypes"><summary>
            Provides access to the built-in <see cref="T:ActiproSoftware.Text.IClassificationType" /> instances.
            </summary></member><member name="P:ActiproSoftware.Text.ClassificationTypes.Comment"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> for a general comment.
            </summary><value>The <see cref="T:ActiproSoftware.Text.IClassificationType" /> for a general comment.</value></member><member name="P:ActiproSoftware.Text.ClassificationTypes.CompilerError"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> for a compiler error.
            </summary><value>The <see cref="T:ActiproSoftware.Text.IClassificationType" /> for a compiler error.</value></member><member name="P:ActiproSoftware.Text.ClassificationTypes.Identifier"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> for a general identifier.
            </summary><value>The <see cref="T:ActiproSoftware.Text.IClassificationType" /> for a general identifier.</value></member><member name="P:ActiproSoftware.Text.ClassificationTypes.Keyword"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> for a general keyword.
            </summary><value>The <see cref="T:ActiproSoftware.Text.IClassificationType" /> for a general keyword.</value></member><member name="P:ActiproSoftware.Text.ClassificationTypes.Number"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> for a general number.
            </summary><value>The <see cref="T:ActiproSoftware.Text.IClassificationType" /> for a general number.</value></member><member name="P:ActiproSoftware.Text.ClassificationTypes.OtherError"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> for an other error.
            </summary><value>The <see cref="T:ActiproSoftware.Text.IClassificationType" /> for an other error.</value></member><member name="P:ActiproSoftware.Text.ClassificationTypes.PreprocessorKeyword"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> for a general preprocessor keyword.
            </summary><value>The <see cref="T:ActiproSoftware.Text.IClassificationType" /> for a general preprocessor keyword.</value></member><member name="P:ActiproSoftware.Text.ClassificationTypes.ReadOnlyRegion"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> for a read-only region.
            </summary><value>The <see cref="T:ActiproSoftware.Text.IClassificationType" /> for a read-only region.</value></member><member name="P:ActiproSoftware.Text.ClassificationTypes.String"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> for a general string.
            </summary><value>The <see cref="T:ActiproSoftware.Text.IClassificationType" /> for a general string.</value></member><member name="P:ActiproSoftware.Text.ClassificationTypes.SyntaxError"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> for a syntax error.
            </summary><value>The <see cref="T:ActiproSoftware.Text.IClassificationType" /> for a syntax error.</value></member><member name="P:ActiproSoftware.Text.ClassificationTypes.Warning"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> for a warning.
            </summary><value>The <see cref="T:ActiproSoftware.Text.IClassificationType" /> for a warning.</value></member><member name="T:ActiproSoftware.Text.IClassificationType"><summary>
            Provides the base requirements for an object that represents a classification type.
            </summary><seealso cref="T:ActiproSoftware.Text.Implementation.ClassificationType" /></member><member name="P:ActiproSoftware.Text.IClassificationType.Description"><summary>
            Gets the description of the classification type, which is displayed in the user interface.
            </summary><value>The description of the classification type, which is displayed in the user interface.</value></member><member name="T:ActiproSoftware.Text.IClassificationTypeRegistry"><summary>
            Provides the base requirements for an object that provides a registry of <see cref="T:ActiproSoftware.Text.IClassificationType" /> data.
            </summary></member><member name="P:ActiproSoftware.Text.IClassificationTypeRegistry.Count"><summary>
            Gets the number of entries in the registry.
            </summary><value>The number of entries in the registry.</value></member><member name="P:ActiproSoftware.Text.IClassificationTypeRegistry.Item(System.String)"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> with the specified key. 
            <para>
            [C#] In C#, this property is the indexer for the <c>IClassificationTypeRegistry</c> interface. 
            </para></summary><param name="key">The key of the <see cref="T:ActiproSoftware.Text.IClassificationType" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.Text.IClassificationType" /> with the specified key. 
            </value></member><member name="T:ActiproSoftware.Text.ICodeDocument"><summary>
            Provides the base requirements for a text document with some advanced features that relate to syntax highlighting and code parsing.
            </summary><seealso cref="T:ActiproSoftware.Text.Implementation.CodeDocument" /></member><member name="M:ActiproSoftware.Text.ICodeDocument.AddLanguageChangedEventHandler(System.EventHandler{ActiproSoftware.Text.SyntaxLanguageChangedEventArgs},ActiproSoftware.Text.Utility.EventHandlerPriority)"><summary>
            Adds an event handler for the <see cref="E:ActiproSoftware.Text.ICodeDocument.LanguageChanged" /> event using the specified priority level.
            </summary><param name="handler">The delegate handler.</param><param name="priority">A <see cref="T:ActiproSoftware.Text.Utility.EventHandlerPriority" /> specifying the priority level.</param></member><member name="M:ActiproSoftware.Text.ICodeDocument.CreateTagAggregator``1"><summary>
            Creates a new <see cref="T:ActiproSoftware.Text.Tagging.ITagAggregator`1" /> that collects the tag results from all <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> instances
            associated with this document.
            </summary><typeparam name="T">The type of <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> associated with this aggregator.</typeparam><returns>The <see cref="T:ActiproSoftware.Text.Tagging.ITagAggregator`1" /> that was created.</returns></member><member name="M:ActiproSoftware.Text.ICodeDocument.GetServices``1"><summary>
            Returns a list of available services of the specified type.
            </summary><typeparam name="TService">The type of service.</typeparam><returns>The list of available services of the specified type.</returns></member><member name="M:ActiproSoftware.Text.ICodeDocument.QueueParseRequest"><summary>
            Queues up a parse request for the document with the ambient dispatcher.
            </summary><remarks>
            If <see cref="T:ActiproSoftware.Text.Parsing.AmbientParseRequestDispatcherProvider" /> does not provide a dispatcher,
            the parsing operation is completed immediately in the calling thread.
            </remarks></member><member name="M:ActiproSoftware.Text.ICodeDocument.RemoveLanguageChangedEventHandler(System.EventHandler{ActiproSoftware.Text.SyntaxLanguageChangedEventArgs},ActiproSoftware.Text.Utility.EventHandlerPriority)"><summary>
            Removes an event handler for the <see cref="E:ActiproSoftware.Text.ICodeDocument.LanguageChanged" /> event using the specified priority level.
            </summary><param name="handler">The delegate handler.</param><param name="priority">A <see cref="T:ActiproSoftware.Text.Utility.EventHandlerPriority" /> specifying the priority level.</param></member><member name="P:ActiproSoftware.Text.ICodeDocument.Language"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> that is currently loaded.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> that is currently loaded.</value><remarks>The default value is a plain text language.</remarks></member><member name="P:ActiproSoftware.Text.ICodeDocument.LanguageData"><summary>
            Gets or sets an object that specifies document-specific data for the <see cref="P:ActiproSoftware.Text.ICodeDocument.Language" /> that is loaded.
            </summary><value>An object that specifies document-specific data for the <see cref="P:ActiproSoftware.Text.ICodeDocument.Language" /> that is loaded.</value></member><member name="P:ActiproSoftware.Text.ICodeDocument.ParseData"><summary>
            Gets or sets the syntax/semantic parse data that has been assigned to this document as a result of a parsing operation.
            </summary><value>The syntax/semantic parse data that has been assigned to this document as a result of a parsing operation.</value></member><member name="P:ActiproSoftware.Text.ICodeDocument.Properties"><summary>
            Gets the dictionary containing custom properties for this object.
            </summary><value>The dictionary containing custom properties for this object.</value></member><member name="E:ActiproSoftware.Text.ICodeDocument.LanguageChanged"><summary>
            Occurs after the value of the <see cref="P:ActiproSoftware.Text.ICodeDocument.Language" /> property has changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>SyntaxLanguageChangedEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.ICodeDocument.ParseDataChanged"><summary>
            Occurs after the value of the <see cref="P:ActiproSoftware.Text.ICodeDocument.ParseData" /> property has changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>ParseDataPropertyChangedEventArgs</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.Text.ICodeDocumentLifecycleEventSink"><summary>
            Provides the base requirements for an object that can be notified of when an <see cref="T:ActiproSoftware.Text.ICodeDocument" /> becomes
            associated and disassociated with a language, via events such as a language change.
            </summary><remarks>
            Objects implementing this event sink interface can be registered as a service with an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> using the 
            <see cref="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService(System.Object,System.Object)" /> method.
            Any object implementing this interface will be notified automatically when related events occur.
            </remarks></member><member name="M:ActiproSoftware.Text.ICodeDocumentLifecycleEventSink.NotifyDocumentAttached(ActiproSoftware.Text.ICodeDocument)"><summary>
            Occurs when the specified <see cref="T:ActiproSoftware.Text.ICodeDocument" /> is attached to a language.
            </summary><param name="document">The <see cref="T:ActiproSoftware.Text.ICodeDocument" /> that is attached.</param></member><member name="M:ActiproSoftware.Text.ICodeDocumentLifecycleEventSink.NotifyDocumentDetached(ActiproSoftware.Text.ICodeDocument)"><summary>
            Occurs when the specified <see cref="T:ActiproSoftware.Text.ICodeDocument" /> is detached from a language.
            </summary><param name="document">The <see cref="T:ActiproSoftware.Text.ICodeDocument" /> that is detached.</param></member><member name="T:ActiproSoftware.Text.ICodeDocumentPropertyChangeEventSink"><summary>
            Provides the base requirements for an object that can be notified of when an <see cref="T:ActiproSoftware.Text.ICodeDocument" />'s
            properties, such as <see cref="P:ActiproSoftware.Text.ICodeDocument.ParseData" /> or <see cref="P:ActiproSoftware.Text.ITextDocument.FileName" />, are changed.
            </summary><remarks>
            Objects implementing this event sink interface can be registered as a service with an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> using the 
            <see cref="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService(System.Object,System.Object)" /> method.
            Any object implementing this interface will be notified automatically when related events occur.
            </remarks></member><member name="M:ActiproSoftware.Text.ICodeDocumentPropertyChangeEventSink.NotifyFileNameChanged(ActiproSoftware.Text.ICodeDocument,ActiproSoftware.Text.Utility.StringPropertyChangedEventArgs)"><summary>
            Occurs after the value of the <see cref="P:ActiproSoftware.Text.ITextDocument.FileName" /> property has changed.
            </summary><param name="document">The <see cref="T:ActiproSoftware.Text.ICodeDocument" /> whose <see cref="P:ActiproSoftware.Text.ITextDocument.FileName" /> property is changed.</param><param name="e">The <see cref="T:ActiproSoftware.Text.Utility.StringPropertyChangedEventArgs" /> that contains the event data.</param></member><member name="M:ActiproSoftware.Text.ICodeDocumentPropertyChangeEventSink.NotifyParseDataChanged(ActiproSoftware.Text.ICodeDocument,ActiproSoftware.Text.Parsing.ParseDataPropertyChangedEventArgs)"><summary>
            Occurs after the value of the <see cref="P:ActiproSoftware.Text.ICodeDocument.ParseData" /> property has changed.
            </summary><param name="document">The <see cref="T:ActiproSoftware.Text.ICodeDocument" /> whose <see cref="P:ActiproSoftware.Text.ICodeDocument.ParseData" /> property is changed.</param><param name="e">The <see cref="T:ActiproSoftware.Text.Parsing.ParseDataPropertyChangedEventArgs" /> that contains the event data.</param></member><member name="T:ActiproSoftware.Text.IExampleTextProvider"><summary>
            Provides the base requirements for an object that returns example text,
            which can be displayed in an application to show how a language's code snippet is syntax-highlighted.
            </summary><remarks>
            This interface type can be registered with an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> using the 
            <see cref="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService(System.Object,System.Object)" /> method.
            Once an object that implements this interface is registered with the language for this interface type, its features can be used by the language.
            </remarks><seealso cref="T:ActiproSoftware.Text.Implementation.ExampleTextProvider" /></member><member name="P:ActiproSoftware.Text.IExampleTextProvider.ExampleText"><summary>
            Gets the example text, a code snippet of the related language.
            </summary><value>The example text.</value></member><member name="T:ActiproSoftware.Text.IIdProvider"><summary>
            Provides the base requirements for a class that provides ID's.
            </summary></member><member name="M:ActiproSoftware.Text.IIdProvider.ContainsId(System.Int32)"><summary>
            Returns whether the specified ID value is valid for this ID provider.
            </summary><param name="id">The ID to examine.</param><returns><c>true</c> if the ID value is valid; otherwise, <c>false</c></returns></member><member name="M:ActiproSoftware.Text.IIdProvider.GetDescription(System.Int32)"><summary>
            Returns the actual string representation for the specified ID.
            </summary><param name="id">The ID to examine.</param><returns>The actual string representation for the specified ID.</returns></member><member name="M:ActiproSoftware.Text.IIdProvider.GetKey(System.Int32)"><summary>
            Returns the string-based key for the specified ID.
            </summary><param name="id">The ID to examine.</param><returns>The string-based key for the specified ID.</returns></member><member name="P:ActiproSoftware.Text.IIdProvider.MaxId"><summary>
            Gets the maximum ID returned by this provider.
            </summary><value>The maximum ID returned by this provider.</value></member><member name="P:ActiproSoftware.Text.IIdProvider.MinId"><summary>
            Gets the minimum ID returned by this provider.
            </summary><value>The minimum ID returned by this provider.</value></member><member name="T:ActiproSoftware.Text.IIndexedTextRangeProviderCollection"><summary>
            Provides the base requirements for a collection of <see cref="T:ActiproSoftware.Text.ITextRangeProvider" /> objects.
            </summary></member><member name="M:ActiproSoftware.Text.IIndexedTextRangeProviderCollection.GetCount"><summary>
            Returns the number of <see cref="T:ActiproSoftware.Text.ITextRangeProvider" /> objects in the collection.
            </summary><returns>The number of <see cref="T:ActiproSoftware.Text.ITextRangeProvider" /> objects in the collection.</returns></member><member name="M:ActiproSoftware.Text.IIndexedTextRangeProviderCollection.GetItem(System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.Text.ITextRangeProvider" /> at the specified index.
            </summary><param name="index">The index of the <see cref="T:ActiproSoftware.Text.ITextRangeProvider" /> to return.</param><returns>The <see cref="T:ActiproSoftware.Text.ITextRangeProvider" /> at the specified index.</returns></member><member name="T:ActiproSoftware.Text.ILineCommenter"><summary>
            Provides the base requirements for an object that can comment and uncomment lines for a particular language.
            </summary><remarks>
            This interface type can be registered with an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> using the 
            <see cref="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService(System.Object,System.Object)" /> method.
            Once an object that implements this interface is registered with the language for this interface type, its features can be used by the language.
            </remarks><seealso cref="T:ActiproSoftware.Text.Implementation.LineBasedLineCommenter" /><seealso cref="T:ActiproSoftware.Text.Implementation.RangeLineCommenter" /></member><member name="M:ActiproSoftware.Text.ILineCommenter.Comment(ActiproSoftware.Text.ITextSnapshot,ActiproSoftware.Text.ITextPositionRangeCollection,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Comments out the lines of code in the specified position ranges.
            </summary><param name="snapshot">The target <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.</param><param name="positionRanges">The <see cref="T:ActiproSoftware.Text.ITextPositionRangeCollection" /> indicating the position ranges over which to comment lines.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param></member><member name="M:ActiproSoftware.Text.ILineCommenter.Uncomment(ActiproSoftware.Text.ITextSnapshot,ActiproSoftware.Text.ITextPositionRangeCollection,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Uncomments the lines of code in the specified position ranges.
            </summary><param name="snapshot">The target <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.</param><param name="positionRanges">The <see cref="T:ActiproSoftware.Text.ITextPositionRangeCollection" /> indicating the position ranges over which to uncomment lines.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param></member><member name="T:ActiproSoftware.Text.TextSnapshotReaderOptions"><summary>
            Represents options that are applied to an <see cref="T:ActiproSoftware.Text.ITextSnapshotReader" />.
            </summary></member><member name="P:ActiproSoftware.Text.TextSnapshotReaderOptions.DefaultTokenLoadBufferLength"><summary>
            Gets or sets the default number of characters for which to load tokens when retrieving tokens for consumption by the reader.
            </summary><value>
            The number of characters for which to load tokens.
            The default value is <c>700</c>.
            </value><remarks>
            This property governs each load of tokens following the first load.
            </remarks><seealso cref="P:ActiproSoftware.Text.TextSnapshotReaderOptions.InitialTokenLoadBufferLength" /></member><member name="P:ActiproSoftware.Text.TextSnapshotReaderOptions.InitialTokenLoadBufferLength"><summary>
            Gets or sets the initial number of characters for which to load tokens when retrieving tokens for consumption by the reader.
            </summary><value>
            The number of characters for which to load tokens.
            The default value is <c>100</c>.
            </value><remarks>
            This property only governs the first load of tokens.
            </remarks><seealso cref="P:ActiproSoftware.Text.TextSnapshotReaderOptions.DefaultTokenLoadBufferLength" /></member><member name="P:ActiproSoftware.Text.TextSnapshotReaderOptions.PrimaryScanDirection"><summary>
            Gets or sets the primary direction in which text scanning will take place with the reader.
            </summary><value>
            The primary direction in which text scanning will take place with the reader.
            The default value is <see langword="null" />.
            </value><remarks>
            A value of <see langword="null" /> means indeterminate.
            This property is simply used for optimization of the initial token load and in no way restricts which
            way you are permitted to scan with the reader.
            </remarks></member><member name="T:ActiproSoftware.Text.ISyntaxLanguage"><summary>
            Provides the base requirements for a syntax language that provides parsing and other functionality for a text document via registered services.
            </summary><seealso cref="T:ActiproSoftware.Text.Implementation.SyntaxLanguage" /></member><member name="T:ActiproSoftware.Text.ITextBufferReader"><summary>
            Provides the base requirements for an object that reads characters from a fixed text buffer.
            </summary><seealso cref="T:ActiproSoftware.Text.Implementation.StringTextBufferReader" /></member><member name="M:ActiproSoftware.Text.ITextBufferReader.AsTextReader"><summary>
            Returns a <see cref="T:System.IO.TextReader" /> wrapper for this reader.
            </summary><returns>A <see cref="T:System.IO.TextReader" /> wrapper for this reader.</returns></member><member name="M:ActiproSoftware.Text.ITextBufferReader.GetSubstring(System.Int32,System.Int32)"><summary>
            Returns a substring from the text buffer using <see cref="F:ActiproSoftware.Text.LineTerminator.Newline" /> for line ends.
            </summary><param name="offset">The offset at which to retrieve the text.</param><param name="length">The number of characters to return.</param><returns>The substring from the text buffer using <see cref="F:ActiproSoftware.Text.LineTerminator.Newline" /> for line ends.</returns></member><member name="M:ActiproSoftware.Text.ITextBufferReader.Peek"><summary>
            Peeks at a single character from the text buffer without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.Text.ITextBufferReader.Peek(System.Int32)"><summary>
            Peeks at a certain character from the text buffer after the current <see cref="P:ActiproSoftware.Text.ITextBufferReader.Offset" /> without seeking past it.
            </summary><param name="count">The number of characters away from the current <see cref="P:ActiproSoftware.Text.ITextBufferReader.Offset" /> at which to peek.</param><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.Text.ITextBufferReader.PeekReverse"><summary>
            Reverse peeks at a single character from the text buffer without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.Text.ITextBufferReader.Pop"><summary>
            Pops the top offset from the stack and moves the <see cref="P:ActiproSoftware.Text.ITextBufferReader.Offset" /> to that offset.
            </summary><returns><c>true</c> if a pop occurred; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.ITextBufferReader.PopAll"><summary>
            Pops the all offsets from the stack and moves the <see cref="P:ActiproSoftware.Text.ITextBufferReader.Offset" /> to the offset that was on the bottom of the stack.
            </summary><returns><c>true</c> if a pop occurred; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.ITextBufferReader.Push"><summary>
            Pushes the <see cref="P:ActiproSoftware.Text.ITextBufferReader.Offset" /> onto the stack for later restoration.
            </summary></member><member name="M:ActiproSoftware.Text.ITextBufferReader.Read"><summary>
            Reads a single character from the text buffer and seeks forward one offset.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.Text.ITextBufferReader.ReadReverse"><summary>
            Reverse reads a single character from the text buffer and seeks backward one offset.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.Text.ITextBufferReader.ReadReverseThrough(System.Char)"><summary>
            Reverse reads characters from the text buffer until the specified character is read through.
            </summary><param name="ch">The desired character.</param><returns><c>true</c> if the desired character was read; otherwise, <c>false</c> if the start of the text buffer was reached.
            </returns></member><member name="M:ActiproSoftware.Text.ITextBufferReader.ReadReverseThrough(System.Char,System.Int32)"><summary>
            Reverse reads characters from the text buffer until the specified character is read through, or the specified offset is reached.
            </summary><param name="ch">The desired character.</param><param name="minOffset">The minimum offset to check.</param><returns><c>true</c> if the desired character was read; otherwise, <c>false</c> if the specified offset was reached.
            </returns></member><member name="M:ActiproSoftware.Text.ITextBufferReader.ReadThrough(System.Char)"><summary>
            Reads characters from the text buffer until the specified character is read through.
            </summary><param name="ch">The desired character.</param><returns><c>true</c> if the desired character was read; otherwise, <c>false</c> if the end of the text buffer was reached.
            </returns></member><member name="M:ActiproSoftware.Text.ITextBufferReader.ReadThrough(System.Char,System.Int32)"><summary>
            Reads characters from the text buffer until the specified character is read through, or the specified offset is reached.
            </summary><param name="ch">The desired character.</param><param name="maxOffset">The maximum offset to check.</param><returns><c>true</c> if the desired character was read; otherwise, <c>false</c> if the specified offset was reached.
            </returns></member><member name="P:ActiproSoftware.Text.ITextBufferReader.HasStackEntries"><summary>
            Gets whether there are entries on the stack.
            </summary><value><c>true</c> if there are entries on the stack; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextBufferReader.IsAtEnd"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.Text.ITextBufferReader.Offset" /> is at the end of the text buffer.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.Text.ITextBufferReader.Offset" /> is at the end of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextBufferReader.IsAtStart"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.Text.ITextBufferReader.Offset" /> is at the start of the text buffer.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.Text.ITextBufferReader.Offset" /> is at the start of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextBufferReader.IsWhitespaceOnlyAfterOnLine"><summary>
            Gets whether only whitespace characters appear at and after the <see cref="P:ActiproSoftware.Text.ITextBufferReader.Offset" /> on the current line.
            </summary><value><c>true</c> if only whitespace characters appear at and after the <see cref="P:ActiproSoftware.Text.ITextBufferReader.Offset" /> on the current line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextBufferReader.IsWhitespaceOnlyBeforeOnLine"><summary>
            Gets whether only whitespace characters appear before the <see cref="P:ActiproSoftware.Text.ITextBufferReader.Offset" /> on the current line.
            </summary><value><c>true</c> if only whitespace characters appear before the <see cref="P:ActiproSoftware.Text.ITextBufferReader.Offset" /> on the current line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextBufferReader.Length"><summary>
            Gets the number of characters in the text buffer.
            </summary><value>The number of characters in the text buffer.</value></member><member name="P:ActiproSoftware.Text.ITextBufferReader.Offset"><summary>
            Gets or sets the current reader offset in the text buffer.
            </summary><value>The current reader offset in the text buffer.</value><remarks>
            For performance reasons there is no bounds check on the setter.
            </remarks></member><member name="P:ActiproSoftware.Text.ITextBufferReader.OffsetDelta"><summary>
            Gets the amount by which to alter the offset values that are parsed.
            </summary><value>The amount by which to alter the offset values that are parsed.</value></member><member name="P:ActiproSoftware.Text.ITextBufferReader.Position"><summary>
            Gets the current reader <see cref="T:ActiproSoftware.Text.TextPosition" /> in the text buffer.
            </summary><value>The current reader <see cref="T:ActiproSoftware.Text.TextPosition" /> in the text buffer.</value></member><member name="P:ActiproSoftware.Text.ITextBufferReader.PositionDelta"><summary>
            Gets the amount by which to alter the <see cref="P:ActiproSoftware.Text.ITextBufferReader.Position" /> values that are parsed.
            </summary><value>The amount by which to alter the <see cref="P:ActiproSoftware.Text.ITextBufferReader.Position" /> values that are parsed.</value><remarks>
            The <c>Character</c> portion only affects character offset of the line after the <c>Line</c> count.
            </remarks></member><member name="T:ActiproSoftware.Text.ITextChange"><summary>
            Provides the base requirements for a text change, which contains one or more <see cref="T:ActiproSoftware.Text.ITextChangeOperation" /> objects.
            </summary></member><member name="M:ActiproSoftware.Text.ITextChange.AppendText(System.String)"><summary>
            Adds an <see cref="T:ActiproSoftware.Text.ITextChangeOperation" /> that appends text to the end of the <see cref="P:ActiproSoftware.Text.ITextChange.Snapshot" />.
            </summary><param name="text">The text to append to the end of the <see cref="P:ActiproSoftware.Text.ITextChange.Snapshot" />.</param><remarks>
            This method is simply a wrapper for a call to <see cref="M:ActiproSoftware.Text.ITextChange.InsertText(System.Int32,System.String)" />.
            </remarks><seealso cref="M:ActiproSoftware.Text.ITextChange.DeleteText(System.Int32,System.Int32)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.InsertText(System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.ReplaceText(System.Int32,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.SetText(System.String)" /></member><member name="M:ActiproSoftware.Text.ITextChange.Apply"><summary>
            Applies the text change and all of its <see cref="P:ActiproSoftware.Text.ITextChange.Operations" /> in sequential order.
            </summary><returns><c>true</c> if all the operations were applied successfully; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.ITextChange.Apply(System.Collections.Generic.IList{ActiproSoftware.Text.TextRange},System.Int32,System.Nullable{ActiproSoftware.Text.TextRangeTrackingModes})"><summary>
            Applies the text change and all of its <see cref="P:ActiproSoftware.Text.ITextChange.Operations" /> in sequential order, also designating the text ranges 
            that should be converted and set to the <see cref="P:ActiproSoftware.Text.ITextChange.PostSelectionPositionRanges" /> property after the text change is applied.
            </summary><param name="pendingSelectionTextRanges">The collection of text ranges that should be converted following the text change.</param><param name="primaryIndex">The index of the primary selection range.</param><param name="translationTrackingModes">
            When the text range offsets are relative to the previous snapshot and need to be translated to the new snapshot,
            this parameter should be set to a non-null <c>TextRangeTrackingModes</c> value indicating the translation tracking modes to use.
            A null value indicates no translation is necessary since the text range offsets are relative to the new snapshot.
            </param><returns><c>true</c> if all the operations were applied successfully; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.ITextChange.Apply(ActiproSoftware.Text.ITextPositionRangeCollection,ActiproSoftware.Text.TextRangeTrackingModes)"><summary>
            Applies the text change and all of its <see cref="P:ActiproSoftware.Text.ITextChange.Operations" /> in sequential order, also designating the position ranges 
            that should be translated and set to the <see cref="P:ActiproSoftware.Text.ITextChange.PostSelectionPositionRanges" /> property after the text change is applied.
            </summary><param name="pendingSelectionPositionRanges">The collection of position ranges that should be converted following the text change.</param><param name="translationTrackingModes">A <c>TextRangeTrackingModes</c> value indicating the translation tracking modes to use.</param><returns><c>true</c> if all the operations were applied successfully; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.ITextChange.DeleteText(ActiproSoftware.Text.TextRange)"><summary>
            Adds an <see cref="T:ActiproSoftware.Text.ITextChangeOperation" /> that deletes text in the <see cref="P:ActiproSoftware.Text.ITextChange.Snapshot" />.
            </summary><param name="textRange">The <see cref="T:ActiproSoftware.Text.TextRange" /> of offsets to delete.</param><seealso cref="M:ActiproSoftware.Text.ITextChange.AppendText(System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.InsertText(System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.ReplaceText(ActiproSoftware.Text.TextRange,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.SetText(System.String)" /></member><member name="M:ActiproSoftware.Text.ITextChange.DeleteText(System.Int32,System.Int32)"><summary>
            Adds an <see cref="T:ActiproSoftware.Text.ITextChangeOperation" /> that deletes text in the <see cref="P:ActiproSoftware.Text.ITextChange.Snapshot" />.
            </summary><param name="offset">The starting offset at which to delete.</param><param name="deleteLength">The number of characters to delete.</param><seealso cref="M:ActiproSoftware.Text.ITextChange.AppendText(System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.InsertText(System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.ReplaceText(System.Int32,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.SetText(System.String)" /></member><member name="M:ActiproSoftware.Text.ITextChange.InsertText(System.Int32,System.String)"><summary>
            Adds an <see cref="T:ActiproSoftware.Text.ITextChangeOperation" /> that inserts text in the <see cref="P:ActiproSoftware.Text.ITextChange.Snapshot" />.
            </summary><param name="offset">The offset at which to insert.</param><param name="text">The text to insert.</param><seealso cref="M:ActiproSoftware.Text.ITextChange.AppendText(System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.DeleteText(System.Int32,System.Int32)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.ReplaceText(System.Int32,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.SetText(System.String)" /></member><member name="M:ActiproSoftware.Text.ITextChange.ReplaceText(ActiproSoftware.Text.TextRange,System.String)"><summary>
            Adds an <see cref="T:ActiproSoftware.Text.ITextChangeOperation" /> that replaces text in the <see cref="P:ActiproSoftware.Text.ITextChange.Snapshot" />.
            </summary><param name="textRange">The <see cref="T:ActiproSoftware.Text.TextRange" /> of offsets to delete.</param><param name="insertText">The text to insert.</param><seealso cref="M:ActiproSoftware.Text.ITextChange.AppendText(System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.DeleteText(ActiproSoftware.Text.TextRange)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.InsertText(System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.SetText(System.String)" /></member><member name="M:ActiproSoftware.Text.ITextChange.ReplaceText(System.Int32,System.Int32,System.String)"><summary>
            Adds an <see cref="T:ActiproSoftware.Text.ITextChangeOperation" /> that replaces text in the <see cref="P:ActiproSoftware.Text.ITextChange.Snapshot" />.
            </summary><param name="offset">The offset at which to insert.</param><param name="deleteLength">The number of characters to delete before inserting the text.</param><param name="insertText">The text to insert.</param><seealso cref="M:ActiproSoftware.Text.ITextChange.AppendText(System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.DeleteText(System.Int32,System.Int32)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.InsertText(System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.SetText(System.String)" /></member><member name="M:ActiproSoftware.Text.ITextChange.SetText(System.String)"><summary>
            Adds an <see cref="T:ActiproSoftware.Text.ITextChangeOperation" /> that replaces all the text in the <see cref="P:ActiproSoftware.Text.ITextChange.Snapshot" /> and marks the operation as a programmatic replacement.
            </summary><param name="text">The text to insert.  Pass an empty string to "clear" the document.</param><remarks>
            A programmatic text replacement means that the undo history will be cleared, and any attached editors will reset the caret to offset <c>0</c>.
            </remarks><seealso cref="M:ActiproSoftware.Text.ITextChange.AppendText(System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.DeleteText(System.Int32,System.Int32)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.InsertText(System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.ReplaceText(System.Int32,System.Int32,System.String)" /></member><member name="M:ActiproSoftware.Text.ITextChange.SetText(System.String,System.Boolean)"><summary>
            Adds an <see cref="T:ActiproSoftware.Text.ITextChangeOperation" /> that replaces all the text in the <see cref="P:ActiproSoftware.Text.ITextChange.Snapshot" /> and optionally marks the operation as a programmatic replacement.
            </summary><param name="text">The text to insert.  Pass an empty string to "clear" the document.</param><param name="isProgrammatic">Whether the operation is considered a programmatic replacement.</param><remarks>
            A programmatic text replacement means that the undo history will be cleared, and any attached editors will reset the caret to offset <c>0</c>.
            </remarks><seealso cref="M:ActiproSoftware.Text.ITextChange.AppendText(System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.DeleteText(System.Int32,System.Int32)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.InsertText(System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextChange.ReplaceText(System.Int32,System.Int32,System.String)" /></member><member name="P:ActiproSoftware.Text.ITextChange.CanMergeIntoPreviousChange"><summary>
            Gets whether this text change can merge into the previous text change in the undo stack.
            </summary><value><c>true</c> if this text change can merge into the previous text change in the undo stack; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextChange.CheckReadOnly"><summary>
            Gets whether to prevent the text change from occurring if any text range to modify is flagged as read-only.
            </summary><value><c>true</c> if the read-only state should be checked; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextChange.CustomData"><summary>
            Gets or sets custom data that can be persisted with the text change and restored when undo operations occur later on.
            </summary><value>The custom data.</value></member><member name="P:ActiproSoftware.Text.ITextChange.IsMerged"><summary>
            Gets whether this text change is the result of a merge of two or more text changes.
            </summary><value><c>true</c> if this text change is the result of a merge of two or more text changes; otherwise, <c>false</c>.
            </value><remarks>
            A merge can occur when a text change is created with <see cref="P:ActiproSoftware.Text.ITextChangeOptions.CanMergeIntoPreviousChange" />.
            </remarks></member><member name="P:ActiproSoftware.Text.ITextChange.IsRedo"><summary>
            Gets whether the text change is for a redo.
            </summary><value><c>true</c> if the text change is for a redo; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextChange.IsUndo"><summary>
            Gets whether the text change is for an undo.
            </summary><value><c>true</c> if the text change is for an undo; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextChange.LastTextReplacementOperationIndex"><summary>
            Gets the index of the last operation within the text change in which the entire document text was replaced, if any.
            </summary><value>The index of the last text replacement operation within the text change; otherwise, <c>-1</c> if there are no such operations.</value></member><member name="P:ActiproSoftware.Text.ITextChange.Operations"><summary>
            Gets the read-only list of <see cref="T:ActiproSoftware.Text.ITextChangeOperation" /> objects that make up this text change.
            </summary><value>The read-only list of <see cref="T:ActiproSoftware.Text.ITextChangeOperation" /> objects that make up this text change.</value></member><member name="P:ActiproSoftware.Text.ITextChange.PostSelectionPositionRanges"><summary>
            Gets or sets the collection of sorted non-overlapping <see cref="T:ActiproSoftware.Text.TextPositionRange" /> objects that should be selected in the source view after the text change is applied.
            </summary><value>The collection of sorted non-overlapping <see cref="T:ActiproSoftware.Text.TextPositionRange" /> objects that should be selected in the source view after the text change is applied.</value></member><member name="P:ActiproSoftware.Text.ITextChange.PreSelectionPositionRanges"><summary>
            Gets or sets the collection of sorted non-overlapping <see cref="T:ActiproSoftware.Text.TextPositionRange" /> objects that were selected in the source view before the text change is applied.
            </summary><value>The collection of sorted non-overlapping <see cref="T:ActiproSoftware.Text.TextPositionRange" /> objects that were selected in the source view before the text change is applied.</value></member><member name="P:ActiproSoftware.Text.ITextChange.RetainSelection"><summary>
            Gets whether to prevent the caret from moving to the end of the text change in the active view.
            </summary><value><c>true</c> if the caret move should be prevented; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextChange.Snapshot"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> against which all operations in this text change should be based.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> against which all operations in this text change should be based.</value></member><member name="P:ActiproSoftware.Text.ITextChange.Source"><summary>
            Gets the optional source of the text change, which is most often an editor view if specified.
            </summary><value>The optional source of the text change, which is most often an editor view if specified.</value></member><member name="P:ActiproSoftware.Text.ITextChange.Type"><summary>
            Gets an <see cref="T:ActiproSoftware.Text.ITextChangeType" /> indicating the type of change that was made.
            </summary><value>An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> indicating the type of change that was made.</value></member><member name="T:ActiproSoftware.Text.ITextChangeOperation"><summary>
            Provides the base requirements for a single replace operations within a text change.
            </summary><remarks>
            All text change operations are represented in terms of a replace operation.
            The <see cref="P:ActiproSoftware.Text.ITextChangeRangedOperation.StartOffset" /> and <see cref="P:ActiproSoftware.Text.ITextChangeRangedOperation.StartPosition" /> properties both indicate where the operations occurred.
            For delete operations, the <see cref="P:ActiproSoftware.Text.ITextChangeRangedOperation.InsertionLength" /> is <c>0</c>.
            For insert operations that have no selection of text to be replaced, the <see cref="P:ActiproSoftware.Text.ITextChangeRangedOperation.DeletionLength" /> is <c>0</c>.
            </remarks></member><member name="P:ActiproSoftware.Text.ITextChangeOperation.DeletedText"><summary>
            Gets the text that was deleted by the operation.
            </summary><value>The text that was deleted by the operation.</value></member><member name="P:ActiproSoftware.Text.ITextChangeOperation.InsertedText"><summary>
            Gets the text that was inserted by the operation.
            </summary><value>The text that was inserted by the operation.</value></member><member name="P:ActiproSoftware.Text.ITextChangeOperation.IsProgrammaticTextReplacement"><summary>
            Gets whether the operation completely replaces the document's text, and is only caused by using the <see cref="M:ActiproSoftware.Text.ITextDocument.SetText(System.String)" /> method.
            </summary><value><c>true</c> if the operation completely replaces the document's text, and is only caused by using the <see cref="M:ActiproSoftware.Text.ITextDocument.SetText(System.String)" /> method; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextChangeOperation.IsTextReplacement"><summary>
            Gets whether the operation completely replaces the document's text.
            </summary><value><c>true</c> if the operation completely replaces the document's text; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.Text.ITextChangeRangedOperation"><summary>
            Provides the base requirements for a single replace operations within a text change, but without storing the actual text inserted/deleted.
            </summary><remarks>
            All text change operations are represented in terms of a replace operation.
            The <see cref="P:ActiproSoftware.Text.ITextChangeRangedOperation.StartOffset" /> and <see cref="P:ActiproSoftware.Text.ITextChangeRangedOperation.StartPosition" /> properties both indicate where the operations occurred.
            For delete operations, the <see cref="P:ActiproSoftware.Text.ITextChangeRangedOperation.InsertionLength" /> is <c>0</c>.
            For insert operations that have no selection of text to be replaced, the <see cref="P:ActiproSoftware.Text.ITextChangeRangedOperation.DeletionLength" /> is <c>0</c>.
            </remarks></member><member name="P:ActiproSoftware.Text.ITextChangeRangedOperation.DeletionEndOffset"><summary>
            Gets the offset at which the deletion ended.
            </summary><value>The offset at which the deletion ended.</value></member><member name="P:ActiproSoftware.Text.ITextChangeRangedOperation.DeletionEndPosition"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.TextPosition" /> at which the deletion ended.
            </summary><value>The <see cref="T:ActiproSoftware.Text.TextPosition" /> at which the deletion ended.</value></member><member name="P:ActiproSoftware.Text.ITextChangeRangedOperation.DeletionLength"><summary>
            Gets the number of characters that were deleted.
            </summary><value>The number of characters that were deleted.</value></member><member name="P:ActiproSoftware.Text.ITextChangeRangedOperation.HasDeletion"><summary>
            Gets whether the operation deleted any text.
            </summary><value><c>true</c> if any text was deleted; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextChangeRangedOperation.HasInsertion"><summary>
            Gets whether the operation inserted any text.
            </summary><value><c>true</c> if any text was inserted; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextChangeRangedOperation.InsertionEndOffset"><summary>
            Gets the offset at which the insertion ended.
            </summary><value>The offset at which the insertion ended.</value></member><member name="P:ActiproSoftware.Text.ITextChangeRangedOperation.InsertionEndPosition"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.TextPosition" /> at which the insertion ended.
            </summary><value>The <see cref="T:ActiproSoftware.Text.TextPosition" /> at which the insertion ended.</value></member><member name="P:ActiproSoftware.Text.ITextChangeRangedOperation.InsertionLength"><summary>
            Gets the number of characters that were inserted.
            </summary><value>The number of characters that were inserted.</value></member><member name="P:ActiproSoftware.Text.ITextChangeRangedOperation.IsIgnoredForTranslation"><summary>
            Gets whether the operation is a simple replace such as a character casing update that should be ignored for translation.
            </summary><value><c>true</c> if the operation is a simple replace such as a character casing update that should be ignored for translation; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextChangeRangedOperation.LengthDelta"><summary>
            Gets the net change in length to the document after performing the operation.
            </summary><value>The net change in length to the document after performing the operation.</value><remarks>
            This value is the <see cref="P:ActiproSoftware.Text.ITextChangeRangedOperation.InsertionLength" /> minus the <see cref="P:ActiproSoftware.Text.ITextChangeRangedOperation.DeletionLength" />.
            </remarks></member><member name="P:ActiproSoftware.Text.ITextChangeRangedOperation.LinesDeleted"><summary>
            Gets the number of document lines deleted after performing the operation.
            </summary><value>The number of document lines deleted after performing the operation.</value></member><member name="P:ActiproSoftware.Text.ITextChangeRangedOperation.LinesDelta"><summary>
            Gets the net change in document lines after performing the operation.
            </summary><value>The net change in document lines after performing the operation.</value><remarks>
            This value is the <see cref="P:ActiproSoftware.Text.ITextChangeRangedOperation.LinesInserted" /> value minus the <see cref="P:ActiproSoftware.Text.ITextChangeRangedOperation.LinesDeleted" /> value.
            </remarks></member><member name="P:ActiproSoftware.Text.ITextChangeRangedOperation.LinesInserted"><summary>
            Gets the number of lines inserted after performing the operation.
            </summary><value>The number of lines inserted after performing the operation.</value></member><member name="P:ActiproSoftware.Text.ITextChangeRangedOperation.StartOffset"><summary>
            Gets the offset at which the operation occurred.
            </summary><value>The offset at which the operation occurred.</value></member><member name="P:ActiproSoftware.Text.ITextChangeRangedOperation.StartPosition"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.TextPosition" /> at which the operation occurred.
            </summary><value>The <see cref="T:ActiproSoftware.Text.TextPosition" /> at which the operation occurred.</value></member><member name="T:ActiproSoftware.Text.ITextChangeOptions"><summary>
            Provides the base requirements for options that are applied to an <see cref="T:ActiproSoftware.Text.ITextChange" />.
            </summary><see cref="T:ActiproSoftware.Text.Implementation.TextChangeOptions" /></member><member name="P:ActiproSoftware.Text.ITextChangeOptions.CanMergeIntoPreviousChange"><summary>
            Gets or sets whether this text change can merge into the previous text change in the undo stack, assuming one is available.
            </summary><value><c>true</c> if this text change can merge into the previous text change in the undo stack; otherwise, <c>false</c>.
            </value><remarks>
            When <c>true</c>, if an undo occurs after this text change, this text change's operations along with those of the previous text change would occur
            as a single undoable text change.
            </remarks></member><member name="P:ActiproSoftware.Text.ITextChangeOptions.CustomData"><summary>
            Gets or sets custom data that can be persisted with the text change and restored when undo operations occur later on.
            </summary><value>The custom data.</value><remarks>
            This custom data is only persisted for the root text change of a set of operations.
            </remarks></member><member name="P:ActiproSoftware.Text.ITextChangeOptions.CheckReadOnly"><summary>
            Gets or sets whether to prevent the text change from occurring if the text range to modify is flagged as read-only.
            </summary><value><c>true</c> if the read-only state should be checked; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextChangeOptions.OffsetDelta"><summary>
            Gets or sets how an <see cref="T:ActiproSoftware.Text.ITextChange" />'s <see cref="T:ActiproSoftware.Text.ITextChangeOperation" /> offsets are modified based on previously-added operations.
            </summary><value>A <see cref="T:ActiproSoftware.Text.TextChangeOffsetDelta" /> value indicating how to apply offset deltas, if at all.</value></member><member name="P:ActiproSoftware.Text.ITextChangeOptions.RetainSelection"><summary>
            Gets or sets whether to prevent the caret from moving to the end of the text change in the active view.
            </summary><value><c>true</c> if the caret move should be prevented; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextChangeOptions.Source"><summary>
            Gets or sets the optional source of the text change, which is most often an editor view if specified.
            </summary><value>The optional source of the text change, which is most often an editor view if specified.</value></member><member name="T:ActiproSoftware.Text.ITextChangeType"><summary>
            Provides the base requirements for an object that indicates the type of change made by an <see cref="T:ActiproSoftware.Text.ITextChange" />.
            </summary></member><member name="P:ActiproSoftware.Text.ITextChangeType.Description"><summary>
            Gets the description of the change type, which is displayed in the user interface in undo lists.
            </summary><value>The description of the change type, which is displayed in the user interface in undo lists.</value></member><member name="T:ActiproSoftware.Text.ITextDocument"><summary>
            Provides the base requirements for a text document that provides access to the <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> 
            (via <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" />) that contains the current text of the document, and allows for text modification.
            </summary></member><member name="M:ActiproSoftware.Text.ITextDocument.AddTextChangedEventHandler(System.EventHandler{ActiproSoftware.Text.TextSnapshotChangedEventArgs},ActiproSoftware.Text.Utility.EventHandlerPriority)"><summary>
            Adds an event handler for the <see cref="E:ActiproSoftware.Text.ITextDocument.TextChanged" /> event using the specified priority level.
            </summary><param name="handler">The delegate handler.</param><param name="priority">A <see cref="T:ActiproSoftware.Text.Utility.EventHandlerPriority" /> specifying the priority level.</param></member><member name="M:ActiproSoftware.Text.ITextDocument.AddTextChangingEventHandler(System.EventHandler{ActiproSoftware.Text.TextSnapshotChangingEventArgs},ActiproSoftware.Text.Utility.EventHandlerPriority)"><summary>
            Adds an event handler for the <see cref="E:ActiproSoftware.Text.ITextDocument.TextChanging" /> event using the specified priority level.
            </summary><param name="handler">The delegate handler.</param><param name="priority">A <see cref="T:ActiproSoftware.Text.Utility.EventHandlerPriority" /> specifying the priority level.</param></member><member name="M:ActiproSoftware.Text.ITextDocument.AppendText(ActiproSoftware.Text.ITextChangeType,System.String)"><summary>
            Appends text to the end of the <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" /> text.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="text">The text to append to the current contents of the snapshot.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds an append operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.ITextDocument.CreateTextChange(ActiproSoftware.Text.ITextChangeType)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.ITextDocument.DeleteText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.ReplaceText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.SetText(ActiproSoftware.Text.ITextChangeType,System.String)" /></member><member name="M:ActiproSoftware.Text.ITextDocument.AppendText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Appends text to the end of the <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" /> text and allows for the specification of other options.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="text">The text to append to the current contents of the snapshot.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds an append operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.ITextDocument.CreateTextChange(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.ITextChangeOptions)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.ITextDocument.DeleteText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.ReplaceText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.SetText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /></member><member name="M:ActiproSoftware.Text.ITextDocument.CreateTextChange(ActiproSoftware.Text.ITextChangeType)"><summary>
            Creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> based on the <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" />, whereby any following calls to methods such as 
            <see cref="T:ActiproSoftware.Text.ITextChange" />.<see cref="M:ActiproSoftware.Text.ITextChange.ReplaceText(System.Int32,System.Int32,System.String)" /> are grouped into the text change as operations and 
            sequentially executed upon a <see cref="T:ActiproSoftware.Text.ITextChange" />.<see cref="M:ActiproSoftware.Text.ITextChange.Apply" /> call.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><returns>The <see cref="T:ActiproSoftware.Text.ITextChange" /> that was created.</returns><remarks>
            The <see cref="T:ActiproSoftware.Text.ITextChange" />.<see cref="M:ActiproSoftware.Text.ITextChange.Apply" /> method must be called to apply the queued operations to the document.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextDocument.CreateTextChange(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> based on the <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" />, whereby any following calls to methods such as 
            <see cref="T:ActiproSoftware.Text.ITextChange" />.<see cref="M:ActiproSoftware.Text.ITextChange.ReplaceText(System.Int32,System.Int32,System.String)" /> are grouped into the text change as operations and 
            sequentially executed upon a <see cref="T:ActiproSoftware.Text.ITextChange" />.<see cref="M:ActiproSoftware.Text.ITextChange.Apply" /> call.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param><returns>The <see cref="T:ActiproSoftware.Text.ITextChange" /> that was created.</returns><remarks>
            The <see cref="T:ActiproSoftware.Text.ITextChange" />.<see cref="M:ActiproSoftware.Text.ITextChange.Apply" /> method must be called to apply the queued operations to the document.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextDocument.DeleteText(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.TextRange)"><summary>
            Performs a delete text change in the <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" />.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="textRange">The <see cref="T:ActiproSoftware.Text.TextRange" /> of offsets to delete.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a delete operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.ITextDocument.CreateTextChange(ActiproSoftware.Text.ITextChangeType)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.ITextDocument.AppendText(ActiproSoftware.Text.ITextChangeType,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.ReplaceText(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.TextRange,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.SetText(ActiproSoftware.Text.ITextChangeType,System.String)" /></member><member name="M:ActiproSoftware.Text.ITextDocument.DeleteText(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.TextRange,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Performs a delete text change in the <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" /> and allows for the specification of other options.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="textRange">The <see cref="T:ActiproSoftware.Text.TextRange" /> of offsets to delete.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a delete operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.ITextDocument.CreateTextChange(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.ITextChangeOptions)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.ITextDocument.AppendText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.ReplaceText(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.TextRange,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.SetText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /></member><member name="M:ActiproSoftware.Text.ITextDocument.DeleteText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32)"><summary>
            Performs a delete text change in the <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" />.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="offset">The starting offset at which to delete.</param><param name="length">The number of characters to delete.</param><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a delete operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.ITextDocument.CreateTextChange(ActiproSoftware.Text.ITextChangeType)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><seealso cref="M:ActiproSoftware.Text.ITextDocument.AppendText(ActiproSoftware.Text.ITextChangeType,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.ReplaceText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.SetText(ActiproSoftware.Text.ITextChangeType,System.String)" /></member><member name="M:ActiproSoftware.Text.ITextDocument.DeleteText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Performs a delete text change in the <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" /> and allows for the specification of other options.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="offset">The starting offset at which to delete.</param><param name="length">The number of characters to delete.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a delete operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.ITextDocument.CreateTextChange(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.ITextChangeOptions)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><seealso cref="M:ActiproSoftware.Text.ITextDocument.AppendText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.ReplaceText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.SetText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /></member><member name="M:ActiproSoftware.Text.ITextDocument.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String)"><summary>
            Performs an insert text change in the <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" /> at the specified offset.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="offset">The offset at which to insert.</param><param name="text">The text to insert.</param><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds an insert operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.ITextDocument.CreateTextChange(ActiproSoftware.Text.ITextChangeType)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><seealso cref="M:ActiproSoftware.Text.ITextDocument.AppendText(ActiproSoftware.Text.ITextChangeType,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.DeleteText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.ReplaceText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,System.String)" /></member><member name="M:ActiproSoftware.Text.ITextDocument.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Performs an insert text change in the <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" /> at the specified offset and allows for the specification of other options.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="offset">The offset at which to insert.</param><param name="text">The text to insert.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds an insert operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.ITextDocument.CreateTextChange(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.ITextChangeOptions)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><seealso cref="M:ActiproSoftware.Text.ITextDocument.AppendText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.DeleteText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.ReplaceText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.SetText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /></member><member name="M:ActiproSoftware.Text.ITextDocument.LoadFile(System.String)"><summary>
            Loads document text from a file, using the default UTF-8 character encoding.
            </summary><param name="path">The full path of the file from which to load.</param><returns>
            A <see cref="T:ActiproSoftware.Text.LineTerminator" /> indicating the line terminator of the file that was loaded.
            </returns><remarks>
            This method updates the value of the <see cref="P:ActiproSoftware.Text.ITextDocument.FileName" /> property.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextDocument.LoadFile(System.String,System.Text.Encoding)"><summary>
            Loads document text from a file using the specified encoding.
            </summary><param name="path">The full path of the file from which to load.</param><param name="encoding">The <see cref="T:System.Text.Encoding" /> to use when loading the file.</param><returns>
            A <see cref="T:ActiproSoftware.Text.LineTerminator" /> indicating the line terminator of the file that was loaded.
            </returns><remarks>
            This method updates the value of the <see cref="P:ActiproSoftware.Text.ITextDocument.FileName" /> property.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextDocument.LoadFile(System.IO.Stream,System.Text.Encoding)"><summary>
            Loads document text from a <see cref="T:System.IO.Stream" /> using the specified encoding.
            </summary><param name="stream">The <see cref="T:System.IO.Stream" /> from which to load.</param><param name="encoding">The <see cref="T:System.Text.Encoding" /> to use when loading the file.</param><returns>
            A <see cref="T:ActiproSoftware.Text.LineTerminator" /> indicating the line terminator of the file that was loaded.
            </returns></member><member name="M:ActiproSoftware.Text.ITextDocument.IsTextRangeReadOnly(ActiproSoftware.Text.TextRange)"><summary>
            Returns whether any character in the specified <see cref="T:ActiproSoftware.Text.TextRange" /> is flagged as read-only.
            </summary><param name="textRange">The <see cref="T:ActiproSoftware.Text.TextRange" /> to examine.</param><returns><c>true</c> if any character in the specified <see cref="T:ActiproSoftware.Text.TextRange" /> is flagged as read-only; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.ITextDocument.RemoveTextChangedEventHandler(System.EventHandler{ActiproSoftware.Text.TextSnapshotChangedEventArgs},ActiproSoftware.Text.Utility.EventHandlerPriority)"><summary>
            Removes an event handler for the <see cref="E:ActiproSoftware.Text.ITextDocument.TextChanged" /> event using the specified priority level.
            </summary><param name="handler">The delegate handler.</param><param name="priority">A <see cref="T:ActiproSoftware.Text.Utility.EventHandlerPriority" /> specifying the priority level.</param></member><member name="M:ActiproSoftware.Text.ITextDocument.RemoveTextChangingEventHandler(System.EventHandler{ActiproSoftware.Text.TextSnapshotChangingEventArgs},ActiproSoftware.Text.Utility.EventHandlerPriority)"><summary>
            Removes an event handler for the <see cref="E:ActiproSoftware.Text.ITextDocument.TextChanging" /> event using the specified priority level.
            </summary><param name="handler">The delegate handler.</param><param name="priority">A <see cref="T:ActiproSoftware.Text.Utility.EventHandlerPriority" /> specifying the priority level.</param></member><member name="M:ActiproSoftware.Text.ITextDocument.ReplaceAll(ActiproSoftware.Text.Searching.ISearchOptions)"><summary>
            Performs a replace all operation in the <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" />.
            </summary><param name="options">The <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> to use.</param><returns>
            An <see cref="T:ActiproSoftware.Text.Searching.ISearchResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.Text.ITextDocument.ReplaceAll(ActiproSoftware.Text.Searching.ISearchOptions,ActiproSoftware.Text.TextRange[])"><summary>
            Performs a replace all operation in the <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" /> over a specific range of the snapshot.
            </summary><param name="options">The <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> to use.</param><param name="searchTextRanges">
            The <see cref="T:ActiproSoftware.Text.TextRange" /> array of offsets to search.
            If everything should be searched, specify the range <c>0</c> to the length of the document's current snapshot.
            </param><returns>
            An <see cref="T:ActiproSoftware.Text.Searching.ISearchResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.Text.ITextDocument.ReplaceNext(ActiproSoftware.Text.Searching.ISearchOptions,System.Int32,System.Boolean)"><summary>
            Performs a replace next operation in the <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" />.
            </summary><param name="options">The <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> to use.</param><param name="startOffset">The offset at which to start the search.</param><param name="canWrap">Whether the search can wrap at the end of the search text range.</param><returns>
            An <see cref="T:ActiproSoftware.Text.Searching.ISearchResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.Text.ITextDocument.ReplaceNext(ActiproSoftware.Text.Searching.ISearchOptions,System.Int32,System.Boolean,ActiproSoftware.Text.TextRange)"><summary>
            Performs a replace next operation in the <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" /> over a specific range of the snapshot.
            </summary><param name="options">The <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> to use.</param><param name="startOffset">The offset at which to start the search.</param><param name="canWrap">Whether the search can wrap at the end of the search text range.</param><param name="searchTextRange">
            The <see cref="T:ActiproSoftware.Text.TextRange" /> of offsets to search.
            If all should be searched, specify the range <c>0</c> to the length of the <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </param><returns>
            An <see cref="T:ActiproSoftware.Text.Searching.ISearchResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.Text.ITextDocument.ReplaceText(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.TextRange,System.String)"><summary>
            Performs a replace text change in the <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" /> at the specified offset.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="textRange">The <see cref="T:ActiproSoftware.Text.TextRange" /> of offsets to delete.</param><param name="text">The text to insert.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a replace operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.ITextDocument.CreateTextChange(ActiproSoftware.Text.ITextChangeType)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.ITextDocument.AppendText(ActiproSoftware.Text.ITextChangeType,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.DeleteText(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.TextRange)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.SetText(ActiproSoftware.Text.ITextChangeType,System.String)" /></member><member name="M:ActiproSoftware.Text.ITextDocument.ReplaceText(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.TextRange,System.String,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Performs a replace text change in the <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" /> at the specified offset and allows for the specification of other options.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="textRange">The <see cref="T:ActiproSoftware.Text.TextRange" /> of offsets to delete.</param><param name="text">The text to insert.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a replace operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.ITextDocument.CreateTextChange(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.ITextChangeOptions)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.ITextDocument.AppendText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.DeleteText(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.TextRange,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.SetText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /></member><member name="M:ActiproSoftware.Text.ITextDocument.ReplaceText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,System.String)"><summary>
            Performs a replace text change in the <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" /> at the specified offset.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="offset">The offset at which to insert.</param><param name="length">The number of characters to delete before inserting the text.</param><param name="text">The text to insert.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a replace operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.ITextDocument.CreateTextChange(ActiproSoftware.Text.ITextChangeType)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.ITextDocument.AppendText(ActiproSoftware.Text.ITextChangeType,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.DeleteText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.SetText(ActiproSoftware.Text.ITextChangeType,System.String)" /></member><member name="M:ActiproSoftware.Text.ITextDocument.ReplaceText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Performs a replace text change in the <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" /> at the specified offset and allows for the specification of other options.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="offset">The offset at which to insert.</param><param name="length">The number of characters to delete before inserting the text.</param><param name="text">The text to insert.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a replace operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.ITextDocument.CreateTextChange(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.ITextChangeOptions)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.ITextDocument.AppendText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.DeleteText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.SetText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /></member><member name="M:ActiproSoftware.Text.ITextDocument.SaveFile(System.String,ActiproSoftware.Text.LineTerminator)"><summary>
            Saves document text to a UTF-8 encoded file.
            </summary><param name="path">The full path of the file of which to save.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.Text.LineTerminator" /> specifying the output format.</param><remarks>
            The <see cref="P:ActiproSoftware.Text.ITextDocument.IsModified" /> property is set to <c>false</c> if the specified file path is the same as the
            <see cref="P:ActiproSoftware.Text.ITextDocument.FileName" /> property's current value.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextDocument.SaveFile(System.String,System.Text.Encoding,ActiproSoftware.Text.LineTerminator)"><summary>
            Saves document text to a file using the specified encoding.
            </summary><param name="path">The full path of the file of which to save.</param><param name="encoding">The <see cref="T:System.Text.Encoding" /> to use when saving the file.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.Text.LineTerminator" /> specifying the output format.</param><remarks>
            The <see cref="P:ActiproSoftware.Text.ITextDocument.IsModified" /> property is set to <c>false</c> if the specified file path is the same as the
            <see cref="P:ActiproSoftware.Text.ITextDocument.FileName" /> property's current value.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextDocument.SaveFile(System.IO.Stream,System.Text.Encoding,ActiproSoftware.Text.LineTerminator)"><summary>
            Saves document text to a <see cref="T:System.IO.Stream" /> using the specified encoding.
            </summary><param name="stream">The <see cref="T:System.IO.Stream" /> to write to.</param><param name="encoding">The <see cref="T:System.Text.Encoding" /> to use when loading the file.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.Text.LineTerminator" /> specifying the output format.</param></member><member name="M:ActiproSoftware.Text.ITextDocument.SetHeaderAndFooterText(System.String,System.String)"><summary>
            Sets the <see cref="P:ActiproSoftware.Text.ITextSnapshot.HeaderText" /> and <see cref="P:ActiproSoftware.Text.ITextSnapshot.FooterText" />, and creates a new snapshot with the results.
            </summary><param name="headerText">The new header text value.</param><param name="footerText">The new footer text value.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.ITextDocument.SetText(System.String)"><summary>
            Replaces all the text in the <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" /> and marks the operation as a programmatic replacement.
            </summary><param name="text">The text to insert.  Pass an empty string to "clear" the snapshot text.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            A programmatic text replacement means that the undo history will be cleared, and any attached editors will reset the caret to offset <c>0</c>.
            <para>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a set text operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.ITextDocument.CreateTextChange(ActiproSoftware.Text.ITextChangeType)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </para></remarks><seealso cref="M:ActiproSoftware.Text.ITextDocument.SetText(ActiproSoftware.Text.ITextChangeType,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.SetText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /></member><member name="M:ActiproSoftware.Text.ITextDocument.SetText(ActiproSoftware.Text.ITextChangeType,System.String)"><summary>
            Replaces all the text in the <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" />.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="text">The text to insert.  Pass an empty string to "clear" the snapshot text.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a set text operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.ITextDocument.CreateTextChange(ActiproSoftware.Text.ITextChangeType)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.ITextDocument.AppendText(ActiproSoftware.Text.ITextChangeType,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.DeleteText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.ReplaceText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,System.String)" /></member><member name="M:ActiproSoftware.Text.ITextDocument.SetText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Replaces all the text in the <see cref="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot" /> and allows for the specification of other options.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="text">The text to insert.  Pass an empty string to "clear" the snapshot text.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a set text operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.ITextDocument.CreateTextChange(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.ITextChangeOptions)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.ITextDocument.AppendText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.DeleteText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.ITextDocument.ReplaceText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)" /></member><member name="P:ActiproSoftware.Text.ITextDocument.AutoCharacterCasing"><summary>
            Gets or sets how to modify the case of text that is inserted into the document.
            </summary><value>A <see cref="T:ActiproSoftware.Text.CharacterCasing" /> indicating the desired case of inserted text.</value></member><member name="P:ActiproSoftware.Text.ITextDocument.AutoConvertTabsToSpaces"><summary>
            Gets or sets whether to convert tabs to spaces when the Tab key is pressed or indenting occurs.
            </summary><value><c>true</c> if tabs should be converted to spaces when the Tab key is pressed or indenting occurs; otherwise, <c>false</c>.
            The default value is <c>false</c>.
            </value><remarks>
            The number of spaces inserted is indicated by the <see cref="P:ActiproSoftware.Text.ITextDocument.TabSize" /> property.
            </remarks></member><member name="P:ActiproSoftware.Text.ITextDocument.CurrentSnapshot"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that contains the current text of the document.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that contains the current text of the document.</value></member><member name="P:ActiproSoftware.Text.ITextDocument.FileName"><summary>
            Gets or sets the name of the file currently loaded in the document.
            </summary><value>The name of the file currently loaded in the document.</value><remarks>
            This property is automatically set whenever a <see cref="M:ActiproSoftware.Text.ITextDocument.LoadFile(System.String)" /> overload is called that accepts a file path.
            </remarks></member><member name="P:ActiproSoftware.Text.ITextDocument.IsModified"><summary>
            Gets or sets whether the document has been modified.
            </summary><value><c>true</c> if the document has been modified; otherwise, <c>false</c>.
            </value><remarks>
            This flag is reset to <c>false</c> when the <see cref="N:ActiproSoftware.Text" /> property is set, or when a <see cref="M:ActiproSoftware.Text.ITextDocument.SaveFile(System.String,ActiproSoftware.Text.LineTerminator)" />
            overload is used that accepts a path matching the current <see cref="P:ActiproSoftware.Text.ITextDocument.FileName" /> property value.
            </remarks></member><member name="P:ActiproSoftware.Text.ITextDocument.IsReadOnly"><summary>
            Gets or sets whether the entire document is flagged as read-only.
            </summary><value><c>true</c> if the entire document is flagged as read-only; otherwise, <c>false</c>.
            The default value is <c>false</c>.
            </value><remarks>
            When read-only, the document's contents should not be editable.
            </remarks></member><member name="P:ActiproSoftware.Text.ITextDocument.TabSize"><summary>
            Gets or sets the distance in spaces between tab stops.
            </summary><value>
            The distance in spaces between tab stops.
            The default value is <c>4</c> spaces.
            </value></member><member name="P:ActiproSoftware.Text.ITextDocument.UndoHistory"><summary>
            Gets an <see cref="T:ActiproSoftware.Text.Undo.IUndoHistory" /> that provides access to undo and redo functionality for the document.
            </summary><value>An <see cref="T:ActiproSoftware.Text.Undo.IUndoHistory" /> that provides access to undo and redo functionality for the document.</value></member><member name="E:ActiproSoftware.Text.ITextDocument.FileNameChanged"><summary>
            Occurs after the value of the <see cref="P:ActiproSoftware.Text.ITextDocument.FileName" /> property has changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>StringPropertyChangedEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.ITextDocument.IsModifiedChanged"><summary>
            Occurs after the value of the <see cref="P:ActiproSoftware.Text.ITextDocument.IsModified" /> property has changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.ITextDocument.IsReadOnlyChanged"><summary>
            Occurs after the value of the <see cref="P:ActiproSoftware.Text.ITextDocument.IsReadOnly" /> property has changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.ITextDocument.TabSizeChanged"><summary>
            Occurs after the value of the <see cref="P:ActiproSoftware.Text.ITextDocument.TabSize" /> property has changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.ITextDocument.TextChanged"><summary>
            Occurs after a text change occurs to this document.
            </summary><eventdata>
            The event handler receives an argument of type <c>TextSnapshotChangedEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.ITextDocument.TextChanging"><summary>
            Occurs before a text change occurs to this document.
            </summary><eventdata>
            The event handler receives an argument of type <c>TextSnapshotChangingEventArgs</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.Text.ITextFormatter"><summary>
            Provides the base requirements of a language formatter that can adjust the whitespace layout of text for better readability.
            </summary><remarks>
            This interface type can be registered with an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> using the 
            <see cref="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService(System.Object,System.Object)" /> method.
            Once an object that implements this interface is registered with the language for this interface type, its features can be used by the language.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextFormatter.Format(ActiproSoftware.Text.ITextSnapshot,ActiproSoftware.Text.ITextPositionRangeCollection,ActiproSoftware.Text.TextFormatMode)"><summary>
            Applies text formatting to part or all of a snapshot.
            </summary><param name="snapshot">The target <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.</param><param name="selectionPositionRanges">
            The <see cref="T:ActiproSoftware.Text.ITextPositionRangeCollection" /> indicating the selection position ranges.
            These are used to translate the current selection to the new snapshot that is created, even when formatting the entire snapshot.
            </param><param name="mode">A <see cref="T:ActiproSoftware.Text.TextFormatMode" /> indicating whether to format part or all of the snapshot.  The default value is <c>Ranges</c>.</param><remarks>
            The containing <see cref="T:ActiproSoftware.Text.ITextDocument" /> is accessible via the <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </remarks></member><member name="T:ActiproSoftware.Text.ITextPositionRangeCollection"><summary>
            Provides the base requirements for a sorted <see cref="T:ActiproSoftware.Text.TextPositionRange" /> collection, with one of the entries marked as primary.
            </summary></member><member name="M:ActiproSoftware.Text.ITextPositionRangeCollection.BinarySearch(ActiproSoftware.Text.TextPosition)"><summary>
            Performs a binary search for the specified value.
            </summary><param name="value">The value for which to search.</param><returns>
            The index of the specified value in the specified array, if value is found. 
            If value is not found and value is less than one or more elements in array, 
            a negative number which is the bitwise complement of the index of the first element that is larger than value. 
            If value is not found and value is greater than any of the elements in array, 
            a negative number which is the bitwise complement of (the index of the last element plus 1). 
            </returns></member><member name="P:ActiproSoftware.Text.ITextPositionRangeCollection.Count"><summary>
            Gets the number of ranges in the collection.
            </summary><value>The number of ranges in the collection.</value></member><member name="P:ActiproSoftware.Text.ITextPositionRangeCollection.IsBlock"><summary>
            Gets whether the ranges in the collection designate a special rectangular block.
            </summary><value><c>true</c> if the ranges in the collection designate a special rectangular block; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextPositionRangeCollection.Primary"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.TextPositionRange" /> that is the primary one.
            </summary><value>The <see cref="T:ActiproSoftware.Text.TextPositionRange" /> that is the primary one.</value></member><member name="P:ActiproSoftware.Text.ITextPositionRangeCollection.PrimaryIndex"><summary>
            Gets the index of the primary <see cref="T:ActiproSoftware.Text.TextPositionRange" /> within the collection.
            </summary><value>The index of the primary <see cref="T:ActiproSoftware.Text.TextPositionRange" /> within the collection.</value></member><member name="P:ActiproSoftware.Text.ITextPositionRangeCollection.Item(System.Int32)"><summary>
            Gets the child <see cref="T:ActiproSoftware.Text.TextPositionRange" /> at the specified index.
            </summary><param name="index">The zero-based index of the child <see cref="T:ActiproSoftware.Text.TextPositionRange" />.</param><value>The child <see cref="T:ActiproSoftware.Text.TextPositionRange" /> at the specified index.</value></member><member name="T:ActiproSoftware.Text.ITextPositionRangeProvider"><summary>
            Provides the base requirements for an object that has range of two <see cref="T:ActiproSoftware.Text.TextPosition" /> values within a text document.
            </summary></member><member name="P:ActiproSoftware.Text.ITextPositionRangeProvider.PositionRange"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.Text.TextPositionRange" /> that specifies the text position range of the object.
            </summary><value>A <see cref="T:ActiproSoftware.Text.TextPositionRange" /> that specifies the text position range of the object.</value><remarks>
            Note that not all objects implement a setter for this property and in the cases of those who don't,
            an exception may be thrown.
            </remarks></member><member name="T:ActiproSoftware.Text.ITextRangeProvider"><summary>
            Provides the base requirements for an object that has range of two offset values within a text document.
            </summary></member><member name="P:ActiproSoftware.Text.ITextRangeProvider.TextRange"><summary>
            Gets or sets a <see cref="P:ActiproSoftware.Text.ITextRangeProvider.TextRange" /> that specifies the text range of the object.
            </summary><value>A <see cref="P:ActiproSoftware.Text.ITextRangeProvider.TextRange" /> that specifies the text range of the object.</value><remarks>
            Note that not all objects implement a setter for this property and in the cases of those who don't,
            an exception may be thrown.
            </remarks></member><member name="T:ActiproSoftware.Text.ITextSnapshot"><summary>
            Provides the base requirements for an immutable snapshot of an <see cref="T:ActiproSoftware.Text.ITextDocument" /> 
            for a certain <see cref="T:ActiproSoftware.Text.ITextVersion" /> of that document.
            </summary></member><member name="M:ActiproSoftware.Text.ITextSnapshot.CreateTextChange(ActiproSoftware.Text.ITextChangeType)"><summary>
            Creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> based on this snapshot, whereby any following calls to methods such as 
            <see cref="T:ActiproSoftware.Text.ITextChange" />.<see cref="M:ActiproSoftware.Text.ITextChange.ReplaceText(System.Int32,System.Int32,System.String)" /> are grouped into the text change as operations and 
            sequentially executed upon a <see cref="T:ActiproSoftware.Text.ITextChange" />.<see cref="M:ActiproSoftware.Text.ITextChange.Apply" /> call.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><returns>The <see cref="T:ActiproSoftware.Text.ITextChange" /> that was created.</returns><remarks>
            The <see cref="T:ActiproSoftware.Text.ITextChange" />.<see cref="M:ActiproSoftware.Text.ITextChange.Apply" /> method must be called to apply the queued operations to the document.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshot.CreateTextChange(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> based on this snapshot, whereby any following calls to methods such as 
            <see cref="T:ActiproSoftware.Text.ITextChange" />.<see cref="M:ActiproSoftware.Text.ITextChange.ReplaceText(System.Int32,System.Int32,System.String)" /> are grouped into the text change as operations and 
            sequentially executed upon a <see cref="T:ActiproSoftware.Text.ITextChange" />.<see cref="M:ActiproSoftware.Text.ITextChange.Apply" /> call.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param><returns>The <see cref="T:ActiproSoftware.Text.ITextChange" /> that was created.</returns><remarks>
            The <see cref="T:ActiproSoftware.Text.ITextChange" />.<see cref="M:ActiproSoftware.Text.ITextChange.Apply" /> method must be called to apply the queued operations to the document.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshot.Export(ActiproSoftware.Text.Exporters.ITextExporter)"><summary>
            Exports the contents of the snapshot to another text format, such as <c>HTML</c> or <c>RTF</c>.
            </summary><param name="exporter">The <see cref="T:ActiproSoftware.Text.Exporters.ITextExporter" /> to use for the export operation.</param><returns>The exported text.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshot.ExportToFile(ActiproSoftware.Text.Exporters.ITextExporter,System.String)"><summary>
            Exports the contents of the snapshot to a file in another text format, such as <c>HTML</c> or <c>RTF</c>.
            </summary><param name="exporter">The <see cref="T:ActiproSoftware.Text.Exporters.ITextExporter" /> to use for the export operation.</param><param name="path">The full path of the file of which to save.</param></member><member name="M:ActiproSoftware.Text.ITextSnapshot.FindAll(ActiproSoftware.Text.Searching.ISearchOptions)"><summary>
            Performs a find all operation.
            </summary><param name="options">The <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> to use.</param><returns>
            An <see cref="T:ActiproSoftware.Text.Searching.ISearchResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.Text.ITextSnapshot.FindAll(ActiproSoftware.Text.Searching.ISearchOptions,ActiproSoftware.Text.TextRange)"><summary>
            Performs a find all operation over a specific range of the snapshot.
            </summary><param name="options">The <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> to use.</param><param name="searchTextRange">
            The <see cref="T:ActiproSoftware.Text.TextRange" /> of offsets to search.
            If all should be searched, specify the range <c>0</c> to the length of the snapshot.
            </param><returns>
            An <see cref="T:ActiproSoftware.Text.Searching.ISearchResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.Text.ITextSnapshot.FindNext(ActiproSoftware.Text.Searching.ISearchOptions,System.Int32,System.Boolean)"><summary>
            Performs a find next operation.
            </summary><param name="options">The <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> to use.</param><param name="startOffset">The offset at which to start the search.</param><param name="canWrap">Whether the search can wrap at the end of the search text range.</param><returns>
            An <see cref="T:ActiproSoftware.Text.Searching.ISearchResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.Text.ITextSnapshot.FindNext(ActiproSoftware.Text.Searching.ISearchOptions,System.Int32,System.Boolean,ActiproSoftware.Text.TextRange)"><summary>
            Performs a find next operation over a specific range of the snapshot.
            </summary><param name="options">The <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> to use.</param><param name="startOffset">The offset at which to start the search.</param><param name="canWrap">Whether the search can wrap at the end of the search text range.</param><param name="searchTextRange">
            The <see cref="T:ActiproSoftware.Text.TextRange" /> of offsets to search.
            If all should be searched, specify the range <c>0</c> to the length of the <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </param><returns>
            An <see cref="T:ActiproSoftware.Text.Searching.ISearchResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.Text.ITextSnapshot.FindNext(ActiproSoftware.Text.Searching.ISearchOptions,System.Int32,System.Boolean,ActiproSoftware.Text.TextRange,System.Threading.CancellationToken)"><summary>
            Performs a find next operation over a specific range of the snapshot.
            </summary><param name="options">The <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> to use.</param><param name="startOffset">The offset at which to start the search.</param><param name="canWrap">Whether the search can wrap at the end of the search text range.</param><param name="searchTextRange">
            The <see cref="T:ActiproSoftware.Text.TextRange" /> of offsets to search.
            If all should be searched, specify the range <c>0</c> to the length of the <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </param><param name="cancellationToken">The cancellation token that can abort the search operation.</param><returns>
            An <see cref="T:ActiproSoftware.Text.Searching.ISearchResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.Text.ITextSnapshot.GetMergedBufferReader"><summary>
            Returns an <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that allows scanning over a union of the <see cref="P:ActiproSoftware.Text.ITextSnapshot.HeaderText" />, <see cref="P:ActiproSoftware.Text.ITextSnapshot.Text" />, and <see cref="P:ActiproSoftware.Text.ITextSnapshot.FooterText" />.
            </summary><returns>An <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that allows scanning over a union of the <see cref="P:ActiproSoftware.Text.ITextSnapshot.HeaderText" />, <see cref="P:ActiproSoftware.Text.ITextSnapshot.Text" />, and <see cref="P:ActiproSoftware.Text.ITextSnapshot.FooterText" />.</returns><seealso cref="P:ActiproSoftware.Text.ITextSnapshot.FooterText" /><seealso cref="P:ActiproSoftware.Text.ITextSnapshot.HeaderText" /><seealso cref="P:ActiproSoftware.Text.ITextSnapshot.Text" /></member><member name="M:ActiproSoftware.Text.ITextSnapshot.GetReader(System.Int32)"><summary>
            Returns an <see cref="T:ActiproSoftware.Text.ITextSnapshotReader" /> that can be used to navigate through the text and token contents of the snapshot.
            </summary><param name="offset">The offset at which to initalize the reader.</param><returns>An <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that can be used to navigate through the text and token contents of the snapshot.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshot.GetReader(ActiproSoftware.Text.TextPosition)"><summary>
            Returns an <see cref="T:ActiproSoftware.Text.ITextSnapshotReader" /> that can be used to navigate through the text and token contents of the snapshot.
            </summary><param name="position">The <see cref="T:ActiproSoftware.Text.TextPosition" /> at which to initalize the reader.</param><returns>An <see cref="T:ActiproSoftware.Text.ITextSnapshotReader" /> that can be used to navigate through the text and token contents of the snapshot.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshot.GetSubstring(System.Int32,System.Int32)"><summary>
            Returns a substring from the snapshot text using <see cref="F:ActiproSoftware.Text.LineTerminator.CarriageReturnNewline" /> for line ends.
            </summary><param name="offset">The offset at which to retrieve the text.</param><param name="length">The number of characters to return.</param><returns>The substring from the snapshot text using <see cref="F:ActiproSoftware.Text.LineTerminator.CarriageReturnNewline" /> for line ends.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshot.GetSubstring(ActiproSoftware.Text.TextRange)"><summary>
            Returns a substring from the snapshot text using <see cref="F:ActiproSoftware.Text.LineTerminator.CarriageReturnNewline" /> for line ends.
            </summary><param name="textRange">A <see cref="T:ActiproSoftware.Text.TextRange" /> indicating the range of text to retrieve.</param><returns>The substring from the snapshot text using <see cref="F:ActiproSoftware.Text.LineTerminator.CarriageReturnNewline" /> for line ends.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshot.GetSubstring(System.Int32,System.Int32,ActiproSoftware.Text.LineTerminator)"><summary>
            Returns a substring from the snapshot text using the specified <see cref="T:ActiproSoftware.Text.LineTerminator" /> for line ends.
            </summary><param name="offset">The offset at which to retrieve the text.</param><param name="length">The number of characters to return.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.Text.LineTerminator" /> specifying the type of line terminators to use.</param><returns>The substring from the snapshot text using the specified <see cref="T:ActiproSoftware.Text.LineTerminator" /> for line ends.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshot.GetSubstring(ActiproSoftware.Text.TextRange,ActiproSoftware.Text.LineTerminator)"><summary>
            Returns a substring from the snapshot text using the specified <see cref="T:ActiproSoftware.Text.LineTerminator" /> for line ends.
            </summary><param name="textRange">A <see cref="T:ActiproSoftware.Text.TextRange" /> indicating the range of text to retrieve.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.Text.LineTerminator" /> specifying the type of line terminators to use.</param><returns>The substring from the snapshot text using the specified <see cref="T:ActiproSoftware.Text.LineTerminator" /> for line ends.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshot.GetText(ActiproSoftware.Text.LineTerminator)"><summary>
            Returns the entire text of the snapshot using the specified <see cref="T:ActiproSoftware.Text.LineTerminator" /> for line ends.
            </summary><param name="lineTerminator">A <see cref="T:ActiproSoftware.Text.LineTerminator" /> specifying the type of line terminators to use.</param><returns>The entire text of the snapshot using the specified <see cref="T:ActiproSoftware.Text.LineTerminator" /> for line ends.</returns><remarks>
            To retrieve the text in the format expected by a language parser or tagger, 
            pass <see cref="F:ActiproSoftware.Text.LineTerminator.Newline" /> as the <paramref name="lineTerminator" /> parameter.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshot.GetTextStatistics"><summary>
            Returns an <see cref="T:ActiproSoftware.Text.ITextStatistics" /> for the snapshot's text, which provides numerous statistics about the text
            such as word, sentence, character counts as well as readability scores.
            </summary><returns>An <see cref="T:ActiproSoftware.Text.ITextStatistics" /> for the snapshot's text.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshot.GetWordText(System.Int32)"><summary>
            Gets the text of the word at the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns>The text of the word at the specified offset.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshot.GetWordTextRange(System.Int32)"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.TextRange" /> of offsets that contain the word at the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns>A <see cref="T:ActiproSoftware.Text.TextRange" /> containing a range of offsets that contain the word at the specified offset.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshot.OffsetToPosition(System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.Text.TextPosition" /> that represents the specified offset within the text lines.
            </summary><param name="offset">The offset of a character within the snapshot.</param><returns>The <see cref="T:ActiproSoftware.Text.TextPosition" /> that represents the specified offset within the text lines.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshot.PositionRangeToTextRange(ActiproSoftware.Text.TextPositionRange)"><summary>
            Returns the <see cref="T:ActiproSoftware.Text.TextRange" /> that represents the specified <see cref="T:ActiproSoftware.Text.TextPositionRange" /> within the snapshot.
            </summary><param name="positionRange">The <see cref="T:ActiproSoftware.Text.TextPositionRange" /> within the snapshot.</param><returns>The <see cref="T:ActiproSoftware.Text.TextRange" /> that represents the specified <see cref="T:ActiproSoftware.Text.TextPositionRange" /> within the snapshot.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshot.PositionToOffset(ActiproSoftware.Text.TextPosition)"><summary>
            Returns the offset for the specified <see cref="T:ActiproSoftware.Text.TextPosition" /> within the text lines.
            </summary><param name="position">The <see cref="T:ActiproSoftware.Text.TextPosition" /> of a character within the text lines.</param><returns>The offset for the specified <see cref="T:ActiproSoftware.Text.TextPosition" /> within the text lines.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshot.TextRangeToPositionRange(ActiproSoftware.Text.TextRange)"><summary>
            Returns the <see cref="T:ActiproSoftware.Text.TextPositionRange" /> that represents the specified <see cref="T:ActiproSoftware.Text.TextRange" /> within the snapshot.
            </summary><param name="textRange">The <see cref="T:ActiproSoftware.Text.TextRange" /> within the snapshot.</param><returns>The <see cref="T:ActiproSoftware.Text.TextPositionRange" /> that represents the specified <see cref="T:ActiproSoftware.Text.TextRange" /> within the snapshot.</returns></member><member name="P:ActiproSoftware.Text.ITextSnapshot.Document"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextDocument" /> for which this snapshot applies.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextDocument" /> for which this snapshot applies.</value></member><member name="P:ActiproSoftware.Text.ITextSnapshot.FooterText"><summary>
            Gets the footer text to append to the end of the snapshot's <see cref="P:ActiproSoftware.Text.ITextSnapshot.Text" /> when scanning through the <see cref="M:ActiproSoftware.Text.ITextSnapshot.GetMergedBufferReader" /> result,
            typically used when parsing the snapshot.
            </summary><value>The footer text to append to the end of the snapshot's <see cref="P:ActiproSoftware.Text.ITextSnapshot.Text" />.</value><remarks>
            The use of this property, along with <see cref="P:ActiproSoftware.Text.ITextSnapshot.HeaderText" />, allows for editing 'fragments' of code.  
            The header and footer sections provide the outer code that surrounds the
            'fragment' being edited in the snapshot's <see cref="P:ActiproSoftware.Text.ITextSnapshot.Text" /> property.
            <para>
            An example is when editing a method body in a language like <c>C#</c>.
            The <see cref="P:ActiproSoftware.Text.ITextSnapshot.HeaderText" /> would contain the namespace, class, and member declaration starts.
            The <see cref="P:ActiproSoftware.Text.ITextSnapshot.FooterText" /> would contain the namespace, class, and member declaration ends.
            The document would edit the 'fragment' of statements within the header and footer, and 
            all of them would be combined for parsing purposes.
            </para></remarks><seealso cref="M:ActiproSoftware.Text.ITextSnapshot.GetMergedBufferReader" /><seealso cref="P:ActiproSoftware.Text.ITextSnapshot.HeaderText" /><seealso cref="P:ActiproSoftware.Text.ITextSnapshot.Text" /></member><member name="P:ActiproSoftware.Text.ITextSnapshot.HasContent"><summary>
            Gets whether there is content in the snapshot.
            </summary><value><c>true</c> if there is content in the snapshot; otherwise, <c>false</c>.
            </value><remarks>
            This property simply checks whether the snapshot has a length greater than <c>0</c>.
            </remarks></member><member name="P:ActiproSoftware.Text.ITextSnapshot.HeaderText"><summary>
            Gets the header text to append to the start of the snapshot's <see cref="P:ActiproSoftware.Text.ITextSnapshot.Text" /> when scanning through the <see cref="M:ActiproSoftware.Text.ITextSnapshot.GetMergedBufferReader" /> result,
            typically used when parsing the snapshot.
            </summary><value>The header text to append to the start of the snapshot's <see cref="P:ActiproSoftware.Text.ITextSnapshot.Text" />.</value><remarks>
            The use of this property, along with <see cref="P:ActiproSoftware.Text.ITextSnapshot.FooterText" />, allows for editing 'fragments' of code.  
            The header and footer sections provide the outer code that surrounds the
            'fragment' being edited in the snapshot's <see cref="P:ActiproSoftware.Text.ITextSnapshot.Text" /> property.
            <para>
            An example is when editing a method body in a language like <c>C#</c>.
            The <see cref="P:ActiproSoftware.Text.ITextSnapshot.HeaderText" /> would contain the namespace, class, and member declaration starts.
            The <see cref="P:ActiproSoftware.Text.ITextSnapshot.FooterText" /> would contain the namespace, class, and member declaration ends.
            The document would edit the 'fragment' of statements within the header and footer, and 
            all of them would be combined for parsing purposes.
            </para></remarks><seealso cref="M:ActiproSoftware.Text.ITextSnapshot.GetMergedBufferReader" /><seealso cref="P:ActiproSoftware.Text.ITextSnapshot.HeaderText" /><seealso cref="P:ActiproSoftware.Text.ITextSnapshot.Text" /></member><member name="P:ActiproSoftware.Text.ITextSnapshot.Length"><summary>
            Gets the number of characters in the snapshot, excluding any carriage-returns but including newlines.
            </summary><value>The number of characters in the snapshot, excluding any carriage-returns but including newlines.</value></member><member name="P:ActiproSoftware.Text.ITextSnapshot.Lines"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" /> objects, each of which represents a line in the snapshot.
            </summary><value>
            A <see cref="T:ActiproSoftware.Text.ITextSnapshotLineCollection" /> containing the lines in the snapshot.
            </value></member><member name="P:ActiproSoftware.Text.ITextSnapshot.SnapshotRange"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> that contains the entire text snapshot.
            </summary><value>A <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> that contains the entire text snapshot.</value></member><member name="P:ActiproSoftware.Text.ITextSnapshot.Text"><summary>
            Gets the entire text of the snapshot using <see cref="F:ActiproSoftware.Text.LineTerminator.CarriageReturnNewline" /> for line ends,
            which is not intended to be used for parsing for classification reasons.
            </summary><value>The entire text of the snapshot using <see cref="F:ActiproSoftware.Text.LineTerminator.CarriageReturnNewline" /> for line ends.</value><remarks>
            This property should not be used as input for language parsers or taggers since internally for performance reasons,
            text is stored with newlines-only as line terminators.
            Instead, call <see cref="M:ActiproSoftware.Text.ITextSnapshot.GetText(ActiproSoftware.Text.LineTerminator)" /> with the <see cref="F:ActiproSoftware.Text.LineTerminator.Newline" /> parameter when 
            needing the text for parsing or tagging reasons.
            <para>
            The <see cref="M:ActiproSoftware.Text.ITextSnapshot.GetText(ActiproSoftware.Text.LineTerminator)" /> method can be used to obtain text using any of the <see cref="T:ActiproSoftware.Text.LineTerminator" /> options.
            </para></remarks></member><member name="P:ActiproSoftware.Text.ITextSnapshot.Item(System.Int32)"><summary>
            Gets a character in the snapshot.
            </summary><param name="index">The index of the character to return.</param><value>
            A character in the snapshot.
            </value></member><member name="P:ActiproSoftware.Text.ITextSnapshot.Version"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextVersion" /> that specifies the text version represented by the snapshot.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextVersion" /> that specifies the text version represented by the snapshot.</value></member><member name="T:ActiproSoftware.Text.ITextSnapshotLine"><summary>
            Provides the base requirements for a line in an <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </summary></member><member name="M:ActiproSoftware.Text.ITextSnapshotLine.Contains(System.Int32)"><summary>
            Returns whether the line contains the specified offset.
            </summary><param name="offset">The offset to check.</param><returns><c>true</c> if the line contains the offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the offset falls on the line terminator of the line.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshotLine.GetIndentAmountBefore(System.Int32)"><summary>
            Returns indent amount, in columns, of the line before the specified offset.
            </summary><value>The indent amount, in columns, of the line before the specified offset.</value></member><member name="M:ActiproSoftware.Text.ITextSnapshotLine.IsLineEnd(System.Int32)"><summary>
            Returns whether the specified offset ends the line.
            </summary><param name="offset">The offset to check.</param><returns><c>true</c> if the offset ends the line; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.ITextSnapshotLine.IsLineStart(System.Int32)"><summary>
            Returns whether the specified offset starts the line.
            </summary><param name="offset">The offset to check.</param><returns><c>true</c> if the offset starts the line; otherwise, <c>false</c>.
            </returns></member><member name="P:ActiproSoftware.Text.ITextSnapshotLine.EndOffset"><summary>
            Gets the offset at which the line ends, excluding the line terminator.
            </summary><value>The offset at which the line ends, excluding the line terminator.</value></member><member name="P:ActiproSoftware.Text.ITextSnapshotLine.EndOffsetIncludingLineTerminator"><summary>
            Gets the offset at which the line ends, including the line terminator if there is a hard line break on the line.
            </summary><value>The offset at which the line ends, including the line terminator if there is a hard line break on the line.</value></member><member name="P:ActiproSoftware.Text.ITextSnapshotLine.FirstNonWhitespaceCharacterOffset"><summary>
            Gets the offset of the first non-whitespace character in the line.
            </summary><value>The offset of the first non-whitespace character in the line.</value><remarks>
            If no non-whitespace character is found, the value of <see cref="P:ActiproSoftware.Text.ITextSnapshotLine.EndOffset" /> is returned.
            </remarks></member><member name="P:ActiproSoftware.Text.ITextSnapshotLine.IndentAmount"><summary>
            Gets or sets the indent amount, in columns, of the line.
            </summary><value>The indent amount, in columns, of the line.</value></member><member name="P:ActiproSoftware.Text.ITextSnapshotLine.Index"><summary>
            Gets the index of the line within the <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </summary><value>The index of the line within the <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.</value></member><member name="P:ActiproSoftware.Text.ITextSnapshotLine.IsLastLine"><summary>
            Gets whether the line contains the last offset of the document.
            </summary><value><c>true</c> if the line contains the last offset of the document; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextSnapshotLine.Length"><summary>
            Gets the length of the line, excluding the line terminator.
            </summary><value>The length of the line, excluding the line terminator.</value></member><member name="P:ActiproSoftware.Text.ITextSnapshotLine.Snapshot"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that contains the line.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that contains the line.</value></member><member name="P:ActiproSoftware.Text.ITextSnapshotLine.SnapshotRange"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> that contains the text of the line, excluding the line terminator.
            </summary><value>A <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> that contains the text of the line, excluding the line terminator.</value></member><member name="P:ActiproSoftware.Text.ITextSnapshotLine.StartOffset"><summary>
            Gets the offset at which the line starts.
            </summary><value>The offset at which the line starts.</value></member><member name="P:ActiproSoftware.Text.ITextSnapshotLine.Text"><summary>
            Gets the text of the line, excluding the line terminator.
            </summary><value>The text of the line, excluding the line terminator.</value></member><member name="P:ActiproSoftware.Text.ITextSnapshotLine.TextRangeIncludingLineTerminator"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.TextRange" /> that indicates the text range of the line, including the line terminator if there is a hard line break on the line.
            </summary><value>The <see cref="T:ActiproSoftware.Text.TextRange" /> that indicates the text range of the line, including the line terminator if there is a hard line break on the line.</value></member><member name="T:ActiproSoftware.Text.ITextSnapshotLineCollection"><summary>
            Encapsulates a collection of <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" /> objects.
            </summary><seealso cref="T:ActiproSoftware.Text.ITextSnapshotLine" /></member><member name="M:ActiproSoftware.Text.ITextSnapshotLineCollection.GetLineTextRange(System.Int32)"><summary>
            Returns the <see cref="T:ActiproSoftware.Text.TextRange" /> of the specified line, excluding the line terminator.
            </summary><param name="index">The index of the line to examine.</param><returns>The <see cref="T:ActiproSoftware.Text.TextRange" /> of the specified line, excluding the line terminator.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshotLineCollection.IndexOf(System.Int32)"><summary>
            Finds the index of the <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" /> that contains the specified offset.
            </summary><param name="offset">The offset to look for.</param><returns>The index of the <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" /> that contains the specified offset.</returns></member><member name="P:ActiproSoftware.Text.ITextSnapshotLineCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" /> at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>ITextSnapshotLineCollection</c> class. 
            </para></summary><param name="index">The index of the <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" /> to return.</param><value>
            The <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.Text.ITextSnapshotReader"><summary>
            Provides the base requirements for an object that reads through characters and tokens from an <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </summary></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToCurrentSnapshotLineEnd"><summary>
            Moves the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> to the end of the snapshot line that contains the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" />.
            </summary></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToCurrentSnapshotLineStart"><summary>
            Moves the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> to the start of the snapshot line that contains the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" />.
            </summary></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToCurrentTokenStart"><summary>
            Moves the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> to the start of the <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> that contains the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" />.
            </summary></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToCurrentWordEnd"><summary>
            Moves to the current word's end offset.
            </summary><returns><c>true</c> if the word end is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a proper word end is not found, the reader's <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> will be the end of the snapshot.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToCurrentWordStart"><summary>
            Moves to the current word's start offset.
            </summary><returns><c>true</c> if the word start is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a proper word start is not found, the reader's <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> will be the beginning of the snapshot.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToNextMatchingTokenById(System.Int32,System.Int32)"><summary>
            Moves the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> to the next matching token where there can be nested token pairs.
            </summary><param name="startTokenId">The ID of the start <see cref="T:ActiproSoftware.Text.Lexing.IToken" />.</param><param name="endTokenId">The ID of the related end <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> for which to search.</param><returns><c>true</c> if the next matching token is found; otherwise, <c>false</c>.
            </returns><remarks>
            This method is useful for bracket matching.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToNextSnapshotLineStart"><summary>
            Moves the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> to the start of the snapshot line after the
            snapshot line that contains the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" />.
            </summary></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToNextToken"><summary>
            Moves to the next token's start offset.
            </summary><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> will be the end of the snapshot.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToNextToken(System.Int32)"><summary>
            Moves backward the specified number of tokens.
            </summary><param name="count">The number of tokens to move.</param><returns><c>true</c> if a token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> will be the end of the snapshot.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToNextToken(System.Predicate{ActiproSoftware.Text.Lexing.IToken})"><summary>
            Continues forward token scanning until the specified predicate returns <c>true</c>, at which time the reader points to the token's start offset.
            </summary><param name="predicate">The predicate to use.  Return <c>true</c> to stop scanning; otherwise, <c>false</c> to continue scanning.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> will be the end of the snapshot.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToNextTokenWithId(System.Int32)"><summary>
            Moves to the next token's start offset whose token ID matches the specified ID.
            </summary><param name="id">The token ID to look for.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> will be the end of the snapshot.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToNextTokenWithId(System.Int32[])"><summary>
            Moves to the next token's start offset whose token ID matches any of the specified IDs.
            </summary><param name="ids">An array of token IDs to look for.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> will be the end of the snapshot.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToNextTokenWithKey(System.String)"><summary>
            Moves to the next token's start offset whose token key matches the specified key.
            </summary><param name="key">The token key to look for.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> will be the end of the snapshot.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToNextTokenWithKey(System.String[])"><summary>
            Moves to the next token's start offset whose token key matches any of the specified keys.
            </summary><param name="keys">An array of token keys to look for.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> will be the end of the snapshot.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToNextWordStart"><summary>
            Moves to the next word's start offset.
            </summary><returns><c>true</c> if the word start is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a proper word start is not found, the reader's <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> will be the end of the snapshot.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToPreviousMatchingTokenById(System.Int32,System.Int32)"><summary>
            Moves the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> to the previous matching token where there can be nested token pairs.
            </summary><param name="endTokenId">The ID of the end <see cref="T:ActiproSoftware.Text.Lexing.IToken" />.</param><param name="startTokenId">The ID of the related start <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> for which to search.</param><returns><c>true</c> if the previous matching token is found; otherwise, <c>false</c>.
            </returns><remarks>
            This method is useful for bracket matching.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToPreviousSnapshotLineEnd"><summary>
            Moves the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> to the end of the snapshot line before the
            snapshot line that contains the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" />.
            </summary></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToPreviousToken"><summary>
            Moves to the previous token's start offset.
            </summary><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> will be the beginning of the snapshot.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToPreviousToken(System.Int32)"><summary>
            Moves backward the specified number of tokens.
            </summary><param name="count">The number of tokens to move.</param><returns><c>true</c> if a token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> will be the beginning of the snapshot.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToPreviousToken(System.Predicate{ActiproSoftware.Text.Lexing.IToken})"><summary>
            Continues backward token scanning until the specified predicate returns <c>true</c>, at which time the reader points to the token's start offset.
            </summary><param name="predicate">The predicate to use.  Return <c>true</c> to stop scanning; otherwise, <c>false</c> to continue scanning.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> will be the end of the snapshot.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToPreviousTokenWithId(System.Int32)"><summary>
            Moves to the previous token's start offset whose token ID matches the specified ID.
            </summary><param name="id">The token ID to look for.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> will be the beginning of the snapshot.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToPreviousTokenWithId(System.Int32[])"><summary>
            Moves to the previous token's start offset whose token ID matches any of the specified IDs.
            </summary><param name="ids">An array of token IDs to look for.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> will be the beginning of the snapshot.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToPreviousTokenWithKey(System.String)"><summary>
            Moves to the previous token's start offset whose token key matches the specified key.
            </summary><param name="key">The token key to look for.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> will be the beginning of the snapshot.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToPreviousTokenWithKey(System.String[])"><summary>
            Moves to the previous token's start offset whose token key matches any of the specified keys.
            </summary><param name="keys">An array of token keys to look for.</param><returns><c>true</c> if the token is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a token is not found, the stream's <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> will be the beginning of the snapshot.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToPreviousWordStart"><summary>
            Moves to the previous word's start character.
            </summary><returns><c>true</c> if the word start is found; otherwise, <c>false</c>.
            </returns><remarks>
            If a proper word start is not found, the reader's <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> will be the beginning of the snapshot.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToSnapshotEnd"><summary>
            Moves the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> to the end of the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Snapshot" />.
            </summary></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.GoToSnapshotStart"><summary>
            Moves the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> to the start of the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Snapshot" />.
            </summary></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.PeekCharacter"><summary>
            Peeks at a single character without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.PeekCharacterReverse"><summary>
            Reverse peeks at a single character without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.PeekText(System.Int32)"><summary>
            Peeks at a string without seeking past it.
            </summary><param name="maxCharCount">The maximum number of characters to read, if the end of the snapshot is not reached beforehand.</param><returns>The string that was read.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.PeekTextReverse(System.Int32)"><summary>
            Reverse peeks at a string without seeking past it.
            </summary><param name="maxCharCount">The maximum number of characters to read, if the start of the snapshot is not reached beforehand.</param><returns>The string that was read.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.PeekToken"><summary>
            Peeks at a single <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> from the snapshot without seeking past it.
            </summary><returns>The <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> that was read.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.PeekTokenReverse"><summary>
            Reverse peeks at a single <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> from the snapshot without seeking past it.
            </summary><returns>The <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> that was read.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.ReadCharacter"><summary>
            Reads a single character and seeks forward one offset.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.ReadCharacterReverse"><summary>
            Reverse reads a single character and seeks backward one offset.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.ReadCharacterReverseThrough(System.Char)"><summary>
            Reverse reads characters from the snapshot until the specified character is read through.
            </summary><param name="ch">The desired character.</param><returns><c>true</c> if the desired character was read; otherwise, <c>false</c> if the start of the snapshot was reached.
            </returns></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.ReadCharacterReverseThrough(System.Char,System.Int32)"><summary>
            Reverse reads characters from the snapshot until the specified character is read through, or the specified offset is reached.
            </summary><param name="ch">The desired character.</param><param name="minOffset">The minimum offset to check.</param><returns><c>true</c> if the desired character was read; otherwise, <c>false</c> if the specified offset was reached.
            </returns></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.ReadCharacterThrough(System.Char)"><summary>
            Reads characters from the snapshot until the specified character is read through.
            </summary><param name="ch">The desired character.</param><returns><c>true</c> if the desired character was read; otherwise, <c>false</c> if the end of the snapshot was reached.
            </returns></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.ReadCharacterThrough(System.Char,System.Int32)"><summary>
            Reads characters from the snapshot until the specified character is read through, or the specified offset is reached.
            </summary><param name="ch">The desired character.</param><param name="maxOffset">The maximum offset to check.</param><returns><c>true</c> if the desired character was read; otherwise, <c>false</c> if the specified offset was reached.
            </returns></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.ReadText(System.Int32)"><summary>
            Reads a string and seeks forward to the end of it.
            </summary><param name="maxCharCount">The maximum number of characters to read, if the end of the snapshot is not reached beforehand.</param><returns>The string that was read.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.ReadTextReverse(System.Int32)"><summary>
            Reverse reads a string and seeks backward to the start of it.
            </summary><param name="maxCharCount">The maximum number of characters to read, if the start of the snapshot is not reached beforehand.</param><returns>The string that was read.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.ReadToken"><summary>
            Reads a single <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> from the snapshot and seeks forward one <see cref="T:ActiproSoftware.Text.Lexing.IToken" />.
            </summary><returns>The <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> that was read.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.ReadTokenReverse"><summary>
            Reverse reads a single <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> from the snapshot and seeks backward one <see cref="T:ActiproSoftware.Text.Lexing.IToken" />.
            </summary><returns>The <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> that was read.</returns></member><member name="M:ActiproSoftware.Text.ITextSnapshotReader.SeekCharacter(System.Int32)"><summary>
            Moves the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> by the specified amount.
            </summary><param name="delta">The amount of characters to move.  This value may be negative.</param></member><member name="P:ActiproSoftware.Text.ITextSnapshotReader.BufferReader"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that is wrapped by this reader and can be 
            used for performing fast low-level text scanning on the snapshot.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that can be used for performing fast low-level text scanning on the snapshot.</value></member><member name="P:ActiproSoftware.Text.ITextSnapshotReader.Character"><summary>
            Gets the character at the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" />.
            </summary><value>The character at the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" />.</value><remarks>
            This value is the same as the return value of the <see cref="M:ActiproSoftware.Text.ITextSnapshotReader.PeekCharacter" /> method.
            </remarks></member><member name="P:ActiproSoftware.Text.ITextSnapshotReader.IsAtSnapshotEnd"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> is at the end of the snapshot.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> is at the end of the snapshot; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextSnapshotReader.IsAtSnapshotLineEnd"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> is at the end of an <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" />.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> is at the end of an <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" />; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextSnapshotReader.IsAtSnapshotLineStart"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> is at the start of an <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" />.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> is at the start of an <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" />; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextSnapshotReader.IsAtSnapshotStart"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> is at the start of the snapshot.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> is at the start of the snapshot; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextSnapshotReader.IsAtTokenStart"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> is at the start of the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Token" />.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" /> is at the start of the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Token" />; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextSnapshotReader.IsCharacterLineTerminator"><summary>
            Gets whether the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Character" /> is a newline character.
            </summary><value><c>true</c> if the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Character" /> is a newline character; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextSnapshotReader.IsCharacterWhitespace"><summary>
            Gets whether the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Character" /> is categorized as a whitespace character.
            </summary><value><c>true</c> if the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Character" /> is categorized as a whitespace character; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.ITextSnapshotReader.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> that contains the current offset within the snapshot.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> that contains the current offset within the snapshot.</value></member><member name="P:ActiproSoftware.Text.ITextSnapshotReader.Length"><summary>
            Gets the length of the snapshot.
            </summary><value>The length of the snapshot.</value></member><member name="P:ActiproSoftware.Text.ITextSnapshotReader.Offset"><summary>
            Gets or sets the current offset within the snapshot.
            </summary><value>The current offset within the snapshot.</value></member><member name="P:ActiproSoftware.Text.ITextSnapshotReader.Options"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextSnapshotReaderOptions" /> that contains optimization options for the reader.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextSnapshotReaderOptions" /> that contains optimization options for the reader.</value><remarks>
            Configure the options before accessing any members on this reader instance.
            </remarks></member><member name="P:ActiproSoftware.Text.ITextSnapshotReader.Position"><summary>
            Gets the current <see cref="T:ActiproSoftware.Text.TextPosition" /> within the snapshot.
            </summary><value>The current <see cref="T:ActiproSoftware.Text.TextPosition" /> within the snapshot.</value></member><member name="P:ActiproSoftware.Text.ITextSnapshotReader.Snapshot"><summary>
            Gets the core <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that is examined by this reader.
            </summary><value>The core <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that is examined by this reader.</value></member><member name="P:ActiproSoftware.Text.ITextSnapshotReader.SnapshotLine"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" /> that contains the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" />.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" /> that contains the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" />.</value></member><member name="P:ActiproSoftware.Text.ITextSnapshotReader.Token"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> that contains the offset indicated by <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" />.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> that contains the offset indicated by <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Offset" />.</value><remarks>
            This value is the same as the return value of the <see cref="M:ActiproSoftware.Text.ITextSnapshotReader.PeekToken" /> method.
            </remarks></member><member name="P:ActiproSoftware.Text.ITextSnapshotReader.TokenText"><summary>
            Gets the snapshot text contained by the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Token" />.
            </summary><value>The snapshot text contained by the <see cref="P:ActiproSoftware.Text.ITextSnapshotReader.Token" />.</value></member><member name="T:ActiproSoftware.Text.ITextSnapshotReaderOptions"><summary>
            Provides the base requirements for options that are applied to an <see cref="T:ActiproSoftware.Text.ITextSnapshotReader" />.
            </summary><seealso cref="T:ActiproSoftware.Text.TextSnapshotReaderOptions" /></member><member name="P:ActiproSoftware.Text.ITextSnapshotReaderOptions.DefaultTokenLoadBufferLength"><summary>
            Gets or sets the default number of characters for which to load tokens when retrieving tokens for consumption by the reader.
            </summary><value>
            The number of characters for which to load tokens.
            The default value is <c>700</c>.
            </value><remarks>
            This property governs each load of tokens following the first load.
            </remarks><seealso cref="P:ActiproSoftware.Text.ITextSnapshotReaderOptions.InitialTokenLoadBufferLength" /></member><member name="P:ActiproSoftware.Text.ITextSnapshotReaderOptions.InitialTokenLoadBufferLength"><summary>
            Gets or sets the initial number of characters for which to load tokens when retrieving tokens for consumption by the reader.
            </summary><value>
            The number of characters for which to load tokens.
            The default value is <c>100</c>.
            </value><remarks>
            This property only governs the first load of tokens.
            </remarks><seealso cref="P:ActiproSoftware.Text.ITextSnapshotReaderOptions.DefaultTokenLoadBufferLength" /></member><member name="P:ActiproSoftware.Text.ITextSnapshotReaderOptions.PrimaryScanDirection"><summary>
            Gets or sets the primary direction in which text scanning will take place with the reader.
            </summary><value>
            The primary direction in which text scanning will take place with the reader.
            The default value is <see langword="null" />.
            </value><remarks>
            A value of <see langword="null" /> means indeterminate.
            This property is simply used for optimization of the initial token load and in no way restricts which
            way you are permitted to scan with the reader.
            </remarks></member><member name="T:ActiproSoftware.Text.ITextStatistic"><summary>
            Provides the base requirements for a text statistic that is returned by an <see cref="T:ActiproSoftware.Text.ITextStatistics" />.
            </summary></member><member name="P:ActiproSoftware.Text.ITextStatistic.Description"><summary>
            Gets the description of the statistic, generally displayed in the user interface.
            </summary><value>The description of the statistic, generally displayed in the user interface.</value></member><member name="P:ActiproSoftware.Text.ITextStatistic.StringValue"><summary>
            Gets the string value of the statistic.
            </summary><value>The string value of the statistic.</value></member><member name="P:ActiproSoftware.Text.ITextStatistic.Value"><summary>
            Gets the value of the statistic.
            </summary><value>The value of the statistic.</value></member><member name="T:ActiproSoftware.Text.ITextStatistics"><summary>
            Provides the base requirements for a class that contains numerous statistics such as line, word, character counts, and readability scores for text.
            </summary><seealso cref="T:ActiproSoftware.Text.Implementation.TextStatistics" /></member><member name="M:ActiproSoftware.Text.ITextStatistics.GetRawStatistics"><summary>
            Returns the list of <see cref="T:ActiproSoftware.Text.ITextStatistic" /> objects that contain the statistic results.
            </summary><returns>The list of <see cref="T:ActiproSoftware.Text.ITextStatistic" /> objects that contain the statistic results.</returns></member><member name="P:ActiproSoftware.Text.ITextStatistics.AverageLettersPerWord"><summary>
            Gets the average number of letters per word.
            </summary><value>The average number of letters per word.</value></member><member name="P:ActiproSoftware.Text.ITextStatistics.AverageSyllablesPerWord"><summary>
            Gets the average number of syllables per word.
            </summary><value>The average number of syllables per word.</value></member><member name="P:ActiproSoftware.Text.ITextStatistics.AverageWordsPerSentence"><summary>
            Gets the average number of words per sentence.
            </summary><value>The average number of words per sentence.</value></member><member name="P:ActiproSoftware.Text.ITextStatistics.Characters"><summary>
            Gets the number of characters in the text.
            </summary><value>The number of characters in the text.</value></member><member name="P:ActiproSoftware.Text.ITextStatistics.Consonants"><summary>
            Gets the number of consonants in the text.
            </summary><value>The number of consonants in the text.</value></member><member name="P:ActiproSoftware.Text.ITextStatistics.FleschKincaidGradeLevel"><summary>
            Gets the Flesch-Kincaid grade level, which indicates the number of years of education required to understand the text.
            </summary><remarks>
            A grade level of <c>7.1</c> indicates that an individual with about <c>7</c> years of education could understand the text.
            </remarks></member><member name="P:ActiproSoftware.Text.ITextStatistics.FleschReadingEaseScore"><summary>
            Gets the Flesch reading ease score in the range of <c>0</c> to <c>100</c>, which indicates how readable the text is.
            </summary><remarks>
            Scores of 90-100 are considered easily understandable by an average 5th grader. 
            Scores of 60-70 are considered easily understandable by 8th and 9th grade students.
            Scores of 0-30 are best understood by college graduates.
            </remarks></member><member name="P:ActiproSoftware.Text.ITextStatistics.Letters"><summary>
            Gets the number of letters in the text.
            </summary><value>The number of letters in the text.</value></member><member name="P:ActiproSoftware.Text.ITextStatistics.Lines"><summary>
            Gets the number of lines in the text.
            </summary><value>The number of lines in the text.</value></member><member name="P:ActiproSoftware.Text.ITextStatistics.NonWhitespaceCharacters"><summary>
            Gets the number of non-whitespace characters in the text.
            </summary><value>The number of non-whitespace characters in the text.</value></member><member name="P:ActiproSoftware.Text.ITextStatistics.NonWhitespaceLines"><summary>
            Gets the number of non-whitespace lines in the text.
            </summary><value>The number of non-whitespace lines in the text.</value></member><member name="P:ActiproSoftware.Text.ITextStatistics.Sentences"><summary>
            Gets the number of sentences in the text.
            </summary><value>The number of sentences in the text.</value></member><member name="P:ActiproSoftware.Text.ITextStatistics.Syllables"><summary>
            Gets the number of syllables in the text.
            </summary><value>The number of syllables in the text.</value></member><member name="P:ActiproSoftware.Text.ITextStatistics.Vowels"><summary>
            Gets the number of vowels in the text.
            </summary><value>The number of vowels in the text.</value></member><member name="P:ActiproSoftware.Text.ITextStatistics.WhitespaceCharacters"><summary>
            Gets the number of whitespace characters in the text.
            </summary><value>The number of whitespace characters in the text.</value></member><member name="P:ActiproSoftware.Text.ITextStatistics.WhitespaceLines"><summary>
            Gets the number of whitespace lines in the text.
            </summary><value>The number of whitespace lines in the text.</value></member><member name="P:ActiproSoftware.Text.ITextStatistics.Words"><summary>
            Gets the number of words in the text.
            </summary><value>The number of words in the text.</value></member><member name="T:ActiproSoftware.Text.ITextStatisticsFactory"><summary>
            Provides the base requirements for a factory capable of creating <see cref="T:ActiproSoftware.Text.ITextStatistics" /> objects.
            </summary><remarks>
            This interface type can be registered with an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> using the 
            <see cref="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService(System.Object,System.Object)" /> method.
            Once an object that implements this interface is registered with the language for this interface type, its features can be used by the language.
            </remarks></member><member name="M:ActiproSoftware.Text.ITextStatisticsFactory.CreateStatistics(System.String)"><summary>
            Creates an <see cref="T:ActiproSoftware.Text.ITextStatistics" /> for the specified text.
            </summary><param name="text">The text to examine.</param><returns>The <see cref="T:ActiproSoftware.Text.ITextStatistics" /> that was created.</returns></member><member name="T:ActiproSoftware.Text.ITextVersion"><summary>
            Provides the base requirements for a version of an <see cref="T:ActiproSoftware.Text.ITextDocument" />.
            </summary></member><member name="M:ActiproSoftware.Text.ITextVersion.CreateRange(System.Int32,System.Int32)"><summary>
            Creates an <see cref="T:ActiproSoftware.Text.ITextVersionRange" /> that stores data about a text range in this version and can be used to translate to other versions.
            </summary><param name="startOffset">The start offset in the range.</param><param name="length">The length of the range.</param><returns>An <see cref="T:ActiproSoftware.Text.ITextVersionRange" /> that stores data about a text range in this version and can be used to translate to other versions.</returns></member><member name="M:ActiproSoftware.Text.ITextVersion.CreateRange(System.Int32,System.Int32,ActiproSoftware.Text.TextRangeTrackingModes)"><summary>
            Creates an <see cref="T:ActiproSoftware.Text.ITextVersionRange" /> that stores data about a text range in this version and can be used to translate to other versions.
            </summary><param name="startOffset">The start offset in the range.</param><param name="length">The length of the range.</param><param name="trackingModes">A <see cref="T:ActiproSoftware.Text.TextRangeTrackingModes" /> indicating the tracking modes to use.</param><returns>An <see cref="T:ActiproSoftware.Text.ITextVersionRange" /> that stores data about a text range in this version and can be used to translate to other versions.</returns></member><member name="M:ActiproSoftware.Text.ITextVersion.CreateRange(ActiproSoftware.Text.TextRange)"><summary>
            Creates an <see cref="T:ActiproSoftware.Text.ITextVersionRange" /> that stores data about a text range in this version and can be used to translate to other versions.
            </summary><param name="textRange">A <see cref="T:ActiproSoftware.Text.TextRange" /> indicating the range of text within this version.</param><returns>An <see cref="T:ActiproSoftware.Text.ITextVersionRange" /> that stores data about a text range in this version and can be used to translate to other versions.</returns></member><member name="M:ActiproSoftware.Text.ITextVersion.CreateRange(ActiproSoftware.Text.TextRange,ActiproSoftware.Text.TextRangeTrackingModes)"><summary>
            Creates an <see cref="T:ActiproSoftware.Text.ITextVersionRange" /> that stores data about a text range in this version and can be used to translate to other versions.
            </summary><param name="textRange">A <see cref="T:ActiproSoftware.Text.TextRange" /> indicating the range of text within this version.</param><param name="trackingModes">A <see cref="T:ActiproSoftware.Text.TextRangeTrackingModes" /> indicating the tracking modes to use.</param><returns>An <see cref="T:ActiproSoftware.Text.ITextVersionRange" /> that stores data about a text range in this version and can be used to translate to other versions.</returns></member><member name="M:ActiproSoftware.Text.ITextVersion.CreateRange(ActiproSoftware.Text.TextRange,System.Func{ActiproSoftware.Text.TextRangeTrackingModes})"><summary>
            Creates an <see cref="T:ActiproSoftware.Text.ITextVersionRange" /> that stores data about a text range in this version and can be used to translate to other versions.
            </summary><param name="textRange">A <see cref="T:ActiproSoftware.Text.TextRange" /> indicating the range of text within this version.</param><param name="trackingModesFunc">A function that dynamically returns a <see cref="T:ActiproSoftware.Text.TextRangeTrackingModes" /> indicating the tracking modes to use.</param><returns>An <see cref="T:ActiproSoftware.Text.ITextVersionRange" /> that stores data about a text range in this version and can be used to translate to other versions.</returns></member><member name="P:ActiproSoftware.Text.ITextVersion.Document"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextDocument" /> for which this version applies.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextDocument" /> for which this version applies.</value></member><member name="P:ActiproSoftware.Text.ITextVersion.Length"><summary>
            Gets the number of characters in the version, excluding any carriage-returns but including newlines.
            </summary><value>The number of characters in the version, excluding any carriage-returns but including newlines.</value></member><member name="P:ActiproSoftware.Text.ITextVersion.Next"><summary>
            Gets the next <see cref="T:ActiproSoftware.Text.ITextVersion" /> that occurs after this one.
            </summary><value>The next <see cref="T:ActiproSoftware.Text.ITextVersion" /> that occurs after this one.</value></member><member name="P:ActiproSoftware.Text.ITextVersion.Number"><summary>
            Gets the integer version number associated with this instance.
            </summary><value>The integer version number associated with this instance.</value></member><member name="P:ActiproSoftware.Text.ITextVersion.Operations"><summary>
            Gets the read-only list of <see cref="T:ActiproSoftware.Text.ITextChangeRangedOperation" /> objects that can be applied to this text version to generate the next version.
            </summary><value>The read-only list of <see cref="T:ActiproSoftware.Text.ITextChangeRangedOperation" /> objects that can be applied to this text version to generate the next version.</value><remarks>This property returns <see langword="null" /> for the most current version of a document.</remarks></member><member name="T:ActiproSoftware.Text.ITextVersionRange"><summary>
            Provides the base requirements for a zero-based range of two normalized offset values within a text document 
            that can be translated from one version of the document to another.
            </summary></member><member name="M:ActiproSoftware.Text.ITextVersionRange.Translate(ActiproSoftware.Text.ITextSnapshot)"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> that indicates the text range within the specified target <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </summary><param name="toSnapshot">The target <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.</param><returns>A <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> that indicates the text range within the specified target <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.</returns></member><member name="M:ActiproSoftware.Text.ITextVersionRange.Translate(ActiproSoftware.Text.ITextVersion)"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.TextRange" /> that indicates the text range within the specified target <see cref="T:ActiproSoftware.Text.ITextVersion" />.
            </summary><param name="toVersion">The target <see cref="T:ActiproSoftware.Text.ITextVersion" />.</param><returns>A <see cref="T:ActiproSoftware.Text.TextRange" /> that indicates the text range within the specified target <see cref="T:ActiproSoftware.Text.ITextVersion" />.</returns></member><member name="P:ActiproSoftware.Text.ITextVersionRange.Document"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextDocument" /> for which this text range applies.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextDocument" /> for which this text range applies.</value></member><member name="P:ActiproSoftware.Text.ITextVersionRange.TrackingModes"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.TextRangeTrackingModes" /> indicating the tracking modes to use.
            </summary><value>A <see cref="T:ActiproSoftware.Text.TextRangeTrackingModes" /> indicating the tracking modes to use.</value></member><member name="T:ActiproSoftware.Text.IWordBreakFinder"><summary>
            Provides the base requirements for an object that finds word breaks within an <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </summary><remarks>
            This interface type can be registered with an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> using the 
            <see cref="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService(System.Object,System.Object)" /> method.
            Once an object that implements this interface is registered with the language for this interface type, its features can be used by the language.
            </remarks><seealso cref="T:ActiproSoftware.Text.Implementation.DefaultWordBreakFinder" /></member><member name="M:ActiproSoftware.Text.IWordBreakFinder.FindCurrentWordEnd(ActiproSoftware.Text.TextSnapshotOffset)"><summary>
            Returns the <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> offset of the word end character that occurs at or after the specified start offset.
            </summary><param name="snapshotOffset">The <see cref="T:ActiproSoftware.Text.TextSnapshotOffset" /> from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> offset of the word end character that occurs at or after the specified start offset.</returns></member><member name="M:ActiproSoftware.Text.IWordBreakFinder.FindCurrentWordStart(ActiproSoftware.Text.TextSnapshotOffset)"><summary>
            Returns the <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> offset of the word start character that occurs at or before the specified start offset.
            </summary><param name="snapshotOffset">The <see cref="T:ActiproSoftware.Text.TextSnapshotOffset" /> from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> offset of the word start character that occurs at or before the specified start offset.</returns></member><member name="M:ActiproSoftware.Text.IWordBreakFinder.FindNextWordStart(ActiproSoftware.Text.TextSnapshotOffset)"><summary>
            Returns the <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> offset of the word start character that occurs after the specified start offset.
            </summary><param name="snapshotOffset">The <see cref="T:ActiproSoftware.Text.TextSnapshotOffset" /> from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> offset of the word start character that occurs after the specified start offset.</returns></member><member name="M:ActiproSoftware.Text.IWordBreakFinder.FindPreviousWordStart(ActiproSoftware.Text.TextSnapshotOffset)"><summary>
            Returns the <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> offset of the word start character that occurs before the specified start offset.
            </summary><param name="snapshotOffset">The <see cref="T:ActiproSoftware.Text.TextSnapshotOffset" /> from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> offset of the word start character that occurs before the specified start offset.</returns></member><member name="T:ActiproSoftware.Text.LineTerminator"><summary>
            Specifies a type of line terminator.
            </summary></member><member name="F:ActiproSoftware.Text.LineTerminator.Newline"><summary>
            A single newline character (ASCII value 10).
            This format is typically used on UNIX machines.
            </summary></member><member name="F:ActiproSoftware.Text.LineTerminator.CarriageReturn"><summary>
            A single carriage return character (ASCII value 13).
            This format is typically used on Macintosh machines.
            </summary></member><member name="F:ActiproSoftware.Text.LineTerminator.CarriageReturnNewline"><summary>
            A carriage return character (ASCII value 13) followed by a newline character (ASCII value 10).
            This format is typically used on Windows machines.
            </summary></member><member name="T:ActiproSoftware.Text.NormalizedTextSnapshotRangeCollection"><summary>
            Represents a read-only normalized text snapshot range collection.
            </summary></member><member name="M:ActiproSoftware.Text.NormalizedTextSnapshotRangeCollection.Contains(ActiproSoftware.Text.TextSnapshotRange)"><summary>
            Determines whether the collection contains a specific value.
            </summary><param name="item">The object to locate in the collection.</param><returns><c>true</c> if the item is found in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.NormalizedTextSnapshotRangeCollection.CopyTo(ActiproSoftware.Text.TextSnapshotRange[],System.Int32)"><summary>
            Copies the entire collection to a compatible one-dimensional <c>Array</c>, 
            starting at the specified index of the target array.
            </summary><param name="array">
            The one-dimensional <c>Array</c> that is the destination of the elements copied from the collection. 
            The <c>Array</c> must have zero-based indexing. 
            </param><param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param></member><member name="M:ActiproSoftware.Text.NormalizedTextSnapshotRangeCollection.GetEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object for the entire collection.
            </summary><returns>An <c>IEnumerator</c> object for the entire collection</returns><remarks>
            Enumerators are intended to be used only to read data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para>
            The enumerator does not have exclusive access to the collection.
            </para><para>
            When an enumerator is instantiated, it takes a snapshot of the current state of the collection. 
            If changes are made to the collection, such as adding, modifying or deleting elements, the 
            snapshot gets out of sync and the enumerator throws an <c>InvalidOperationException</c>. 
            Two enumerators instantiated from the same collection at the same time can have 
            different snapshots of the collection.
            </para></remarks></member><member name="M:ActiproSoftware.Text.NormalizedTextSnapshotRangeCollection.GetInverse(ActiproSoftware.Text.TextSnapshotRange)"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.NormalizedTextSnapshotRangeCollection" /> that contains the inverse ranges contained in this instance.
            </summary><param name="targetSnapshotRange">The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> over which to return ranges.</param><returns>A <see cref="T:ActiproSoftware.Text.NormalizedTextSnapshotRangeCollection" /> that contains the inverse ranges contained in this instance.</returns></member><member name="M:ActiproSoftware.Text.NormalizedTextSnapshotRangeCollection.IndexOf(ActiproSoftware.Text.TextSnapshotRange)"><summary>
            Returns the index of the specified item in the collection.
            </summary><param name="item">The item to look for.</param><returns>
            If found, the index where the item is in the collection; otherwise, <c>-1</c>. 
            </returns></member><member name="M:ActiproSoftware.Text.NormalizedTextSnapshotRangeCollection.#ctor"><summary>
            Initializes a new instance of the <c>NormalizedTextSnapshotRangeCollection</c> class.
            </summary></member><member name="M:ActiproSoftware.Text.NormalizedTextSnapshotRangeCollection.#ctor(ActiproSoftware.Text.TextSnapshotRange[])"><summary>
            Initializes a new instance of the <c>NormalizedTextSnapshotRangeCollection</c> class.
            </summary><param name="snapshotRanges">The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> objects to add to the collection.</param></member><member name="M:ActiproSoftware.Text.NormalizedTextSnapshotRangeCollection.#ctor(System.Collections.Generic.IEnumerable{ActiproSoftware.Text.TextSnapshotRange})"><summary>
            Initializes a new instance of the <c>NormalizedTextSnapshotRangeCollection</c> class.
            </summary><param name="snapshotRanges">The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> objects to add to the collection.</param></member><member name="M:ActiproSoftware.Text.NormalizedTextSnapshotRangeCollection.#ctor(System.Collections.Generic.IEnumerable{ActiproSoftware.Text.TextSnapshotRange},System.Boolean)"><summary>
            Initializes a new instance of the <c>NormalizedTextSnapshotRangeCollection</c> class.
            </summary><param name="snapshotRanges">The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> objects to add to the collection.</param><param name="mergeSequentialRanges">Whether to merge sequential ranges.</param></member><member name="P:ActiproSoftware.Text.NormalizedTextSnapshotRangeCollection.Count"><summary>
            Gets the number of elements contained in the collection.
            </summary><value>The number of elements contained in the collection.</value></member><member name="P:ActiproSoftware.Text.NormalizedTextSnapshotRangeCollection.Item(System.Int32)"><summary>
            Gets or sets the item at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>NormalizedTextSnapshotRangeCollection</c> class. 
            </para></summary><param name="index">The index of the item to return.</param><value>
            The item at the specified index. 
            </value></member><member name="T:ActiproSoftware.Text.SyntaxLanguageChangedEventArgs"><summary>
            Event arguments for the <see cref="T:ActiproSoftware.Text.ICodeDocument" />.<see cref="E:ActiproSoftware.Text.ICodeDocument.LanguageChanged" /> event.
            </summary></member><member name="M:ActiproSoftware.Text.SyntaxLanguageChangedEventArgs.#ctor(ActiproSoftware.Text.ISyntaxLanguage,ActiproSoftware.Text.ISyntaxLanguage)"><summary>
            Initializes a new instance of the <c>SyntaxLanguageChangedEventArgs</c> class.
            </summary><param name="oldLanguage">The <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> that was in use before the change.</param><param name="newLanguage">The <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> that is in use after the change.</param></member><member name="P:ActiproSoftware.Text.SyntaxLanguageChangedEventArgs.NewLanguage"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> is in use after the change.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> is in use after the change.</value></member><member name="P:ActiproSoftware.Text.SyntaxLanguageChangedEventArgs.OldLanguage"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> that was in use before the change.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> that was in use before the change.</value></member><member name="T:ActiproSoftware.Text.TextChangeOffsetDelta"><summary>
            Specifies how an <see cref="T:ActiproSoftware.Text.ITextChange" />'s <see cref="T:ActiproSoftware.Text.ITextChangeOperation" /> offsets are modified based on previously-added operations.
            </summary></member><member name="F:ActiproSoftware.Text.TextChangeOffsetDelta.None"><summary>
            No offset delta is applied to operations.
            </summary></member><member name="F:ActiproSoftware.Text.TextChangeOffsetDelta.SequentialOnly"><summary>
            An offset delta is tracked based on the net length change of previously-added operations.
            This offset delta is applied to the start offset of any newly-added operation.
            <para>
            It is important to note that this option cannot be used if any newly-added operation will be made before a previously-added operation.
            </para><para>
            This option is extremely handy when sequentially adding operations based on the original snapshot's offsets
            since it automatically applies the offset delta to ensure that operations are updating the correct text range.
            </para></summary></member><member name="T:ActiproSoftware.Text.TextChangeTypes"><summary>
            Provides access to the built-in <see cref="T:ActiproSoftware.Text.ITextChangeType" /> instances, that indicate the type of <see cref="T:ActiproSoftware.Text.ITextChange" /> made.
            </summary></member><member name="P:ActiproSoftware.Text.TextChangeTypes.AutoComplete"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for an IntelliPrompt auto-complete action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for an IntelliPrompt auto-complete action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.AutoCorrect"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for an auto-correct action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for an auto-correct action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.AutoFormat"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for an auto-format action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for an auto-format action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.AutoIndent"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for an auto-indent action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for an auto-indent action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.AutoReplace"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for an auto-replace action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for an auto-replace action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.Backspace"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for the press of the Backspace key.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for the press of the Backspace key.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.ChangeCase"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a character casing change action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a character casing change action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.CommentLines"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a comment lines action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a comment lines action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.ConvertSpacesToTabs"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a convert spaces to tabs action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a convert spaces to tabs action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.ConvertTabsToSpaces"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a convert tabs to spaces action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a convert tabs to spaces action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.Custom"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a custom change type.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a custom change type.</value><remarks>
            Instead of using this <see cref="T:ActiproSoftware.Text.ITextChangeType" />, it really is best to create your own custom
            <see cref="T:ActiproSoftware.Text.ITextChangeType" /> with the proper name.
            </remarks></member><member name="P:ActiproSoftware.Text.TextChangeTypes.Cut"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a cut to the clipboard action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a cut to the clipboard action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.Delete"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a deletion action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a deletion action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.DragAndDrop"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a drag and drop action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a drag and drop action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.Duplicate"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a duplicating a selection.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a duplicating a selection.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.Enter"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for the press of the Enter key.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for the press of the Enter key.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.HeaderAndFooterChange"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for the change of a snapshot's header and footer.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for the change of a snapshot's header and footer.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.Indent"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for an indent action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for an indent action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.InsertCodeSnippetTemplate"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a code snippet template insertion action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a code snippet template insertion action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.InsertFile"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for an insert file action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for an insert file action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.MoveSelectedLinesDown"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a move selected lines down action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a move selected lines down action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.MoveSelectedLinesUp"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a move selected lines up action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a move selected lines up action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.OpenLine"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for an open line action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for an open line action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.Outdent"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for an outdent action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for an outdent action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.Paste"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a paste from the clipboard action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a paste from the clipboard action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.Replace"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a replace action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a replace action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.ReplaceAll"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a replace all action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a replace all action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.SpellingChange"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a spelling change action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a spelling change action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.TextReplacement"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a text replacement action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a text replacement action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.ToggleCase"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a toggle case action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a toggle case action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.TransposeCharacters"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a transpose characters action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a transpose characters action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.TransposeLines"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a transpose lines action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a transpose lines action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.TransposeWords"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a transpose words action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a transpose words action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.TrimTrailingWhitespace"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a trim trailing whitespace action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a trim trailing whitespace action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.Typing"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a typing action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a typing action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.UncommentLines"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for an uncomment lines action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for an uncomment lines action.</value></member><member name="P:ActiproSoftware.Text.TextChangeTypes.UpdateCodeSnippetTemplateFields"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a code snippet template update fields action.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChangeType" /> for a code snippet template update fields action.</value></member><member name="T:ActiproSoftware.Text.TextFormatMode"><summary>
            Specifies whether to format text over an entire snapshot or only for specified ranges.
            </summary></member><member name="F:ActiproSoftware.Text.TextFormatMode.All"><summary>
            Format the entire snapshot.
            </summary></member><member name="F:ActiproSoftware.Text.TextFormatMode.Ranges"><summary>
            Format the specified ranges, which generally correspond to a view's selection.
            </summary></member><member name="T:ActiproSoftware.Text.TextOffsetTrackingMode"><summary>
            Specifies how a text offset is updated by text change operations that occur around it.
            </summary></member><member name="F:ActiproSoftware.Text.TextOffsetTrackingMode.Negative"><summary>
            The text offset tends to move in a negative (towards document start) direction when text change operations occur next to it.
            <para>
            If the text offset is <c>3</c>, and a single character is inserted at offset <c>2</c>, 
            the text offset slides forward a character and becomes <c>4</c>.
            </para><para>
            If the text offset is <c>3</c>, and a single character is inserted at offset <c>3</c>, 
            the text offset remains <c>3</c>.
            </para><para>
            If the text offset is <c>3</c>, and the text range <c>{2,4}</c> is replaced with text <c>Foo</c>,
            the text offset moves to <c>2</c>, which is the start of the text change operation.
            </para></summary></member><member name="F:ActiproSoftware.Text.TextOffsetTrackingMode.Positive"><summary>
            The text offset tends to move in a positive (towards document end) direction when text change operations occur next to it.
            <para>
            If the text offset is <c>3</c>, and a single character is inserted at offset <c>2</c>, 
            the text offset slides forward a character and becomes <c>4</c>.
            </para><para>
            If the text offset is <c>3</c>, and a single character is inserted at offset <c>3</c>, 
            the text offset slides forward a character and becomes <c>4</c>.
            </para><para>
            If the text offset is <c>3</c>, and the text range <c>{2,4}</c> is replaced with text <c>Foo</c>,
            the text offset moves to <c>5</c>, which is the end of the text change operation's insertion.
            </para></summary></member><member name="T:ActiproSoftware.Text.TextPosition"><summary>
            Represents an ordered pair of zero-based line and character index values that defines a position within the lines of an <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </summary></member><member name="M:ActiproSoftware.Text.TextPosition.Clone"><summary>
            Creates a copy of this <see cref="T:ActiproSoftware.Text.TextPosition" /> object.
            </summary><returns>The <see cref="T:ActiproSoftware.Text.TextPosition" /> object that this method creates.</returns></member><member name="M:ActiproSoftware.Text.TextPosition.CompareTo(System.Object)"><summary>
            Compares the current instance with another object of the same type.
            </summary><param name="obj">An object to compare with this instance.</param><returns>
            A 32-bit signed integer that indicates the relative order of the comparands.
            </returns></member><member name="M:ActiproSoftware.Text.TextPosition.CompareTo(ActiproSoftware.Text.TextPosition)"><summary>
            Compares the current instance with another <see cref="T:ActiproSoftware.Text.TextPosition" />.
            </summary><param name="position">A <see cref="T:ActiproSoftware.Text.TextPosition" /> to compare with this instance.</param><returns>
            A 32-bit signed integer that indicates the relative order of the comparands.
            </returns></member><member name="M:ActiproSoftware.Text.TextPosition.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.Text.TextPosition.First(ActiproSoftware.Text.TextPosition,ActiproSoftware.Text.TextPosition)"><summary>
            Returns the <see cref="T:ActiproSoftware.Text.TextPosition" /> that comes first.
            </summary><param name="position1">The first <see cref="T:ActiproSoftware.Text.TextPosition" /> to compare.</param><param name="position2">The second <see cref="T:ActiproSoftware.Text.TextPosition" /> to compare.</param><returns>The <see cref="T:ActiproSoftware.Text.TextPosition" /> that comes first.</returns></member><member name="M:ActiproSoftware.Text.TextPosition.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.Text.TextPosition.Last(ActiproSoftware.Text.TextPosition,ActiproSoftware.Text.TextPosition)"><summary>
            Returns the <see cref="T:ActiproSoftware.Text.TextPosition" /> that comes last.
            </summary><param name="position1">The first <see cref="T:ActiproSoftware.Text.TextPosition" /> to compare.</param><param name="position2">The second <see cref="T:ActiproSoftware.Text.TextPosition" /> to compare.</param><returns>The <see cref="T:ActiproSoftware.Text.TextPosition" /> that comes last.</returns></member><member name="M:ActiproSoftware.Text.TextPosition.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.Text.TextPosition.#ctor(System.Int32,System.Int32,System.Boolean)"><summary>
            Initializes a new instance of the <c>TextPosition</c> class with the specified line and character values.
            </summary><param name="line">The line of the position.</param><param name="character">The character of the position.</param><param name="hasFarAffinity">
            Whether the position has affinity for the far side, which is used when the position specifies the place 
            where a view line is wrapped to a second view line.
            The default value is <c>false</c>.
            </param></member><member name="M:ActiproSoftware.Text.TextPosition.#ctor(ActiproSoftware.Text.TextPosition,System.Boolean)"><summary>
            Initializes a new instance of the <c>TextPosition</c> class with the specified <see cref="T:ActiproSoftware.Text.TextPosition" /> values.
            </summary><param name="position">The <see cref="T:ActiproSoftware.Text.TextPosition" /> specifying line and character values.</param><param name="hasFarAffinity">
            Whether the position has affinity for the far side, which is used when the position specifies the place 
            where a view line is wrapped to a second view line.
            The default value is <c>false</c>.
            </param></member><member name="P:ActiproSoftware.Text.TextPosition.Character"><summary>
            Gets the zero-based character of this <see cref="T:ActiproSoftware.Text.TextPosition" />.
            </summary><value>The zero-based character of this <see cref="T:ActiproSoftware.Text.TextPosition" />.</value><remarks>
            This property is zero-based.  When displaying the value in UI, use the <see cref="P:ActiproSoftware.Text.TextPosition.DisplayCharacter" /> property instead,
            which adds <c>1</c> to this value to make it one-based.
            </remarks></member><member name="P:ActiproSoftware.Text.TextPosition.DisplayCharacter"><summary>
            Gets the one-based character of this <see cref="T:ActiproSoftware.Text.TextPosition" />, which is better for display than use of the <see cref="P:ActiproSoftware.Text.TextPosition.Character" /> property.
            </summary><value>The one-based character of this <see cref="T:ActiproSoftware.Text.TextPosition" />, which is better for display than use of the <see cref="P:ActiproSoftware.Text.TextPosition.Character" /> property.</value></member><member name="P:ActiproSoftware.Text.TextPosition.DisplayLine"><summary>
            Gets the one-based line of this <see cref="T:ActiproSoftware.Text.TextPosition" />, which is better for display than use of the <see cref="P:ActiproSoftware.Text.TextPosition.Line" /> property.
            </summary><value>The one-based line of this <see cref="T:ActiproSoftware.Text.TextPosition" />, which is better for display than use of the <see cref="P:ActiproSoftware.Text.TextPosition.Line" /> property.</value></member><member name="P:ActiproSoftware.Text.TextPosition.HasFarAffinity"><summary> 
            Gets whether the position has affinity for the far side. 
            </summary><value><c>true</c> if the position has affinity for the far side; otherwise, <c>false</c>. 
            The default value is <c>false</c>. 
            </value><remarks> 
            This property is used in word wrap scenarios where the position is the last position in a view line that gets wrapped to another view line. 
            In that scenario, the position could refer to both the end of the first line and the beginning of the second line. 
            When this property is <c>true</c>, the position will refer to the beginning of the second line. 
            </remarks></member><member name="P:ActiproSoftware.Text.TextPosition.IsEmpty"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextPosition" /> is empty.
            </summary><value><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextPosition" /> is empty; otherwise, <c>false</c>.</value></member><member name="P:ActiproSoftware.Text.TextPosition.Line"><summary>
            Gets the zero-based line of this <see cref="T:ActiproSoftware.Text.TextPosition" />.
            </summary><value>The zero-based line of this <see cref="T:ActiproSoftware.Text.TextPosition" />.</value><remarks>
            This property is zero-based.  When displaying the value in UI, use the <see cref="P:ActiproSoftware.Text.TextPosition.DisplayCharacter" /> property instead,
            which adds <c>1</c> to this value to make it one-based.
            </remarks></member><member name="F:ActiproSoftware.Text.TextPosition.Empty"><summary>
            Returns an empty <see cref="T:ActiproSoftware.Text.TextPosition" />.
            </summary><value>A <see cref="T:ActiproSoftware.Text.TextPosition" /> that is empty.</value></member><member name="F:ActiproSoftware.Text.TextPosition.Zero"><summary>
            Returns a <see cref="T:ActiproSoftware.Text.TextPosition" /> with line and character values of <c>0</c>.
            </summary><value>A <see cref="T:ActiproSoftware.Text.TextPosition" /> with line and character values of <c>0</c>.</value></member><member name="F:ActiproSoftware.Text.TextPosition.MaxCharacter"><summary>
            Gets the maximum character value for a position.
            </summary><value>The maximum character value for a position.</value></member><member name="F:ActiproSoftware.Text.TextPosition.MaxLine"><summary>
            Gets the maximum line value for a position.
            </summary><value>The maximum line value for a position.</value></member><member name="T:ActiproSoftware.Text.TextPositionRange"><summary>
            Represents a range of two <see cref="T:ActiproSoftware.Text.TextPosition" /> values within the lines of an <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </summary></member><member name="M:ActiproSoftware.Text.TextPositionRange.BordersOn(ActiproSoftware.Text.TextPosition)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextPositionRange" /> borders on the specified <see cref="T:ActiproSoftware.Text.TextPosition" />.
            </summary><param name="position">The <see cref="T:ActiproSoftware.Text.TextPosition" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextPositionRange" /> borders on the specified <see cref="T:ActiproSoftware.Text.TextPosition" />; otherwise, <c>false</c>.
            </returns><remarks>
            This method checks to see if the specified <see cref="T:ActiproSoftware.Text.TextPosition" /> is either the <see cref="P:ActiproSoftware.Text.TextPositionRange.StartPosition" /> or <see cref="P:ActiproSoftware.Text.TextPositionRange.EndPosition" />.
            </remarks></member><member name="M:ActiproSoftware.Text.TextPositionRange.BordersOn(ActiproSoftware.Text.TextPositionRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextPositionRange" /> borders on, but does not overlap the specified <see cref="T:ActiproSoftware.Text.TextPositionRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.Text.TextPositionRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextPositionRange" /> borders on, but does not overlap the specified <see cref="T:ActiproSoftware.Text.TextPositionRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.TextPositionRange.Clone"><summary>
            Creates a copy of this <see cref="T:ActiproSoftware.Text.TextPositionRange" /> object.
            </summary><returns>The <see cref="T:ActiproSoftware.Text.TextPositionRange" /> object that this method creates.</returns></member><member name="M:ActiproSoftware.Text.TextPositionRange.Contains(ActiproSoftware.Text.TextPosition)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextPositionRange" /> contains the specified <see cref="T:ActiproSoftware.Text.TextPosition" />.
            </summary><param name="position">The <see cref="T:ActiproSoftware.Text.TextPosition" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextPositionRange" /> contains the specified <see cref="T:ActiproSoftware.Text.TextPosition" />; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the <see cref="T:ActiproSoftware.Text.TextPosition" /> falls on the <see cref="P:ActiproSoftware.Text.TextPositionRange.LastPosition" /><see cref="T:ActiproSoftware.Text.TextPosition" />
            since this method indicates if the <see cref="T:ActiproSoftware.Text.TextPosition" /> is encompassed by the <see cref="T:ActiproSoftware.Text.TextPositionRange" />.
            </remarks></member><member name="M:ActiproSoftware.Text.TextPositionRange.Contains(ActiproSoftware.Text.TextPositionRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextPositionRange" /> contains the specified <see cref="T:ActiproSoftware.Text.TextPositionRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.Text.TextPositionRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextPositionRange" /> contains the specified <see cref="T:ActiproSoftware.Text.TextPositionRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.TextPositionRange.CreateCollection(ActiproSoftware.Text.TextPositionRange,System.Boolean)"><summary>
            Creates a collection containing a single <see cref="T:ActiproSoftware.Text.TextPositionRange" /> object.
            </summary><param name="positionRange">The single position range.</param><param name="isBlock">Whether the position range is a special rectangular block.</param><returns>The collection that was created.</returns></member><member name="M:ActiproSoftware.Text.TextPositionRange.CreateCollection(System.Collections.Generic.IEnumerable{ActiproSoftware.Text.TextPositionRange},System.Int32)"><summary>
            Creates a collection of <see cref="T:ActiproSoftware.Text.TextPositionRange" /> objects.
            </summary><param name="positionRanges">The non-overlapping position ranges, in sorted order.</param><param name="primaryIndex">The primary range index.</param><returns>The collection that was created.</returns></member><member name="M:ActiproSoftware.Text.TextPositionRange.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.Text.TextPositionRange.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.Text.TextPositionRange.IntersectsWith(ActiproSoftware.Text.TextPosition)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextPositionRange" /> intersects with the specified <see cref="T:ActiproSoftware.Text.TextPosition" />.
            </summary><param name="position">The <see cref="T:ActiproSoftware.Text.TextPosition" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextPositionRange" /> intersects with the specified <see cref="T:ActiproSoftware.Text.TextPosition" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.TextPositionRange.IntersectsWith(ActiproSoftware.Text.TextPositionRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextPositionRange" /> intersects with the specified <see cref="T:ActiproSoftware.Text.TextPositionRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.Text.TextPositionRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextPositionRange" /> intersects with the specified <see cref="T:ActiproSoftware.Text.TextPositionRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.TextPositionRange.Normalize"><summary>
            Normalizes the range and ensures that the <see cref="P:ActiproSoftware.Text.TextPositionRange.StartPosition" /> occurs at or before the <see cref="P:ActiproSoftware.Text.TextPositionRange.EndPosition" /><see cref="T:ActiproSoftware.Text.TextPosition" />.
            </summary></member><member name="M:ActiproSoftware.Text.TextPositionRange.OverlapsWith(ActiproSoftware.Text.TextPositionRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextPositionRange" /> overlaps with, or crosses, the specified <see cref="T:ActiproSoftware.Text.TextPositionRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.Text.TextPositionRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextPositionRange" /> overlaps with, or crosses, the specified <see cref="T:ActiproSoftware.Text.TextPositionRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.TextPositionRange.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.Text.TextPositionRange.Union(ActiproSoftware.Text.TextPositionRange,ActiproSoftware.Text.TextPositionRange)"><summary>
            Returns the normalized union of two <see cref="T:ActiproSoftware.Text.TextPositionRange" /> objects.
            </summary><param name="range1">The first <see cref="T:ActiproSoftware.Text.TextPositionRange" /> to examine.</param><param name="range2">The second <see cref="T:ActiproSoftware.Text.TextPositionRange" /> to examine.</param><returns>
            The normalized union of two <see cref="T:ActiproSoftware.Text.TextPositionRange" /> objects.
            </returns></member><member name="M:ActiproSoftware.Text.TextPositionRange.#ctor(ActiproSoftware.Text.TextPosition)"><summary>
            Initializes a new instance of the <c>TextPositionRange</c> class with the specified <see cref="T:ActiproSoftware.Text.TextPosition" /> value for both start and end.
            </summary><param name="position">The <see cref="T:ActiproSoftware.Text.TextPosition" /> to use as the start and end of the range.</param></member><member name="M:ActiproSoftware.Text.TextPositionRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)"><summary>
            Initializes a new instance of the <c>TextPositionRange</c> class with the specified <see cref="T:ActiproSoftware.Text.TextPosition" /> values.
            </summary><param name="startLine">The line of the start <see cref="T:ActiproSoftware.Text.TextPosition" />in the range.</param><param name="startCharacter">The character of the start <see cref="T:ActiproSoftware.Text.TextPosition" />in the range.</param><param name="endLine">The line of the end <see cref="T:ActiproSoftware.Text.TextPosition" />in the range.</param><param name="endCharacter">The character of the end <see cref="T:ActiproSoftware.Text.TextPosition" />in the range.</param></member><member name="M:ActiproSoftware.Text.TextPositionRange.#ctor(ActiproSoftware.Text.TextPosition,ActiproSoftware.Text.TextPosition)"><summary>
            Initializes a new instance of the <c>TextPositionRange</c> class with the specified <see cref="T:ActiproSoftware.Text.TextPosition" /> values.
            </summary><param name="startPosition">The start <see cref="T:ActiproSoftware.Text.TextPosition" /> in the range.</param><param name="endPosition">The end <see cref="T:ActiproSoftware.Text.TextPosition" />in the range.</param></member><member name="P:ActiproSoftware.Text.TextPositionRange.Empty"><summary>
            Returns an empty <see cref="T:ActiproSoftware.Text.TextPositionRange" />.
            </summary><value>A <see cref="T:ActiproSoftware.Text.TextPositionRange" /> that is empty.</value></member><member name="P:ActiproSoftware.Text.TextPositionRange.EndPosition"><summary>
            Gets the end <see cref="T:ActiproSoftware.Text.TextPosition" /> in the range.
            </summary><value>The end <see cref="T:ActiproSoftware.Text.TextPosition" /> in the range.</value><remarks>
            The end <see cref="T:ActiproSoftware.Text.TextPosition" /> may occur before the start <see cref="T:ActiproSoftware.Text.TextPosition" /> if the range is not normalized.
            The <see cref="P:ActiproSoftware.Text.TextPositionRange.IsNormalized" /> property indicates if the range is normalized.
            To get the normalized first <see cref="T:ActiproSoftware.Text.TextPosition" /> in the range, use the <see cref="P:ActiproSoftware.Text.TextPositionRange.FirstPosition" /> property.
            To get the normalized last <see cref="T:ActiproSoftware.Text.TextPosition" /> in the range, use the <see cref="P:ActiproSoftware.Text.TextPositionRange.LastPosition" /> property.
            </remarks></member><member name="P:ActiproSoftware.Text.TextPositionRange.FirstPosition"><summary>
            Gets the first <see cref="T:ActiproSoftware.Text.TextPosition" /> in the range.
            </summary><value>The first <see cref="T:ActiproSoftware.Text.TextPosition" /> in the range.</value><remarks>
            This property returns either the <see cref="P:ActiproSoftware.Text.TextPositionRange.StartPosition" /> or <see cref="P:ActiproSoftware.Text.TextPositionRange.EndPosition" /> property, whichever comes first.
            </remarks></member><member name="P:ActiproSoftware.Text.TextPositionRange.IsEmpty"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextPositionRange" /> is empty.
            </summary><value><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextPositionRange" /> is empty; otherwise, <c>false</c>.</value></member><member name="P:ActiproSoftware.Text.TextPositionRange.IsNormalized"><summary>
            Gets whether the range is normalized (<see cref="P:ActiproSoftware.Text.TextPositionRange.StartPosition" /> occurs at or before the <see cref="P:ActiproSoftware.Text.TextPositionRange.EndPosition" />).
            </summary><value><c>true</c> if the range is normalized; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.TextPositionRange.IsZeroLength"><summary>
            Gets whether the range has a zero length.
            </summary><value><c>true</c> if the range has a zero length; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.TextPositionRange.LastPosition"><summary>
            Gets the last <see cref="T:ActiproSoftware.Text.TextPosition" /> in the range.
            </summary><value>The last <see cref="T:ActiproSoftware.Text.TextPosition" /> in the range.</value><remarks>
            This property returns either the <see cref="P:ActiproSoftware.Text.TextPositionRange.StartPosition" /> or <see cref="P:ActiproSoftware.Text.TextPositionRange.EndPosition" /> property, whichever comes last.
            </remarks></member><member name="P:ActiproSoftware.Text.TextPositionRange.Lines"><summary>
            Gets the number of lines encompassed by the <see cref="T:ActiproSoftware.Text.TextPositionRange" />.
            </summary><value>The number of lines encompassed by the <see cref="T:ActiproSoftware.Text.TextPositionRange" />.</value></member><member name="P:ActiproSoftware.Text.TextPositionRange.NormalizedTextPositionRange"><summary>
            Gets a normalized version of this <see cref="T:ActiproSoftware.Text.TextPositionRange" /> without actually modifying this instance.
            </summary><value>A normalized version of this <see cref="T:ActiproSoftware.Text.TextPositionRange" /> without actually modifying this instance.</value></member><member name="P:ActiproSoftware.Text.TextPositionRange.StartPosition"><summary>
            Gets the start <see cref="T:ActiproSoftware.Text.TextPosition" /> in the range.
            </summary><value>The start <see cref="T:ActiproSoftware.Text.TextPosition" /> in the range.</value><remarks>
            The start <see cref="T:ActiproSoftware.Text.TextPosition" /> may occur after the end <see cref="T:ActiproSoftware.Text.TextPosition" /> if the range is not normalized.
            The <see cref="P:ActiproSoftware.Text.TextPositionRange.IsNormalized" /> property indicates if the range is normalized.
            To get the normalized first <see cref="T:ActiproSoftware.Text.TextPosition" /> in the range, use the <see cref="P:ActiproSoftware.Text.TextPositionRange.FirstPosition" /> property.
            To get the normalized last <see cref="T:ActiproSoftware.Text.TextPosition" /> in the range, use the <see cref="P:ActiproSoftware.Text.TextPositionRange.LastPosition" /> property.
            </remarks></member><member name="T:ActiproSoftware.Text.TextRange"><summary>
            Represents a zero-based range of two offset values within a text document.
            </summary></member><member name="M:ActiproSoftware.Text.TextRange.BordersOn(System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextRange" /> borders on the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextRange" /> borders on the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method checks to see if the specified offset is either the <see cref="P:ActiproSoftware.Text.TextRange.StartOffset" /> or <see cref="P:ActiproSoftware.Text.TextRange.EndOffset" />.
            </remarks></member><member name="M:ActiproSoftware.Text.TextRange.BordersOn(ActiproSoftware.Text.TextRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextRange" /> borders on, but does not overlap the specified <see cref="T:ActiproSoftware.Text.TextRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.Text.TextRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextRange" /> borders on, but does not overlap the specified <see cref="T:ActiproSoftware.Text.TextRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.TextRange.Clone"><summary>
            Creates a copy of this <see cref="T:ActiproSoftware.Text.TextRange" /> object.
            </summary><returns>The <see cref="T:ActiproSoftware.Text.TextRange" /> object that this method creates.</returns></member><member name="M:ActiproSoftware.Text.TextRange.CompareTo(ActiproSoftware.Text.TextRange)"><summary>
            Compares the current instance with another object of the same type.
            </summary><param name="textRange">A <see cref="T:ActiproSoftware.Text.TextRange" /> to compare with this instance.</param><returns>
            A 32-bit signed integer that indicates the relative order of the comparands.
            </returns></member><member name="M:ActiproSoftware.Text.TextRange.Contains(System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextRange" /> contains the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextRange" /> contains the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the offset falls on the <see cref="P:ActiproSoftware.Text.TextRange.LastOffset" /> offset
            since this method indicates if the offset is encompassed by the <see cref="T:ActiproSoftware.Text.TextRange" />.
            </remarks></member><member name="M:ActiproSoftware.Text.TextRange.Contains(ActiproSoftware.Text.TextRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextRange" /> contains the specified <see cref="T:ActiproSoftware.Text.TextRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.Text.TextRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextRange" /> contains the specified <see cref="T:ActiproSoftware.Text.TextRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.TextRange.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.Text.TextRange.FromSpan(System.Int32,System.Int32)"><summary>
            Returns a <see cref="T:ActiproSoftware.Text.TextRange" /> that covers the specified offset and length.
            </summary><param name="offset">The start offset.</param><param name="length">The length of the range.</param><returns>The <see cref="T:ActiproSoftware.Text.TextRange" /> that was created.</returns></member><member name="M:ActiproSoftware.Text.TextRange.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.Text.TextRange.Intersect(ActiproSoftware.Text.TextRange,ActiproSoftware.Text.TextRange)"><summary>
            Returns the intersection of two <see cref="T:ActiproSoftware.Text.TextRange" /> objects.
            </summary><param name="range1">The first <see cref="T:ActiproSoftware.Text.TextRange" /> to examine.</param><param name="range2">The second <see cref="T:ActiproSoftware.Text.TextRange" /> to examine.</param><returns>
            The intersection of two <see cref="T:ActiproSoftware.Text.TextRange" /> objects.
            </returns></member><member name="M:ActiproSoftware.Text.TextRange.IntersectsWith(System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextRange" /> intersects with the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextRange" /> intersects with the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns whether the specified offset borders on or lies within the <see cref="T:ActiproSoftware.Text.TextRange" />.
            </remarks></member><member name="M:ActiproSoftware.Text.TextRange.IntersectsWith(ActiproSoftware.Text.TextRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextRange" /> intersects with the specified <see cref="T:ActiproSoftware.Text.TextRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.Text.TextRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextRange" /> intersects with the specified <see cref="T:ActiproSoftware.Text.TextRange" />; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns whether the specified <see cref="T:ActiproSoftware.Text.TextRange" /> borders on or overlaps the <see cref="T:ActiproSoftware.Text.TextRange" />.
            </remarks></member><member name="M:ActiproSoftware.Text.TextRange.IntersectsWith(ActiproSoftware.Text.TextRange,System.Boolean,System.Boolean)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextRange" /> intersects with the specified <see cref="T:ActiproSoftware.Text.TextRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.Text.TextRange" /> to examine.</param><param name="includeFirstEdge">Whether to return <c>true</c> if the specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> borders on the leading (first) edge of this <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.</param><param name="includeLastEdge">Whether to return <c>true</c> if the specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> borders on the trailing (last) edge of this <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextRange" /> intersects with the specified <see cref="T:ActiproSoftware.Text.TextRange" />; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns whether the specified <see cref="T:ActiproSoftware.Text.TextRange" /> borders on or overlaps the <see cref="T:ActiproSoftware.Text.TextRange" />.
            </remarks></member><member name="M:ActiproSoftware.Text.TextRange.Normalize"><summary>
            Normalizes the range and ensures that the <see cref="P:ActiproSoftware.Text.TextRange.StartOffset" /> occurs at or before the <see cref="P:ActiproSoftware.Text.TextRange.EndOffset" /> offset.
            </summary></member><member name="M:ActiproSoftware.Text.TextRange.OverlapsWith(ActiproSoftware.Text.TextRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextRange" /> overlaps with, or crosses, the specified <see cref="T:ActiproSoftware.Text.TextRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.Text.TextRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextRange" /> overlaps with, or crosses, the specified <see cref="T:ActiproSoftware.Text.TextRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.TextRange.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.Text.TextRange.Translate(ActiproSoftware.Text.ITextSnapshot,ActiproSoftware.Text.ITextSnapshot,ActiproSoftware.Text.TextRangeTrackingModes)"><summary>
            Translates this text range from one <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> to another in the same <see cref="T:ActiproSoftware.Text.ITextDocument" />.
            </summary><param name="fromSnapshot">The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> to which to text range belongs.</param><param name="toSnapshot">The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that is the target of the translation.</param><param name="trackingModes">A <see cref="T:ActiproSoftware.Text.TextRangeTrackingModes" /> indicating the tracking modes to use.</param><returns>The translated <see cref="T:ActiproSoftware.Text.TextRange" />.</returns></member><member name="M:ActiproSoftware.Text.TextRange.Translate(ActiproSoftware.Text.ITextVersion,ActiproSoftware.Text.ITextVersion,ActiproSoftware.Text.TextRangeTrackingModes)"><summary>
            Translates this text range from one <see cref="T:ActiproSoftware.Text.ITextVersion" /> to another in the same <see cref="T:ActiproSoftware.Text.ITextDocument" />.
            </summary><param name="fromVersion">The <see cref="T:ActiproSoftware.Text.ITextVersion" /> to which to text range belongs.</param><param name="toVersion">The <see cref="T:ActiproSoftware.Text.ITextVersion" /> that is the target of the translation.</param><param name="trackingModes">A <see cref="T:ActiproSoftware.Text.TextRangeTrackingModes" /> indicating the tracking modes to use.</param><returns>The translated <see cref="T:ActiproSoftware.Text.TextRange" />.</returns></member><member name="M:ActiproSoftware.Text.TextRange.Union(ActiproSoftware.Text.TextRange,ActiproSoftware.Text.TextRange)"><summary>
            Returns the normalized union of two <see cref="T:ActiproSoftware.Text.TextRange" /> objects.
            </summary><param name="range1">The first <see cref="T:ActiproSoftware.Text.TextRange" /> to examine.</param><param name="range2">The second <see cref="T:ActiproSoftware.Text.TextRange" /> to examine.</param><returns>
            The normalized union of two <see cref="T:ActiproSoftware.Text.TextRange" /> objects.
            </returns></member><member name="M:ActiproSoftware.Text.TextRange.#ctor(System.Int32)"><summary>
            Initializes a new instance of the <c>TextRange</c> class using the specified offset for both the start and end values.
            </summary><param name="offset">The start and end offset in the range.</param></member><member name="M:ActiproSoftware.Text.TextRange.#ctor(System.Int32,System.Int32)"><summary>
            Initializes a new instance of the <c>TextRange</c> class with the specified offset values.
            </summary><param name="startOffset">The start offset in the range.</param><param name="endOffset">The end offset in the range.</param></member><member name="P:ActiproSoftware.Text.TextRange.AbsoluteLength"><summary>
            Gets the absolute number of characters encompassed by the <see cref="T:ActiproSoftware.Text.TextRange" />.
            </summary><value>The absolute number of characters encompassed by the <see cref="T:ActiproSoftware.Text.TextRange" />.</value><remarks>
            This value will always return a positive length, even if the range is not normalized.
            </remarks></member><member name="P:ActiproSoftware.Text.TextRange.Deleted"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.TextRange" /> that is flagged as deleted.
            </summary><value>A <see cref="T:ActiproSoftware.Text.TextRange" /> that is flagged as deleted.</value></member><member name="P:ActiproSoftware.Text.TextRange.EndOffset"><summary>
            Gets the end offset in the range.
            </summary><value>The end offset in the range.</value><remarks>
            The end offset may occur before the start offset if the range is not normalized.
            The <see cref="P:ActiproSoftware.Text.TextRange.IsNormalized" /> property indicates if the range is normalized.
            To get the normalized first offset in the range, use the <see cref="P:ActiproSoftware.Text.TextRange.FirstOffset" /> property.
            To get the normalized last offset in the range, use the <see cref="P:ActiproSoftware.Text.TextRange.LastOffset" /> property.
            </remarks></member><member name="P:ActiproSoftware.Text.TextRange.FirstOffset"><summary>
            Gets the first offset in the range.
            </summary><value>The first offset in the range.</value><remarks>
            This property returns either the <see cref="P:ActiproSoftware.Text.TextRange.StartOffset" /> or <see cref="P:ActiproSoftware.Text.TextRange.EndOffset" /> property, whichever comes first.
            </remarks></member><member name="P:ActiproSoftware.Text.TextRange.IsDeleted"><summary>
            Gets whether the range has been flagged as deleted.
            </summary><value><c>true</c> if the range has been flagged as deleted; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.TextRange.IsNormalized"><summary>
            Gets whether the range is normalized (<see cref="P:ActiproSoftware.Text.TextRange.StartOffset" /> occurs at or before the <see cref="P:ActiproSoftware.Text.TextRange.EndOffset" />).
            </summary><value><c>true</c> if the range is normalized; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.TextRange.IsZeroLength"><summary>
            Gets whether the range has a zero length.
            </summary><value><c>true</c> if the range has a zero length; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.TextRange.LastOffset"><summary>
            Gets the last offset in the range.
            </summary><value>The last offset in the range.</value><remarks>
            This property returns either the <see cref="P:ActiproSoftware.Text.TextRange.StartOffset" /> or <see cref="P:ActiproSoftware.Text.TextRange.EndOffset" /> property, whichever comes last.
            </remarks></member><member name="P:ActiproSoftware.Text.TextRange.Length"><summary>
            Gets the number of characters encompassed by the <see cref="T:ActiproSoftware.Text.TextRange" />.
            </summary><value>The number of characters encompassed by the <see cref="T:ActiproSoftware.Text.TextRange" />.</value><remarks>
            This value will return a negative length if the range is not normalized.
            </remarks></member><member name="P:ActiproSoftware.Text.TextRange.NormalizedTextRange"><summary>
            Gets a normalized version of this <see cref="T:ActiproSoftware.Text.TextRange" /> without actually modifying this instance.
            </summary><value>A normalized version of this <see cref="T:ActiproSoftware.Text.TextRange" /> without actually modifying this instance.</value></member><member name="P:ActiproSoftware.Text.TextRange.StartOffset"><summary>
            Gets the start offset in the range.
            </summary><value>The start offset in the range.</value><remarks>
            The start offset may occur after the end offset if the range is not normalized.
            The <see cref="P:ActiproSoftware.Text.TextRange.IsNormalized" /> property indicates if the range is normalized.
            To get the normalized first offset in the range, use the <see cref="P:ActiproSoftware.Text.TextRange.FirstOffset" /> property.
            To get the normalized last offset in the range, use the <see cref="P:ActiproSoftware.Text.TextRange.LastOffset" /> property.
            </remarks></member><member name="T:ActiproSoftware.Text.TextRangeTrackingModes"><summary>
            Specifies how a text range is updated by text change operations that occur at its edges.
            </summary><remarks>
            Combine various flags to achieve different tracking behavior.
            </remarks></member><member name="F:ActiproSoftware.Text.TextRangeTrackingModes.Default"><summary>
            The text range doesn't get deleted by deletion operations that cross it, instead is slides to the deletion start.
            The text range doesn't expand when insertion operations occur at its edges.
            <para>
            If the text range is <c>{2,4}</c>, meaning the characters at offsets <c>2</c> and <c>3</c> are included in the range,
            and a single character is inserted at offset <c>2</c>, the text range slides forward a character and becomes <c>{3,5}</c>.
            </para><para>
            If the text range is <c>{2,4}</c>, meaning the characters at offsets <c>2</c> and <c>3</c> are included in the range,
            and a single character is inserted at offset <c>4</c>, the text range remains <c>{2,4}</c>.
            </para></summary></member><member name="F:ActiproSoftware.Text.TextRangeTrackingModes.ExpandFirstEdge"><summary>
            Alters expansion behavior such that the text range expands when insertion operations occur at its leading (first) edge.
            <para>
            If the text range is <c>{2,4}</c>, meaning the characters at offsets <c>2</c> and <c>3</c> are included in the range,
            and a single character is inserted at offset <c>2</c>, the text range expands to become <c>{2,5}</c>.
            </para><para>
            If the text range is <c>{2,4}</c>, meaning the characters at offsets <c>2</c> and <c>3</c> are included in the range,
            and a single character is inserted at offset <c>4</c>, the text range remains <c>{2,4}</c>.
            </para></summary></member><member name="F:ActiproSoftware.Text.TextRangeTrackingModes.ExpandLastEdge"><summary>
            Alters expansion behavior such that the text range expands when insertion operations occur at its trailing (last) edge.
            <para>
            If the text range is <c>{2,4}</c>, meaning the characters at offsets <c>2</c> and <c>3</c> are included in the range,
            and a single character is inserted at offset <c>2</c>, the text range slides forward a character and becomes <c>{3,5}</c>.
            </para><para>
            If the text range is <c>{2,4}</c>, meaning the characters at offsets <c>2</c> and <c>3</c> are included in the range,
            and a single character is inserted at offset <c>4</c>, the text range expands to become <c>{2,5}</c>.
            </para></summary></member><member name="F:ActiproSoftware.Text.TextRangeTrackingModes.ExpandBothEdges"><summary>
            Alters expansion behavior such that the text range expands when insertion operations occur at either of its edges.
            <para>
            If the text range is <c>{2,4}</c>, meaning the characters at offsets <c>2</c> and <c>3</c> are included in the range,
            and a single character is inserted at offset <c>2</c>, the text range expands to become <c>{2,5}</c>.
            </para><para>
            If the text range is <c>{2,4}</c>, meaning the characters at offsets <c>2</c> and <c>3</c> are included in the range,
            and a single character is inserted at offset <c>4</c>, the text range expands to become <c>{2,5}</c>.
            </para><para>
            This value is the combination of the <c>ExpandFirstEdge</c> and <c>ExpandLastEdge</c> values.
            </para></summary></member><member name="F:ActiproSoftware.Text.TextRangeTrackingModes.ExpandMask"><summary>
            The mask value for all expansion-related values.
            </summary></member><member name="F:ActiproSoftware.Text.TextRangeTrackingModes.DeleteWhenSurrounded"><summary>
            Alters deletion behavior such that the text range is deleted if a deletion operation occurs that completely surrounds it.
            A deletion operation that collapses the text range to zero-length will not delete it.
            </summary></member><member name="F:ActiproSoftware.Text.TextRangeTrackingModes.DeleteWhenZeroLength"><summary>
            Alters deletion behavior such that the text range is deleted if a deletion operation occurs that surrounds it or
            collapses it to zero-length.
            <para>
            This value includes the <c>DeleteWhenSurrounded</c> value.
            </para></summary></member><member name="F:ActiproSoftware.Text.TextRangeTrackingModes.DeleteMask"><summary>
            The mask value for all delete-related values.
            </summary></member><member name="F:ActiproSoftware.Text.TextRangeTrackingModes.LineBased"><summary>
            The text range follows the text on the line to which it is attached.
            This option is useful for line-based tracking, such as for bookmarks.
            <para>
            Inserting a line terminator in the line will move the text range to the next line,
            unless the line terminator is inserted at the very end of the line.
            </para></summary></member><member name="T:ActiproSoftware.Text.TextScanDirection"><summary>
            Specifies a direction in which text will be scanned.
            </summary></member><member name="F:ActiproSoftware.Text.TextScanDirection.Forward"><summary>
            Forward-oriented text scanning.
            </summary></member><member name="F:ActiproSoftware.Text.TextScanDirection.Backward"><summary>
            Backward-oriented text scanning.
            </summary></member><member name="T:ActiproSoftware.Text.TextSnapshotChangedEventArgs"><summary>
            Event arguments for the <see cref="T:ActiproSoftware.Text.ITextDocument" />.<see cref="E:ActiproSoftware.Text.ITextDocument.TextChanged" /> event.
            </summary></member><member name="M:ActiproSoftware.Text.TextSnapshotChangedEventArgs.#ctor(ActiproSoftware.Text.ITextSnapshot,ActiproSoftware.Text.ITextSnapshot,ActiproSoftware.Text.ITextChange)"><summary>
            Initializes a new instance of the <c>TextSnapshotChangedEventArgs</c> class.
            </summary><param name="oldSnapshot">The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that is in effect before the text change is applied.</param><param name="newSnapshot">The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that is in effect after the text change is applied.</param><param name="textChange">The <see cref="T:ActiproSoftware.Text.ITextChange" /> that is made.</param></member><member name="P:ActiproSoftware.Text.TextSnapshotChangedEventArgs.ChangedSnapshotRange"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> that contains the unioned changed range relative to the <see cref="P:ActiproSoftware.Text.TextSnapshotChangedEventArgs.NewSnapshot" />.
            </summary><value>A <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> that contains the unioned changed range relative to the <see cref="P:ActiproSoftware.Text.TextSnapshotChangedEventArgs.NewSnapshot" />.</value></member><member name="P:ActiproSoftware.Text.TextSnapshotChangedEventArgs.NewSnapshot"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that is in effect after the text change is applied.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that is in effect after the text change is applied.</value><remarks>This property value may be <see langword="null" /> before the text change actually occurs.</remarks></member><member name="P:ActiproSoftware.Text.TextSnapshotChangedEventArgs.OldSnapshot"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that is in effect before the text change is applied.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that is in effect before the text change is applied.</value></member><member name="P:ActiproSoftware.Text.TextSnapshotChangedEventArgs.TextChange"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChange" /> that is made to the document, causing a transition from <see cref="P:ActiproSoftware.Text.TextSnapshotChangedEventArgs.OldSnapshot" /> to <see cref="P:ActiproSoftware.Text.TextSnapshotChangedEventArgs.NewSnapshot" />.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChange" /> that is made to the document.</value></member><member name="T:ActiproSoftware.Text.TextSnapshotChangingEventArgs"><summary>
            Event arguments for the <see cref="T:ActiproSoftware.Text.ITextDocument" />.<see cref="E:ActiproSoftware.Text.ITextDocument.TextChanging" /> event.
            </summary></member><member name="M:ActiproSoftware.Text.TextSnapshotChangingEventArgs.#ctor(ActiproSoftware.Text.ITextSnapshot,ActiproSoftware.Text.ITextSnapshot,ActiproSoftware.Text.ITextChange)"><summary>
            Initializes a new instance of the <c>TextSnapshotChangingEventArgs</c> class.
            </summary><param name="oldSnapshot">The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that is in effect before the text change is applied.</param><param name="newSnapshot">The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that is in effect after the text change is applied.</param><param name="textChange">The <see cref="T:ActiproSoftware.Text.ITextChange" /> that is made.</param></member><member name="P:ActiproSoftware.Text.TextSnapshotChangingEventArgs.NewSnapshot"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that is in effect after the text change is applied.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that is in effect after the text change is applied.</value><remarks>This property value may be <see langword="null" /> before the text change actually occurs.</remarks></member><member name="P:ActiproSoftware.Text.TextSnapshotChangingEventArgs.OldSnapshot"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that is in effect before the text change is applied.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that is in effect before the text change is applied.</value></member><member name="P:ActiproSoftware.Text.TextSnapshotChangingEventArgs.TextChange"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextChange" /> that is made to the document, causing a transition from <see cref="P:ActiproSoftware.Text.TextSnapshotChangingEventArgs.OldSnapshot" /> to <see cref="P:ActiproSoftware.Text.TextSnapshotChangingEventArgs.NewSnapshot" />.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextChange" /> that is made to the document.</value></member><member name="T:ActiproSoftware.Text.TextSnapshotOffset"><summary>
            Represents a zero-based offset value within a certain <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </summary></member><member name="M:ActiproSoftware.Text.TextSnapshotOffset.CompareTo(System.Int32)"><summary>
            Compares the current instance with another object of the same type.
            </summary><param name="value">An offset to compare with this instance.</param><returns>
            A 32-bit signed integer that indicates the relative order of the comparands.
            </returns></member><member name="M:ActiproSoftware.Text.TextSnapshotOffset.CompareTo(ActiproSoftware.Text.TextSnapshotOffset)"><summary>
            Compares the current instance with another object of the same type.
            </summary><param name="snapshotOffset">A <see cref="T:ActiproSoftware.Text.TextSnapshotOffset" /> to compare with this instance.</param><returns>
            A 32-bit signed integer that indicates the relative order of the comparands.
            </returns></member><member name="M:ActiproSoftware.Text.TextSnapshotOffset.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.Text.TextSnapshotOffset.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.Text.TextSnapshotOffset.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.Text.TextSnapshotOffset.TranslateTo(ActiproSoftware.Text.ITextSnapshot,ActiproSoftware.Text.TextOffsetTrackingMode)"><summary>
            Translates this offset from one <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> to another in the same <see cref="T:ActiproSoftware.Text.ITextDocument" />.
            </summary><param name="toSnapshot">The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that is the target of the translation.</param><param name="trackingMode">A <see cref="T:ActiproSoftware.Text.TextOffsetTrackingMode" /> indicating the tracking mode to use.</param><returns>The translated <see cref="T:ActiproSoftware.Text.TextSnapshotOffset" />.</returns></member><member name="M:ActiproSoftware.Text.TextSnapshotOffset.#ctor(ActiproSoftware.Text.ITextSnapshot,System.Int32)"><summary>
            Initializes a new instance of the <c>TextSnapshotOffset</c> class with the specified offset.
            </summary><param name="snapshot">The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that contains the offset.</param><param name="offset">The zero-based offset.</param></member><member name="P:ActiproSoftware.Text.TextSnapshotOffset.Column"><summary>
            Gets the zero-based column value, which accounts for the document's tab size.
            </summary><value>The zero-based column value, which accounts for the document's tab size.</value></member><member name="P:ActiproSoftware.Text.TextSnapshotOffset.Deleted"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.TextSnapshotOffset" /> that has no <see cref="P:ActiproSoftware.Text.TextSnapshotOffset.Snapshot" /> and is flagged as deleted.
            </summary><value>A <see cref="T:ActiproSoftware.Text.TextSnapshotOffset" /> that has no <see cref="P:ActiproSoftware.Text.TextSnapshotOffset.Snapshot" /> and is flagged as deleted.</value></member><member name="P:ActiproSoftware.Text.TextSnapshotOffset.IsDeleted"><summary>
            Gets whether the offset has been flagged as deleted.
            </summary><value><c>true</c> if the offset has been flagged as deleted; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.TextSnapshotOffset.Line"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" /> that contains the offset.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" /> that contains the offset.</value></member><member name="P:ActiproSoftware.Text.TextSnapshotOffset.Offset"><summary>
            Gets the zero-based offset value.
            </summary><value>The zero-based offset value.</value></member><member name="P:ActiproSoftware.Text.TextSnapshotOffset.Position"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.TextPosition" /> for the offset.
            </summary><value>The <see cref="T:ActiproSoftware.Text.TextPosition" /> for the offset.</value></member><member name="P:ActiproSoftware.Text.TextSnapshotOffset.Snapshot"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that contains the offset.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that contains the offset.</value></member><member name="T:ActiproSoftware.Text.TextSnapshotRange"><summary>
            Represents a zero-based range of two normalized offset values within a certain <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </summary></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.BordersOn(System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> borders on the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> borders on the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method checks to see if the specified offset is either the <see cref="P:ActiproSoftware.Text.TextSnapshotRange.StartOffset" /> or <see cref="P:ActiproSoftware.Text.TextSnapshotRange.EndOffset" />.
            </remarks></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.BordersOn(ActiproSoftware.Text.TextRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> borders on, but does not overlap the specified <see cref="P:ActiproSoftware.Text.TextSnapshotRange.TextRange" />.
            </summary><param name="range">The <see cref="P:ActiproSoftware.Text.TextSnapshotRange.TextRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> borders on, but does not overlap the specified <see cref="P:ActiproSoftware.Text.TextSnapshotRange.TextRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.BordersOn(ActiproSoftware.Text.TextSnapshotRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> borders on, but does not overlap the specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> borders on, but does not overlap the specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.CompareTo(ActiproSoftware.Text.TextRange)"><summary>
            Compares the current instance with another object of the same type.
            </summary><param name="range">A <see cref="P:ActiproSoftware.Text.TextSnapshotRange.TextRange" /> to compare with this instance.</param><returns>
            A 32-bit signed integer that indicates the relative order of the comparands.
            </returns></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.CompareTo(ActiproSoftware.Text.TextSnapshotRange)"><summary>
            Compares the current instance with another object of the same type.
            </summary><param name="range">A <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> to compare with this instance.</param><returns>
            A 32-bit signed integer that indicates the relative order of the comparands.
            </returns></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.Contains(System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> contains the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> contains the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the offset falls on the <see cref="P:ActiproSoftware.Text.TextSnapshotRange.EndOffset" /> offset
            since this method indicates if the offset is encompassed by the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.
            </remarks></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.Contains(ActiproSoftware.Text.TextRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> contains the specified <see cref="P:ActiproSoftware.Text.TextSnapshotRange.TextRange" />.
            </summary><param name="range">The <see cref="P:ActiproSoftware.Text.TextSnapshotRange.TextRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> contains the specified <see cref="P:ActiproSoftware.Text.TextSnapshotRange.TextRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.Contains(ActiproSoftware.Text.TextSnapshotRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> contains the specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> contains the specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.FromSpan(ActiproSoftware.Text.ITextSnapshot,System.Int32,System.Int32)"><summary>
            Returns a <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> that covers the specified offset and length.
            </summary><param name="snapshot">The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that contains the text range.</param><param name="offset">The start offset.</param><param name="length">The length of the range.</param><returns>The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> that was created.</returns></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.GetText(ActiproSoftware.Text.LineTerminator)"><summary>
            Returns the snapshot text substring encompassed by this range, using the specified <see cref="T:ActiproSoftware.Text.LineTerminator" /> for line ends.
            </summary><param name="lineTerminator">A <see cref="T:ActiproSoftware.Text.LineTerminator" /> specifying the type of line terminators to use.</param><returns>The snapshot text substring encompassed by this range, using the specified <see cref="T:ActiproSoftware.Text.LineTerminator" /> for line ends.</returns></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.IntersectsWith(System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> intersects with the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> intersects with the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns whether the specified offset borders on or lies within the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.
            </remarks></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.IntersectsWith(ActiproSoftware.Text.TextRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> intersects with the specified <see cref="P:ActiproSoftware.Text.TextSnapshotRange.TextRange" />.
            </summary><param name="range">The <see cref="P:ActiproSoftware.Text.TextSnapshotRange.TextRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> intersects with the specified <see cref="P:ActiproSoftware.Text.TextSnapshotRange.TextRange" />; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns whether the specified <see cref="P:ActiproSoftware.Text.TextSnapshotRange.TextRange" /> borders on or overlaps the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.
            </remarks></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.IntersectsWith(ActiproSoftware.Text.TextSnapshotRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> intersects with the specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> intersects with the specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns whether the specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> borders on or overlaps the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.
            </remarks></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.IntersectsWith(ActiproSoftware.Text.TextSnapshotRange,System.Boolean,System.Boolean)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> intersects with the specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> to examine.</param><param name="includeFirstEdge">Whether to return <c>true</c> if the specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> borders on the leading (first) edge of this <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.</param><param name="includeLastEdge">Whether to return <c>true</c> if the specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> borders on the trailing (last) edge of this <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> intersects with the specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns whether the specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> borders on or overlaps the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.
            </remarks></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.OverlapsWith(ActiproSoftware.Text.TextRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> overlaps with, or crosses, the specified <see cref="P:ActiproSoftware.Text.TextSnapshotRange.TextRange" />.
            </summary><param name="range">The <see cref="P:ActiproSoftware.Text.TextSnapshotRange.TextRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> overlaps with, or crosses, the specified <see cref="P:ActiproSoftware.Text.TextSnapshotRange.TextRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.OverlapsWith(ActiproSoftware.Text.TextSnapshotRange)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> overlaps with, or crosses, the specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> overlaps with, or crosses, the specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.ToVersionRange(ActiproSoftware.Text.TextRangeTrackingModes)"><summary>
            Converts this text range into an <see cref="T:ActiproSoftware.Text.ITextVersionRange" />.
            </summary><param name="trackingModes">A <see cref="T:ActiproSoftware.Text.TextRangeTrackingModes" /> indicating the tracking modes to use.</param><returns>The <see cref="T:ActiproSoftware.Text.ITextVersionRange" /> that was created.</returns></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.ToVersionRange(System.Func{ActiproSoftware.Text.TextRangeTrackingModes})"><summary>
            Converts this text range into an <see cref="T:ActiproSoftware.Text.ITextVersionRange" />.
            </summary><param name="trackingModesFunc">A function that dynamically returns a <see cref="T:ActiproSoftware.Text.TextRangeTrackingModes" /> indicating the tracking modes to use.</param><returns>The <see cref="T:ActiproSoftware.Text.ITextVersionRange" /> that was created.</returns></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.TranslateTo(ActiproSoftware.Text.ITextSnapshot,ActiproSoftware.Text.TextRangeTrackingModes)"><summary>
            Translates this text range from one <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> to another in the same <see cref="T:ActiproSoftware.Text.ITextDocument" />.
            </summary><param name="toSnapshot">The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that is the target of the translation.</param><param name="trackingModes">A <see cref="T:ActiproSoftware.Text.TextRangeTrackingModes" /> indicating the tracking modes to use.</param><returns>The translated <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.</returns></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.#ctor(ActiproSoftware.Text.TextSnapshotOffset)"><summary>
            Initializes a new instance of the <c>TextSnapshotRange</c> class using the specified <see cref="T:ActiproSoftware.Text.TextSnapshotOffset" /> for both the start and end values.
            </summary><param name="snapshotOffset">The start and end offset in the range.</param></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.#ctor(ActiproSoftware.Text.ITextSnapshot,System.Int32)"><summary>
            Initializes a new instance of the <c>TextSnapshotRange</c> class using the specified offset for both the start and end values.
            </summary><param name="snapshot">The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that contains the text range.</param><param name="offset">The start and end offset in the range.</param></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.#ctor(ActiproSoftware.Text.ITextSnapshot,System.Int32,System.Int32)"><summary>
            Initializes a new instance of the <c>TextSnapshotRange</c> class with the specified offset values.
            </summary><param name="snapshot">The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that contains the text range.</param><param name="startOffset">The start offset in the range.</param><param name="endOffset">The end offset in the range.</param></member><member name="M:ActiproSoftware.Text.TextSnapshotRange.#ctor(ActiproSoftware.Text.ITextSnapshot,ActiproSoftware.Text.TextRange)"><summary>
            Initializes a new instance of the <c>TextSnapshotRange</c> class with the specified <see cref="P:ActiproSoftware.Text.TextSnapshotRange.TextRange" />.
            </summary><param name="snapshot">The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that contains the text range.</param><param name="textRange">The <see cref="P:ActiproSoftware.Text.TextSnapshotRange.TextRange" /> of the range.</param></member><member name="P:ActiproSoftware.Text.TextSnapshotRange.AbsoluteLength"><summary>
            Gets the absolute number of characters encompassed by the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.
            </summary><value>The absolute number of characters encompassed by the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.</value><remarks>
            This value will always return a positive length, even if the range is not normalized.
            </remarks></member><member name="P:ActiproSoftware.Text.TextSnapshotRange.Deleted"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> that has no <see cref="P:ActiproSoftware.Text.TextSnapshotRange.Snapshot" /> and is flagged as deleted.
            </summary><value>A <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> that has no <see cref="P:ActiproSoftware.Text.TextSnapshotRange.Snapshot" /> and is flagged as deleted.</value></member><member name="P:ActiproSoftware.Text.TextSnapshotRange.EndLine"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" /> that contains the end offset in the text range.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" /> that contains the end offset in the text range.</value></member><member name="P:ActiproSoftware.Text.TextSnapshotRange.EndOffset"><summary>
            Gets the end offset in the range.
            </summary><value>The end offset in the range.</value><remarks>
            Since snapshot ranges are normalized, this property returns the last offset in the range.
            </remarks></member><member name="P:ActiproSoftware.Text.TextSnapshotRange.EndPosition"><summary>
            Gets the end <see cref="T:ActiproSoftware.Text.TextPosition" /> in the range.
            </summary><value>The end <see cref="T:ActiproSoftware.Text.TextPosition" /> in the range.</value><remarks>
            Since snapshot ranges are normalized, this property returns the last <see cref="T:ActiproSoftware.Text.TextPosition" /> in the range.
            </remarks></member><member name="P:ActiproSoftware.Text.TextSnapshotRange.IsDeleted"><summary>
            Gets whether the range has been flagged as deleted.
            </summary><value><c>true</c> if the range has been flagged as deleted; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.TextSnapshotRange.IsZeroLength"><summary>
            Gets whether the range has a zero length.
            </summary><value><c>true</c> if the range has a zero length; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.TextSnapshotRange.Length"><summary>
            Gets the number of characters encompassed by the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.
            </summary><value>The number of characters encompassed by the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.</value><remarks>
            This value will return a negative length if the range is not normalized.
            </remarks></member><member name="P:ActiproSoftware.Text.TextSnapshotRange.PositionRange"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.TextPositionRange" /> that specifies the text position range of the object.
            </summary><value>A <see cref="T:ActiproSoftware.Text.TextPositionRange" /> that specifies the text position range of the object.</value></member><member name="P:ActiproSoftware.Text.TextSnapshotRange.Snapshot"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that contains the text range.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that contains the text range.</value></member><member name="P:ActiproSoftware.Text.TextSnapshotRange.StartLine"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" /> that contains the start offset in the text range.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" /> that contains the start offset in the text range.</value></member><member name="P:ActiproSoftware.Text.TextSnapshotRange.StartOffset"><summary>
            Gets the start offset in the range.
            </summary><value>The start offset in the range.</value><remarks>
            Since snapshot ranges are normalized, this property returns the first offset in the range.
            </remarks></member><member name="P:ActiproSoftware.Text.TextSnapshotRange.StartPosition"><summary>
            Gets the start <see cref="T:ActiproSoftware.Text.TextPosition" /> in the range.
            </summary><value>The start <see cref="T:ActiproSoftware.Text.TextPosition" /> in the range.</value><remarks>
            Since snapshot ranges are normalized, this property returns the first <see cref="T:ActiproSoftware.Text.TextPosition" /> in the range.
            </remarks></member><member name="P:ActiproSoftware.Text.TextSnapshotRange.Text"><summary>
            Gets the snapshot text substring encompassed by this range, using <see cref="F:ActiproSoftware.Text.LineTerminator.CarriageReturnNewline" /> for line ends.
            </summary><value>The snapshot text substring encompassed by this range, using <see cref="F:ActiproSoftware.Text.LineTerminator.CarriageReturnNewline" /> for line ends.</value></member><member name="P:ActiproSoftware.Text.TextSnapshotRange.TextRange"><summary>
            Gets a <see cref="P:ActiproSoftware.Text.TextSnapshotRange.TextRange" /> that specifies the text range of the object.
            </summary><value>A <see cref="P:ActiproSoftware.Text.TextSnapshotRange.TextRange" /> that specifies the text range of the object.</value></member><member name="T:ActiproSoftware.Text.TextSnapshotRangeEventArgs"><summary>
            Event arguments used when a change notification is needed for a <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.
            </summary></member><member name="M:ActiproSoftware.Text.TextSnapshotRangeEventArgs.#ctor(ActiproSoftware.Text.TextSnapshotRange)"><summary>
            Initializes a new instance of the <c>TextSnapshotRangeEventArgs</c> class.
            </summary><param name="snapshotRange">The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> of the change.</param></member><member name="P:ActiproSoftware.Text.TextSnapshotRangeEventArgs.SnapshotRange"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> of the change.
            </summary><value>The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> of the change.</value></member><member name="T:ActiproSoftware.Text.Utility.CollectionChangeEventArgs`1"><summary>
            Event arguments for various <see cref="T:ActiproSoftware.Text.Utility.SimpleObservableCollection`1" /> change events.
            </summary><typeparam name="T">The <see cref="T:System.Type" /> of item.</typeparam></member><member name="M:ActiproSoftware.Text.Utility.CollectionChangeEventArgs`1.#ctor(System.Int32,`0)"><summary>
            Initializes a new instance of the <c>CollectionChangeEventArgs</c> class.
            </summary><param name="index">The index at which the item is/was located.</param><param name="item">The <typeparamref name="T" /> that is affected by this event.</param></member><member name="P:ActiproSoftware.Text.Utility.CollectionChangeEventArgs`1.Index"><summary>
            Gets the index at which the item is/was located.
            </summary><value>The index at which the item is/was located.</value></member><member name="P:ActiproSoftware.Text.Utility.CollectionChangeEventArgs`1.Item"><summary>
            Gets the <typeparamref name="T" /> that is affected by this event.
            </summary><value>The <typeparamref name="T" /> that is affected by this event.</value></member><member name="T:ActiproSoftware.Text.Utility.DisposableObject"><summary>
            Provides a base class that implements the <see cref="T:System.IDisposable" /> interface.
            This class functions in accordance with the Disposable design pattern.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.DisposableObject.Finalize"><summary>
            Allows an object to attempt to free resources and perform other cleanup operations before the 
            object is reclaimed by garbage collection.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.DisposableObject.Dispose"><summary>
            Releases all resources used by the object.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.DisposableObject.Dispose(System.Boolean)"><summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary><param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param><remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing" /> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing" /> set to <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.Text.Utility.DisposableObject.#ctor"><summary>
            Initializes a new instance of the <c>DisposableObject</c> class.
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="T:ActiproSoftware.Text.Utility.EventHandlerPriority"><summary>
            Specifies the priority that applied to an event handler.
            </summary></member><member name="F:ActiproSoftware.Text.Utility.EventHandlerPriority.Low"><summary>
            Low priority.
            </summary></member><member name="F:ActiproSoftware.Text.Utility.EventHandlerPriority.Medium"><summary>
            Medium priority.
            </summary></member><member name="F:ActiproSoftware.Text.Utility.EventHandlerPriority.High"><summary>
            High priority.
            </summary></member><member name="T:ActiproSoftware.Text.Utility.IKeyedObject"><summary>
            Provides the base requirements for an object that has a string-based key.
            </summary></member><member name="P:ActiproSoftware.Text.Utility.IKeyedObject.Key"><summary>
            Gets the string-based key that identifies the object.
            </summary><value>The string-based key that identifies the object.</value></member><member name="T:ActiproSoftware.Text.Utility.IKeyedObservableCollection`1"><summary>
            Provides the base requirements for a collection that has string-based unique keys.
            </summary><typeparam name="T">The <see cref="T:System.Type" /> of item in the collection.</typeparam></member><member name="M:ActiproSoftware.Text.Utility.IKeyedObservableCollection`1.Contains(System.String)"><summary>
            Determines whether a <typeparamref name="T" /> with the specified key is in the collection.
            </summary><param name="key">The key to locate in the collection.</param><returns><c>true</c> if a <typeparamref name="T" /> with the specified key is found in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Utility.IKeyedObservableCollection`1.IndexOf(System.String)"><summary>
            Searches for a <typeparamref name="T" /> with the specified key and returns the zero-based index of the 
            first occurrence within the entire collection.
            </summary><param name="key">The key to locate in the collection.</param><returns>
            The zero-based index of the first occurrence of a <typeparamref name="T" /> with the specified key 
            within the entire collection, if found; otherwise, <c>-1</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Utility.IKeyedObservableCollection`1.Remove(System.String)"><summary>
            Removes the <typeparamref name="T" /> with the specified key. 
            </summary><param name="key">The key to locate in the collection.</param><returns><c>true</c> if a <typeparamref name="T" /> was removed; otherwise, <c>false</c>.
            </returns></member><member name="P:ActiproSoftware.Text.Utility.IKeyedObservableCollection`1.Item(System.String)"><summary>
            Gets the <typeparamref name="T" /> with the specified key. 
            <para>
            [C#] In C#, this property is the indexer for the <c>IKeyedObservableCollection</c> interface. 
            </para></summary><param name="key">The key of the <typeparamref name="T" /> to return.</param><value>
            The <typeparamref name="T" /> with the specified key. 
            </value></member><member name="T:ActiproSoftware.Text.Utility.IntegerList"><summary>
            Represents a list of integers.
            </summary><remarks>
            The implementation uses a short array to track the values until the values become too large, at which point an integer array is used.
            This saves on memory for smaller-valued lists.
            </remarks></member><member name="M:ActiproSoftware.Text.Utility.IntegerList.Add(System.Int32)"><summary>
            Adds an integer to the end of the list.
            </summary><param name="value">The value to add.</param><returns>The index at which the integer was added.</returns></member><member name="M:ActiproSoftware.Text.Utility.IntegerList.BinarySearch(System.Int32)"><summary>
            Performs a binary search for the specified value.
            </summary><param name="value">The value for which to search.</param><returns>
            The index of the specified value in the specified array, if value is found. 
            If value is not found and value is less than one or more elements in array, 
            a negative number which is the bitwise complement of the index of the first element that is larger than value. 
            If value is not found and value is greater than any of the elements in array, 
            a negative number which is the bitwise complement of (the index of the last element plus 1). 
            </returns><remarks>
            This method should only be used if the integers in the list are guaranteed to be sorted.
            </remarks></member><member name="M:ActiproSoftware.Text.Utility.IntegerList.Increment(System.Int32,System.Int32)"><summary>
            Increments all integers in the list after the specified index by the delta value.
            </summary><param name="index">The index at which to start incrementing value.</param><param name="delta">The amount by which to increment.</param><remarks>
            This method should only be used if the integers in the list are guaranteed to be sorted.
            </remarks></member><member name="M:ActiproSoftware.Text.Utility.IntegerList.Insert(System.Int32,System.Int32)"><summary>
            Inserts an integer into the list.
            </summary><param name="index">The index at which to insert.</param><param name="value">The value to insert.</param></member><member name="M:ActiproSoftware.Text.Utility.IntegerList.RemoveAt(System.Int32)"><summary>
            Removes the integer at the specified index from the list.
            </summary><param name="index">The index of the integer to remove.</param></member><member name="M:ActiproSoftware.Text.Utility.IntegerList.RemoveRange(System.Int32,System.Int32)"><summary>
            Removes a range of integers from the list.
            </summary><param name="index">The zero-based starting index of the range of integers to remove.</param><param name="count">The number of integers to remove.</param></member><member name="M:ActiproSoftware.Text.Utility.IntegerList.ToArray"><summary>
            Copies the integer of the collection to a new integer array.
            </summary><returns>An array of integers.</returns></member><member name="M:ActiproSoftware.Text.Utility.IntegerList.#ctor(System.Int32)"><summary>
            Initializes a new instance of the <c>IntegerList</c> class.
            </summary><param name="capacity">The initial capacity of the list.</param></member><member name="P:ActiproSoftware.Text.Utility.IntegerList.Count"><summary>
            Gets the number of integers in the list.
            </summary><value>The number of integers in the list.</value></member><member name="P:ActiproSoftware.Text.Utility.IntegerList.Item(System.Int32)"><summary>
            Gets or sets the integer at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>IntegerList</c> class. 
            </para></summary><param name="index">The index of the integer to return.</param><value>
            The integer at the specified index. 
            </value></member><member name="T:ActiproSoftware.Text.Utility.IObservableCollection`1"><summary>
            Provides the base requirements for a collection that raises events when changed.
            </summary><typeparam name="T">The <see cref="T:System.Type" /> of item in the collection.</typeparam></member><member name="E:ActiproSoftware.Text.Utility.IObservableCollection`1.ItemAdding"><summary>
            Occurs before an item is added to the collection.
            </summary><eventdata>
            The event handler receives an argument of type <c>CollectionChangeEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.Utility.IObservableCollection`1.ItemAdded"><summary>
            Occurs after an item is added to the collection.
            </summary><eventdata>
            The event handler receives an argument of type <c>CollectionChangeEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.Utility.IObservableCollection`1.ItemRemoving"><summary>
            Occurs before an item is removed from the collection.
            </summary><eventdata>
            The event handler receives an argument of type <c>CollectionChangeEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.Utility.IObservableCollection`1.ItemRemoved"><summary>
            Occurs after an item is removed from the collection.
            </summary><eventdata>
            The event handler receives an argument of type <c>CollectionChangeEventArgs</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.Text.Utility.IOrderable"><summary>
            Provides the base requirements for an object that can be ordered by name against other named objects.
            </summary></member><member name="P:ActiproSoftware.Text.Utility.IOrderable.Orderings"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.Text.Utility.Ordering" /> objects, used to determine how this object is positioned relative to other objects.
            </summary><value>The collection of <see cref="T:ActiproSoftware.Text.Utility.Ordering" /> objects, used to determine how this object is positioned relative to other objects.</value></member><member name="T:ActiproSoftware.Text.Utility.IServiceLocator"><summary>
            Provides the base requirements for an object that can store and provide services.
            </summary><remarks>
            When calling the non-generic methods on this interface, the object key used to register the service should generally be a <c>Type</c> instance.
            </remarks></member><member name="M:ActiproSoftware.Text.Utility.IServiceLocator.GetAllServiceTypes"><summary>
            Returns a collection of all the service types that have been registered.
            </summary><returns>A collection of all the service types that have been registered.</returns></member><member name="M:ActiproSoftware.Text.Utility.IServiceLocator.GetService``1"><summary>
            Returns the service that has been registered with the specified type.
            </summary><typeparam name="T">The type of service to return.</typeparam><returns>The service that has been registered with the specified type.</returns></member><member name="M:ActiproSoftware.Text.Utility.IServiceLocator.GetService(System.Object)"><summary>
            Returns the service that has been registered with the specified type.
            </summary><param name="serviceType">The type of service to return.</param><returns>The service that has been registered with the specified type.</returns></member><member name="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService``1(``0)"><summary>
            Registers a service instance for the specified service type.
            </summary><typeparam name="T">The type of service.</typeparam><param name="service">The service object instance.</param></member><member name="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService(System.Object,System.Object)"><summary>
            Registers a service instance for the specified service type.
            </summary><param name="serviceType">The type of service.</param><param name="service">The service object instance.</param></member><member name="M:ActiproSoftware.Text.Utility.IServiceLocator.UnregisterService``1"><summary>
            Unregisters a service of the specified service type.
            </summary><typeparam name="T">The type of service.</typeparam></member><member name="M:ActiproSoftware.Text.Utility.IServiceLocator.UnregisterService(System.Object)"><summary>
            Unregisters a service of the specified service type.
            </summary><param name="serviceType">The type of service.</param></member><member name="P:ActiproSoftware.Text.Utility.IServiceLocator.SyncRoot"><summary>
            Gets an object that can be used to synchronize access to the services. 
            </summary><value>An object that can be used to synchronize access to the services.</value></member><member name="E:ActiproSoftware.Text.Utility.IServiceLocator.ServiceAdded"><summary>
            Occurs after a service is added to the object.
            </summary><eventdata>
            The event handler receives an argument of type <c>CollectionChangeEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.Utility.IServiceLocator.ServiceRemoved"><summary>
            Occurs after a service is removed from the object.
            </summary><eventdata>
            The event handler receives an argument of type <c>CollectionChangeEventArgs</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.Text.Utility.KeyedObservableCollection`1"><summary>
            Provides a generic keyed collection that provides notifications when items are added or removed.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.KeyedObservableCollection`1.Contains(System.String)"><summary>
            Determines whether a <typeparamref name="T" /> with the specified key is in the collection.
            </summary><param name="key">The key to locate in the collection.</param><returns><c>true</c> if a <typeparamref name="T" /> with the specified key is found in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Utility.KeyedObservableCollection`1.IndexOf(System.String)"><summary>
            Searches for a <typeparamref name="T" /> with the specified key and returns the zero-based index of the 
            first occurrence within the entire collection.
            </summary><param name="key">The key to locate in the collection.</param><returns>
            The zero-based index of the first occurrence of a <typeparamref name="T" /> with the specified key 
            within the entire collection, if found; otherwise, <c>-1</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Utility.KeyedObservableCollection`1.Remove(System.String)"><summary>
            Removes the <typeparamref name="T" /> with the specified key. 
            </summary><param name="key">The key to locate in the collection.</param><returns><c>true</c> if a <typeparamref name="T" /> was removed; otherwise, <c>false</c>.
            </returns></member><member name="P:ActiproSoftware.Text.Utility.KeyedObservableCollection`1.Item(System.String)"><summary>
            Gets the <typeparamref name="T" /> with the specified key. 
            <para>
            [C#] In C#, this property is the indexer for the <c>IKeyedObservableCollection</c> interface. 
            </para></summary><param name="key">The key of the <typeparamref name="T" /> to return.</param><value>
            The <typeparamref name="T" /> with the specified key. 
            </value></member><member name="T:ActiproSoftware.Text.Utility.KeyedSynchronizedCollection`1"><summary>
            Provides a thread-safe generic keyed collection that provides notifications when items are added or removed.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.KeyedSynchronizedCollection`1.ClearItems"><summary>
            Removes all items from the collection.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.KeyedSynchronizedCollection`1.IndexOf(System.String)"><summary>
            Searches for a <typeparamref name="T" /> with the specified key and returns the zero-based index of the 
            first occurrence within the entire collection.
            </summary><param name="key">The key to locate in the collection.</param><returns>
            The zero-based index of the first occurrence of a <typeparamref name="T" /> with the specified key 
            within the entire collection, if found; otherwise, <c>-1</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Utility.KeyedSynchronizedCollection`1.InsertItem(System.Int32,`0)"><summary>
            Inserts an item into the collection at the specified index.
            </summary><param name="index">The index at which to insert the item.</param><param name="item">The item to insert.</param></member><member name="M:ActiproSoftware.Text.Utility.KeyedSynchronizedCollection`1.Remove(System.String)"><summary>
            Removes the <typeparamref name="T" /> with the specified key. 
            </summary><param name="key">The key to locate in the collection.</param><returns><c>true</c> if a <typeparamref name="T" /> was removed; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Utility.KeyedSynchronizedCollection`1.RemoveItem(System.Int32)"><summary>
            Removes the item at the specified index.
            </summary><param name="index">The index of the item to remove.</param></member><member name="M:ActiproSoftware.Text.Utility.KeyedSynchronizedCollection`1.SetItem(System.Int32,`0)"><summary>
            Replaces the item at the specified index.
            </summary><param name="index">The index of the item to replace.</param><param name="item">The item with which to replace.</param></member><member name="P:ActiproSoftware.Text.Utility.KeyedSynchronizedCollection`1.Item(System.String)"><summary>
            Gets the <typeparamref name="T" /> with the specified key. 
            <para>
            [C#] In C#, this property is the indexer for the <c>IKeyedObservableCollection</c> interface. 
            </para></summary><param name="key">The key of the <typeparamref name="T" /> to return.</param><value>
            The <typeparamref name="T" /> with the specified key. 
            </value></member><member name="T:ActiproSoftware.Text.Utility.LipsumGenerator"><summary>
            A utility class that can generate 'lorem ipsum' placeholder text.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.LipsumGenerator.GenerateParagraph(System.Boolean,System.Int32)"><summary>
            Generates a single paragraph of text.
            </summary><param name="useStartingWords">Whether to use the starting words to begin the paragraph (e.g. Lorem ipsum dolor sit amet...).</param><param name="wordCount">The number of words in the paragraph.</param><returns>The generated text.</returns></member><member name="M:ActiproSoftware.Text.Utility.LipsumGenerator.#ctor"><summary>
            Initializes a new instance of the <c>LipsumGenerator</c> class.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.LipsumGenerator.#ctor(System.String,System.String)"><summary>
            Initializes a new instance of the <c>LipsumGenerator</c> class.
            </summary><param name="startingWords">The words that can start the first paragraph.</param><param name="words">The words.</param></member><member name="T:ActiproSoftware.Text.Utility.OrderableHelper"><summary>
            Provides numerous utility methods for working with <see cref="T:ActiproSoftware.Text.Utility.IOrderable" /> objects.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.OrderableHelper.Sort``1(System.Collections.Generic.IEnumerable{``0})"><summary>
            Returns a sorted array of <see cref="T:ActiproSoftware.Text.Utility.IOrderable" /> items.
            </summary><typeparam name="T">The item type.</typeparam><param name="unsortedItems">The collection of unsorted <see cref="T:ActiproSoftware.Text.Utility.IOrderable" /> items.</param><returns>A sorted array of <see cref="T:ActiproSoftware.Text.Utility.IOrderable" /> items.</returns></member><member name="M:ActiproSoftware.Text.Utility.OrderableHelper.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0},System.Comparison{``0})"><summary>
            Sorts a list of items, giving precedence to <see cref="T:ActiproSoftware.Text.Utility.IOrderable" /> items.
            </summary><typeparam name="T">The item type.</typeparam><param name="unsortedItems">The collection of unsorted items.</param><param name="preComparison">An optional comparison that executes before the default logic.</param><param name="fallbackComparison">An optional fallback comparison delegate.</param><returns>A sorted array of items.</returns></member><member name="T:ActiproSoftware.Text.Utility.Ordering"><summary>
            Provides data used to order one object relative to another.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.Ordering.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.Text.Utility.Ordering.#ctor(System.String,ActiproSoftware.Text.Utility.OrderPlacement)"><summary>
            Initializes a new instance of the <c>Ordering</c> class.
            </summary><param name="key">The string-based key of the object relative to which the ordering's owner should be positioned.</param><param name="placement">The <see cref="T:ActiproSoftware.Text.Utility.OrderPlacement" /> that indicates how to position the ordering's owner relative to the object specified by <see cref="P:ActiproSoftware.Text.Utility.Ordering.Key" />.</param></member><member name="P:ActiproSoftware.Text.Utility.Ordering.Key"><summary>
            Gets the string-based key of the object relative to which the ordering's owner should be positioned.
            </summary><value>The string-based key of the object relative to which the ordering's owner should be positioned.</value></member><member name="P:ActiproSoftware.Text.Utility.Ordering.Placement"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Utility.OrderPlacement" /> that indicates how to position the ordering's owner relative to the object specified by <see cref="P:ActiproSoftware.Text.Utility.Ordering.Key" />.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Utility.OrderPlacement" /> that indicates how to position the ordering's owner relative to the object specified by <see cref="P:ActiproSoftware.Text.Utility.Ordering.Key" />.</value></member><member name="T:ActiproSoftware.Text.Utility.OrderPlacement"><summary>
            Specifies the placement order for an <see cref="T:ActiproSoftware.Text.Utility.Ordering" />.
            </summary></member><member name="F:ActiproSoftware.Text.Utility.OrderPlacement.After"><summary>
            The object that contains the <see cref="T:ActiproSoftware.Text.Utility.Ordering" /> is after the object specified in the <see cref="T:ActiproSoftware.Text.Utility.Ordering" />.
            </summary></member><member name="F:ActiproSoftware.Text.Utility.OrderPlacement.Before"><summary>
            The object that contains the <see cref="T:ActiproSoftware.Text.Utility.Ordering" /> is before the object specified in the <see cref="T:ActiproSoftware.Text.Utility.Ordering" />.
            </summary></member><member name="T:ActiproSoftware.Text.Utility.PropertyChangedEventArgs`1"><summary>
            Provides event arguments for a property change event, indicating the old and new values.
            </summary><typeparam name="T">The return type of the property.</typeparam></member><member name="M:ActiproSoftware.Text.Utility.PropertyChangedEventArgs`1.#ctor(`0,`0)"><summary>
            Initializes a new instance of the <c>PropertyChangedEventArgs</c> class.
            </summary><param name="oldValue">The previous value of the property being tracked as reported by an event.</param><param name="newValue">The new value of the property being tracked as reported by an event.</param></member><member name="P:ActiproSoftware.Text.Utility.PropertyChangedEventArgs`1.NewValue"><summary>
            Gets the new value of the property being tracked as reported by an event.
            </summary><value>The new value of the property being tracked as reported by an event.</value></member><member name="P:ActiproSoftware.Text.Utility.PropertyChangedEventArgs`1.OldValue"><summary>
            Gets the previous value of the property being tracked as reported by an event.
            </summary><value>The previous value of the property being tracked as reported by an event.</value></member><member name="T:ActiproSoftware.Text.Utility.PropertyDictionary"><summary>
            Provides a thread-safe dictionary of properties.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.PropertyDictionary.Add(System.Object,System.Object)"><summary>
            Adds a property to the dictionary.
            </summary><param name="key">A key that identifies the property.</param><param name="value">The property value.</param></member><member name="M:ActiproSoftware.Text.Utility.PropertyDictionary.ContainsKey(System.Object)"><summary>
            Returns whether the dictionary contains a property with the specified key.
            </summary><param name="key">The property key for which to search.</param><returns><c>true</c> if the dictionary contains a property with the specified key; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Utility.PropertyDictionary.Remove(System.Object)"><summary>
            Removes the property with the specified key from the dictionary.
            </summary><param name="key">The key of the property to remove.</param><returns><c>true</c> if a property was removed; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Utility.PropertyDictionary.TryGetValue``1(System.Object,``0@)"><summary>
            Attempts to return the value of the property with the specified key.
            </summary><typeparam name="TValue">The type of property value.</typeparam><param name="key">The property key for which to search.</param><param name="value">Returns the property value.</param><returns><c>true</c> if a value was returned; otherwise, <c>false</c>.
            </returns></member><member name="P:ActiproSoftware.Text.Utility.PropertyDictionary.Keys"><summary>
            Gets the collection of property keys that have been registered in this dictionary.
            </summary><value>The collection of property keys that have been registered in this dictionary.</value></member><member name="P:ActiproSoftware.Text.Utility.PropertyDictionary.Item(System.Object)"><summary>
            Gets or sets the value of the property with the specified key.
            <para>
            [C#] In C#, this property is the indexer for the <c>PropertyDictionary</c> class. 
            </para></summary><param name="key">The property key for which to search.</param><value>
            The value of the property with the specified key. 
            </value></member><member name="T:ActiproSoftware.Text.Utility.Range"><summary>
            Represents an ordered pair of min and max values.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.Range.Contains(System.Int32)"><summary>
            Returns whether the range inclusively contains the specified value.
            </summary><param name="value">The value to check.</param><returns><c>true</c> if the range inclusively contains the specified value; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Utility.Range.Contains(ActiproSoftware.Text.Utility.Range)"><summary>
            Returns whether the range inclusively contains the specified <see cref="T:ActiproSoftware.Text.Utility.Range" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.Text.Utility.Range" /> to check.</param><returns><c>true</c> if the range inclusively contains the specified <see cref="T:ActiproSoftware.Text.Utility.Range" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Utility.Range.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.Text.Utility.Range.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.Text.Utility.Range.IntersectsWith(ActiproSoftware.Text.Utility.Range)"><summary>
            Returns whether the range intersects with the specified <see cref="T:ActiproSoftware.Text.Utility.Range" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.Text.Utility.Range" /> to check.</param><returns><c>true</c> if the range intersects with the specified <see cref="T:ActiproSoftware.Text.Utility.Range" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Utility.Range.Normalize"><summary>
            Normalizes the range values (ensures that the maximum value is greater than or equal to the minimum).
            </summary></member><member name="M:ActiproSoftware.Text.Utility.Range.OverlapsWith(ActiproSoftware.Text.Utility.Range)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.Utility.Range" /> overlaps with, or crosses, the specified <see cref="T:ActiproSoftware.Text.Utility.Range" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.Text.Utility.Range" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.Utility.Range" /> overlaps with, or crosses, the specified <see cref="T:ActiproSoftware.Text.Utility.Range" />; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Utility.Range.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.Text.Utility.Range.Union(ActiproSoftware.Text.Utility.Range)"><summary>
            Changes this <see cref="T:ActiproSoftware.Text.Utility.Range" /> to be the union of this <see cref="T:ActiproSoftware.Text.Utility.Range" /> with another <see cref="T:ActiproSoftware.Text.Utility.Range" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.Text.Utility.Range" /> with which to merge.</param></member><member name="M:ActiproSoftware.Text.Utility.Range.#ctor(System.Int32)"><summary>
            Initializes a new instance of the <see cref="T:ActiproSoftware.Text.Utility.Range" /> class with the specified min and max value.
            </summary><param name="value">The value to use for both the min and max.</param></member><member name="M:ActiproSoftware.Text.Utility.Range.#ctor(System.Int32,System.Int32)"><summary>
            Initializes a new instance of the <see cref="T:ActiproSoftware.Text.Utility.Range" /> class with the specified min and max values.
            </summary><param name="min">The minimum value of the range.</param><param name="max">The maximum value of the range.</param></member><member name="P:ActiproSoftware.Text.Utility.Range.Empty"><summary>
            Returns an empty <see cref="T:ActiproSoftware.Text.Utility.Range" />.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Utility.Range" /> that is empty.</value></member><member name="P:ActiproSoftware.Text.Utility.Range.IsEmpty"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.Utility.Range" /> is empty.
            </summary><value><c>true</c> if the <see cref="T:ActiproSoftware.Text.Utility.Range" /> is empty; otherwise, <c>false</c>.</value></member><member name="P:ActiproSoftware.Text.Utility.Range.IsNormalized"><summary>
            Gets whether the range is normalized (the maximum value is greater than or equal to the minimum).
            </summary><value><c>true</c> if the range is normalized; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Utility.Range.Length"><summary>
            Gets the length of this <see cref="T:ActiproSoftware.Text.Utility.Range" />.
            </summary><value>The length of this <see cref="T:ActiproSoftware.Text.Utility.Range" />.</value></member><member name="P:ActiproSoftware.Text.Utility.Range.Max"><summary>
            Gets or sets the maximum value of this <see cref="T:ActiproSoftware.Text.Utility.Range" />.
            </summary><value>The maximum value of this <see cref="T:ActiproSoftware.Text.Utility.Range" />.</value></member><member name="P:ActiproSoftware.Text.Utility.Range.Min"><summary>
            Gets or sets the minimum value of this <see cref="T:ActiproSoftware.Text.Utility.Range" />.
            </summary><value>The minimum value of this <see cref="T:ActiproSoftware.Text.Utility.Range" />.</value></member><member name="T:ActiproSoftware.Text.Utility.RangeCollection"><summary>
            Provides an implementation of a collection of <see cref="T:ActiproSoftware.Text.Utility.Range" /> objects.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.RangeCollection.BinarySearch(System.Int32)"><summary>
            Performs a binary search for the specified value.
            </summary><param name="value">The value for which to search.</param><returns>
            The index of the specified value in the specified array, if value is found. 
            If value is not found and value is less than one or more elements in array, 
            a negative number which is the bitwise complement of the index of the first element that is larger than value. 
            If value is not found and value is greater than any of the elements in array, 
            a negative number which is the bitwise complement of (the index of the last element plus 1). 
            </returns><remarks>
            This method should only be used if the integers in the list are guaranteed to be sorted.
            </remarks></member><member name="M:ActiproSoftware.Text.Utility.RangeCollection.Clear"><summary>
            Removes all elements in this collection.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.RangeCollection.Contains(System.Int32)"><summary>
            Returns whether the specified value is in the contained ranges.
            </summary><param name="value">The values for which to search.</param><returns><c>true</c> if the specified value is in the contained ranges; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Utility.RangeCollection.CopyTo(ActiproSoftware.Text.Utility.Range[],System.Int32)"><summary>
            Copies the entire collection to a compatible one-dimensional <c>Array</c>, 
            starting at the specified index of the target array.
            </summary><param name="array">
            The one-dimensional <see cref="T:ActiproSoftware.Text.Utility.Range" /> array that is the destination of the elements copied from the collection. 
            The array must have zero-based indexing. 
            </param><param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param></member><member name="M:ActiproSoftware.Text.Utility.RangeCollection.GetEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object for the entire collection.
            </summary><returns>An <c>IEnumerator</c> object for the entire collection</returns><remarks>
            Enumerators are intended to be used only to read data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para>
            The enumerator does not have exclusive access to the collection.
            </para><para>
            When an enumerator is instantiated, it takes a snapshot of the current state of the collection. 
            If changes are made to the collection, such as adding, modifying or deleting elements, the 
            snapshot gets out of sync and the enumerator throws an <c>InvalidOperationException</c>. 
            Two enumerators instantiated from the same collection at the same time can have 
            different snapshots of the collection.
            </para></remarks></member><member name="M:ActiproSoftware.Text.Utility.RangeCollection.IndexOf(System.Int32)"><summary>
            Returns the index of the range that contains the specified value.
            </summary><param name="value">The values for which to search.</param><returns>The index of the range that contains the specified value, or <c>-1</c> if not found.</returns></member><member name="M:ActiproSoftware.Text.Utility.RangeCollection.Merge(ActiproSoftware.Text.Utility.Range)"><summary>
            Merges the specified <see cref="T:ActiproSoftware.Text.Utility.Range" /> into the collection.
            </summary><param name="range">The <see cref="T:ActiproSoftware.Text.Utility.Range" /> to merge.</param><returns>
            The array of <see cref="T:ActiproSoftware.Text.Utility.Range" /> objects in which a merge was made.
            </returns></member><member name="M:ActiproSoftware.Text.Utility.RangeCollection.OverlapsWith(ActiproSoftware.Text.Utility.Range)"><summary>
            Returns whether the specified <see cref="T:ActiproSoftware.Text.Utility.Range" /> overlaps with a <see cref="T:ActiproSoftware.Text.Utility.Range" /> in the list.
            </summary><param name="range">The <see cref="T:ActiproSoftware.Text.Utility.Range" /> to examine.</param><returns><c>true</c> if the specified <see cref="T:ActiproSoftware.Text.Utility.Range" /> overlaps with a <see cref="T:ActiproSoftware.Text.Utility.Range" /> in the list; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Utility.RangeCollection.Unmerge(ActiproSoftware.Text.Utility.Range)"><summary>
            Removes any range portions that cross the specified <see cref="T:ActiproSoftware.Text.Utility.Range" />.
            </summary><param name="range">The <see cref="T:ActiproSoftware.Text.Utility.Range" /> to remove.</param><returns>
            The array of <see cref="T:ActiproSoftware.Text.Utility.Range" /> objects in which a merge was made.
            </returns></member><member name="M:ActiproSoftware.Text.Utility.RangeCollection.#ctor"><summary>
            Initializes a new instance of the <c>RangeCollection</c> class.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.RangeCollection.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>RangeCollection</c> class.
            </summary><param name="key">A unique string key that identifies the collection instance.</param></member><member name="P:ActiproSoftware.Text.Utility.RangeCollection.Count"><summary>
            Gets the number of elements contained in the collection.
            </summary><value>The number of elements contained in the collection.</value></member><member name="P:ActiproSoftware.Text.Utility.RangeCollection.Key"><summary>
            Gets a unique string key that identifies the collection instance.
            </summary><value>A unique string key that identifies the collection instance.</value></member><member name="P:ActiproSoftware.Text.Utility.RangeCollection.Item(System.Int32)"><summary>
            Gets the interval at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>RangeCollection</c> class. 
            </para></summary><param name="index">The index of the interval to return.</param><value>
            The <see cref="T:ActiproSoftware.Text.Utility.Range" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.Text.Utility.SimpleObservableCollection`1"><summary>
            Provides a generic collection that provides notifications when items are added or removed.
            </summary><typeparam name="T">The type of collection item.</typeparam></member><member name="M:ActiproSoftware.Text.Utility.SimpleObservableCollection`1.BlockReentrancy"><summary>
            Disallows reentrant attempts to change this collection.
            </summary><returns>An <see cref="T:System.IDisposable" /> object that can be used to dispose of the object.</returns></member><member name="M:ActiproSoftware.Text.Utility.SimpleObservableCollection`1.CheckReadOnly"><summary>
            Throws an exception if the collection is read-only.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.SimpleObservableCollection`1.CheckReentrancy"><summary>
            Checks for reentrant attempts to change this collection.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.SimpleObservableCollection`1.ClearItems"><summary>
            Removes all items from the collection.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.SimpleObservableCollection`1.InsertItem(System.Int32,`0)"><summary>
            Inserts an item into the collection at the specified index.
            </summary><param name="index">The index at which to insert the item.</param><param name="item">The item to insert.</param></member><member name="M:ActiproSoftware.Text.Utility.SimpleObservableCollection`1.OnItemAdded(System.Int32,`0)"><summary>
            Called after an item as been added into the collection.
            </summary><param name="index">The index at which the item is added.</param><param name="value">The item that is added.</param></member><member name="M:ActiproSoftware.Text.Utility.SimpleObservableCollection`1.OnItemAdding(System.Int32,`0)"><summary>
            Called before an item as been added into the collection.
            </summary><param name="index">The index at which the item is added.</param><param name="value">The item that is added.</param></member><member name="M:ActiproSoftware.Text.Utility.SimpleObservableCollection`1.OnItemRemoved(System.Int32,`0)"><summary>
            Called after an item has been removed from the collection.
            </summary><param name="index">The index at which the item is removed.</param><param name="value">The item that is removed.</param></member><member name="M:ActiproSoftware.Text.Utility.SimpleObservableCollection`1.OnItemRemoving(System.Int32,`0)"><summary>
            Called before an item has been removed from the collection.
            </summary><param name="index">The index at which the item is removed.</param><param name="value">The item that is removed.</param></member><member name="M:ActiproSoftware.Text.Utility.SimpleObservableCollection`1.RemoveItem(System.Int32)"><summary>
            Removes the item at the specified index.
            </summary><param name="index">The index of the item to remove.</param></member><member name="M:ActiproSoftware.Text.Utility.SimpleObservableCollection`1.SetItem(System.Int32,`0)"><summary>
            Replaces the item at the specified index.
            </summary><param name="index">The index of the item to replace.</param><param name="item">The item with which to replace.</param></member><member name="P:ActiproSoftware.Text.Utility.SimpleObservableCollection`1.IsReadOnly"><summary>
            Gets whether the collection is allowed to be modified.
            </summary><value><c>true</c> if the collection is allowed to be modified; otherwise, <c>false</c>.
            </value></member><member name="E:ActiproSoftware.Text.Utility.SimpleObservableCollection`1.ItemAdding"><summary>
            Occurs before an item is added to the collection.
            </summary><eventdata>
            The event handler receives an argument of type <c>CollectionChangeEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.Utility.SimpleObservableCollection`1.ItemAdded"><summary>
            Occurs after an item is added to the collection.
            </summary><eventdata>
            The event handler receives an argument of type <c>CollectionChangeEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.Utility.SimpleObservableCollection`1.ItemRemoving"><summary>
            Occurs before an item is removed from the collection.
            </summary><eventdata>
            The event handler receives an argument of type <c>CollectionChangeEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.Utility.SimpleObservableCollection`1.ItemRemoved"><summary>
            Occurs after an item is removed from the collection.
            </summary><eventdata>
            The event handler receives an argument of type <c>CollectionChangeEventArgs</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.Text.Utility.SimpleSynchronizedCollection`1"><summary>
            Provides a thread-safe generic collection that provides notifications when items are added or removed.
            </summary><typeparam name="T">The type of collection item.</typeparam></member><member name="M:ActiproSoftware.Text.Utility.SimpleSynchronizedCollection`1.ClearItems"><summary>
            Removes all items from the collection.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.SimpleSynchronizedCollection`1.InsertItem(System.Int32,`0)"><summary>
            Inserts an item into the collection at the specified index.
            </summary><param name="index">The index at which to insert the item.</param><param name="item">The item to insert.</param></member><member name="M:ActiproSoftware.Text.Utility.SimpleSynchronizedCollection`1.RemoveItem(System.Int32)"><summary>
            Removes the item at the specified index.
            </summary><param name="index">The index of the item to remove.</param></member><member name="M:ActiproSoftware.Text.Utility.SimpleSynchronizedCollection`1.SetItem(System.Int32,`0)"><summary>
            Replaces the item at the specified index.
            </summary><param name="index">The index of the item to replace.</param><param name="item">The item with which to replace.</param></member><member name="T:ActiproSoftware.Text.Utility.StringHelper"><summary>
            Provides numerous utility methods for working with strings.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.StringHelper.ContainsRtlCharacters(System.String)"><summary>
            Returns whether the specified text string contains any right-to-left characters.
            </summary><param name="text">The string to examine.</param><returns><c>true</c> if the string contains any right-to-left characters; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Utility.StringHelper.ConvertTextToLines(System.String)"><summary>
            Converts the text to an array of lines.
            </summary><param name="text">The text to examine.</param><returns>The array of lines.</returns></member><member name="M:ActiproSoftware.Text.Utility.StringHelper.CreateDescription(System.String)"><summary>
            Returns a description from a key.
            </summary><param name="key">The key to examine.</param><returns>The description that was created.</returns></member><member name="M:ActiproSoftware.Text.Utility.StringHelper.GetIndentAmount(System.String,System.Int32)"><summary>
            Returns the indent amount of the specified text.
            </summary><param name="text">The text to examine.</param><param name="tabSize">The tab size.</param><returns>The indent amount of the specified text.</returns></member><member name="M:ActiproSoftware.Text.Utility.StringHelper.GetIndentText(System.Boolean,System.Int32,System.Int32)"><summary>
            Returns the string to use for indenting by the specified amount.
            </summary><param name="convertTabsToSpaces">Whether to convert tabs to spaces.</param><param name="tabSize">The number of columns in a tab.</param><param name="indentAmount">The number of columns to indent.</param><returns>The string to use for indenting by the specified amount.</returns></member><member name="M:ActiproSoftware.Text.Utility.StringHelper.GetLineTerminatorText(ActiproSoftware.Text.LineTerminator)"><summary>
            Returns the text representation of the specified <see cref="T:ActiproSoftware.Text.LineTerminator" />.
            </summary><param name="lineTerminator">The <see cref="T:ActiproSoftware.Text.LineTerminator" /> to examine.</param><returns>The text representation of the specified <see cref="T:ActiproSoftware.Text.LineTerminator" />.</returns></member><member name="M:ActiproSoftware.Text.Utility.StringHelper.GetTextPositionDelta(System.String)"><summary>
            Returns the <see cref="T:ActiproSoftware.Text.TextPosition" /> delta of the specified inserted text.
            </summary><param name="text">The text to examine.</param><returns>The <see cref="T:ActiproSoftware.Text.TextPosition" /> delta of the specified inserted text.</returns></member><member name="M:ActiproSoftware.Text.Utility.StringHelper.IsRtlCharacter(System.Char)"><summary>
            Returns whether the specified character is a right-to-left character.
            </summary><param name="ch">The character to examine.</param><returns><c>true</c> if the specified character is a right-to-left character; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Utility.StringHelper.TrimTrailingWhitespace(System.String@)"><summary>
            Trims the trailing whitespace off of the specified text.
            </summary><param name="text">The text to modify.</param><returns><c>true</c> if a change was made; otherwise, <c>false</c>.
            </returns></member><member name="T:ActiproSoftware.Text.Utility.StringPropertyChangedEventArgs"><summary>
            Provides event arguments for a property change event, indicating the old and new values.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.StringPropertyChangedEventArgs.#ctor(System.String,System.String)"><summary>
            Initializes a new instance of the <c>StringPropertyChangedEventArgs</c> class.
            </summary><param name="oldValue">The previous value of the property being tracked as reported by an event.</param><param name="newValue">The new value of the property being tracked as reported by an event.</param></member><member name="T:ActiproSoftware.Text.Utility.WeakEventListener`2"><summary>
            Provides a listener that allows for "weak" listening to events.
            </summary><typeparam name="TInstance">The instance type that owns the listener.</typeparam><typeparam name="TEventArgs">The event arguments type.</typeparam><remarks>
            Make sure that only variables (i.e. not fields) for the event source are used when adding/removing event ties;
            otherwise this will not result in a "weak" listener.
            The instance type should also be disposable and should detach the event listener in the finalizer or a memory leak
            of <c>WeakEventListener</c> objects may occur.
            </remarks></member><member name="M:ActiproSoftware.Text.Utility.WeakEventListener`2.Detach"><summary>
            Detaches the event listener from the event.
            </summary></member><member name="M:ActiproSoftware.Text.Utility.WeakEventListener`2.OnEvent(System.Object,`1)"><summary>
            The method that handles the event.
            </summary><param name="source">The source of the event.</param><param name="eventArgs">The event arguments.</param></member><member name="M:ActiproSoftware.Text.Utility.WeakEventListener`2.#ctor(`0)"><summary>
            Initializes a new instance of the <c>WeakEventListener</c> class.
            </summary><param name="instance">The instance that owns the listener.</param></member><member name="P:ActiproSoftware.Text.Utility.WeakEventListener`2.OnDetachAction"><summary>
            Gets or sets the delegate to execute when the event is detached.
            </summary><value>The delegate to execute when the event is detached.</value></member><member name="P:ActiproSoftware.Text.Utility.WeakEventListener`2.OnEventAction"><summary>
            Gets or sets the delegate to execute when the event is raised.
            </summary><value>The delegate to execute when the event is raised.</value></member><member name="T:ActiproSoftware.Text.Undo.IUndoableTextChange"><summary>
            Provides the base requirements for a single undoable text change unit.
            </summary><remarks>
            This interface only stores the necessary information to reconstruct an <see cref="T:ActiproSoftware.Text.ITextChange" /> for undo/redo purposes.
            </remarks></member><member name="P:ActiproSoftware.Text.Undo.IUndoableTextChange.CustomData"><summary>
            Gets custom data that can be persisted with the text change and restored when undo operations occur later on.
            </summary><value>The custom data.</value></member><member name="P:ActiproSoftware.Text.Undo.IUndoableTextChange.Description"><summary>
            Gets the description of the contents of the text change, usually displayed in the user interface.
            </summary><value>The description of the contents of the text change, usually displayed in the user interface.</value></member><member name="P:ActiproSoftware.Text.Undo.IUndoableTextChange.IsMerged"><summary>
            Gets whether this text change is the result of a merge of two or more text changes.
            </summary><value><c>true</c> if this text change is the result of a merge of two or more text changes; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Undo.IUndoableTextChange.Operations"><summary>
            Gets the read-only list of <see cref="T:ActiproSoftware.Text.ITextChangeOperation" /> objects that make up this text change.
            </summary><value>The read-only list of <see cref="T:ActiproSoftware.Text.ITextChangeOperation" /> objects that make up this text change.</value></member><member name="P:ActiproSoftware.Text.Undo.IUndoableTextChange.PostSelectionPositionRanges"><summary>
            Gets or sets the collection of sorted non-overlapping <see cref="T:ActiproSoftware.Text.TextPositionRange" /> objects that should be selected in the source view after the text change is applied.
            </summary><value>The collection of sorted non-overlapping <see cref="T:ActiproSoftware.Text.TextPositionRange" /> objects that should be selected in the source view after the text change is applied.</value></member><member name="P:ActiproSoftware.Text.Undo.IUndoableTextChange.PreSelectionPositionRanges"><summary>
            Gets or sets the collection of sorted non-overlapping <see cref="T:ActiproSoftware.Text.TextPositionRange" /> objects that were selected in the source view before the text change is applied.
            </summary><value>The collection of sorted non-overlapping <see cref="T:ActiproSoftware.Text.TextPositionRange" /> objects that were selected in the source view before the text change is applied.</value></member><member name="P:ActiproSoftware.Text.Undo.IUndoableTextChange.RetainSelection"><summary>
            Gets whether to prevent the caret from moving to the end of the text change in the active view.
            </summary><value><c>true</c> if the caret move should be prevented; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Undo.IUndoableTextChange.Type"><summary>
            Gets an <see cref="T:ActiproSoftware.Text.ITextChangeType" /> indicating the type of change that was made.
            </summary><value>An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> indicating the type of change that was made.</value></member><member name="T:ActiproSoftware.Text.Undo.IUndoableTextChangeStack"><summary>
            Provides the base requirements for a simple last-in-first-out collection of <see cref="T:ActiproSoftware.Text.Undo.IUndoableTextChange" /> objects.
            </summary></member><member name="M:ActiproSoftware.Text.Undo.IUndoableTextChangeStack.CopyTo(ActiproSoftware.Text.Undo.IUndoableTextChange[],System.Int32)"><summary>
            Copies the entire collection to a compatible one-dimensional <c>Array</c>, 
            starting at the specified index of the target array.
            </summary><param name="array">
            The one-dimensional <see cref="T:ActiproSoftware.Text.Undo.IUndoableTextChange" /> array that is the destination of the elements copied from the collection. 
            The array must have zero-based indexing. 
            </param><param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param></member><member name="M:ActiproSoftware.Text.Undo.IUndoableTextChangeStack.GetTextChange(System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Undo.IUndoableTextChange" /> that the specified location in the stack.
            </summary><param name="index">The index of the text change to check.</param><returns>The <see cref="T:ActiproSoftware.Text.Undo.IUndoableTextChange" /> that the specified location in the stack.</returns></member><member name="M:ActiproSoftware.Text.Undo.IUndoableTextChangeStack.IndexOf(ActiproSoftware.Text.Undo.IUndoableTextChange)"><summary>
            Returns the index of the <see cref="T:ActiproSoftware.Text.Undo.IUndoableTextChange" /> in the list.
            </summary><param name="textChange">The <see cref="T:ActiproSoftware.Text.Undo.IUndoableTextChange" /> to look for in the list.</param><returns>The index of the <see cref="T:ActiproSoftware.Text.Undo.IUndoableTextChange" /> in the list, or <c>-1</c> if not found.</returns></member><member name="P:ActiproSoftware.Text.Undo.IUndoableTextChangeStack.Capacity"><summary>
            Gets or sets the capacity of the stack.
            </summary><value>The capacity of the stack.</value><remarks>
            If a new text change added to the stack causes the stack to exceed its capacity, the text changes
            at the bottom of the stack are removed until the stack no longer exceeds its capacity.
            </remarks></member><member name="P:ActiproSoftware.Text.Undo.IUndoableTextChangeStack.Count"><summary>
            Gets the count of text changes on the stack.
            </summary><value>The count of text changes on the stack.</value></member><member name="P:ActiproSoftware.Text.Undo.IUndoableTextChangeStack.IsAtSavePoint"><summary>
            Gets whether the last text change on the stack is a save point.
            </summary><value><c>true</c> if the last text change on the stack is a save point; otherwise, <c>false</c>.
            </value></member><member name="E:ActiproSoftware.Text.Undo.IUndoableTextChangeStack.CapacityChanged"><summary>
            Occurs when the capacity of the stack is changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventHandler</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.Undo.IUndoableTextChangeStack.StackChanged"><summary>
            Occurs when the contents of the stack are changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventHandler</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.Text.Undo.IUndoHistory"><summary>
            Provides the base requirements for an object that tracks undo and redo history for a document
            and allows re-application of those text changes.
            </summary></member><member name="M:ActiproSoftware.Text.Undo.IUndoHistory.Clear"><summary>
            Clears the undo and redo stacks, without resetting change tracking.
            </summary></member><member name="M:ActiproSoftware.Text.Undo.IUndoHistory.Clear(System.Boolean)"><summary>
            Clears the undo and redo stacks.
            </summary><param name="resetChangeTracking">Whether to also reset all change tracking.</param></member><member name="M:ActiproSoftware.Text.Undo.IUndoHistory.GetChangeTypeForLineRange(System.Int32,System.Int32)"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Undo.SavePointChangeType" /> for the specified line range.
            </summary><param name="startLineIndex">The start index of the line range to examine.</param><param name="endLineIndex">The end index of the line range to examine.</param><returns>The <see cref="T:ActiproSoftware.Text.Undo.SavePointChangeType" /> for the specified line range.</returns></member><member name="M:ActiproSoftware.Text.Undo.IUndoHistory.Redo"><summary>
            Performs the top redo text change.
            </summary><returns><c>true</c> if redo text change occurred successfully; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Undo.IUndoHistory.Redo(System.Int32)"><summary>
            Performs the specified number of redo text changes.
            </summary><param name="count">The number of redo text changes to perform.</param><returns>The number of redo text changes that were performed.</returns></member><member name="M:ActiproSoftware.Text.Undo.IUndoHistory.Undo"><summary>
            Performs the top undo text change.
            </summary><returns><c>true</c> if undo text change occurred successfully; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Undo.IUndoHistory.Undo(System.Int32)"><summary>
            Performs the specified number of undo text changes.
            </summary><param name="count">The number of undo text changes to perform.</param><returns>The number of undo text changes that were performed.</returns></member><member name="P:ActiproSoftware.Text.Undo.IUndoHistory.CanRedo"><summary>
            Gets whether at least one redo text change is available to execute.
            </summary><value><c>true</c> if there is at least one redo text change is available to execute; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Undo.IUndoHistory.CanUndo"><summary>
            Gets whether at least one undo text change is available to execute.
            </summary><value><c>true</c> if there is at least one undo text change is available to execute; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Undo.IUndoHistory.RedoStack"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Undo.IUndoableTextChangeStack" /> containing the redo stack.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Undo.IUndoableTextChangeStack" /> containing the redo stack.</value></member><member name="P:ActiproSoftware.Text.Undo.IUndoHistory.UndoStack"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Undo.IUndoableTextChangeStack" /> containing the undo stack.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Undo.IUndoableTextChangeStack" /> containing the undo stack.</value></member><member name="E:ActiproSoftware.Text.Undo.IUndoHistory.Cleared"><summary>
            Occurs when the undo history is programmatically cleared.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata><remarks>
            This event is raised when the <see cref="M:ActiproSoftware.Text.Undo.IUndoHistory.Clear" /> method is called.
            </remarks></member><member name="E:ActiproSoftware.Text.Undo.IUndoHistory.UndoRedoRequested"><summary>
            Occurs when an undo or redo operation is requested.
            </summary><eventdata>
            The event handler receives an argument of type <c>UndoRedoRequestEventArgs</c> containing data related to this event.
            </eventdata><remarks>
            This event is raised when the <see cref="M:ActiproSoftware.Text.Undo.IUndoHistory.Undo" /> or <see cref="M:ActiproSoftware.Text.Undo.IUndoHistory.Redo" /> method is called.
            </remarks></member><member name="T:ActiproSoftware.Text.Undo.SavePointChangeType"><summary>
            Specifies the type of changes that have been made to a character range since the last save point.
            </summary></member><member name="F:ActiproSoftware.Text.Undo.SavePointChangeType.None"><summary>
            There are no changes from the original text.
            </summary></member><member name="F:ActiproSoftware.Text.Undo.SavePointChangeType.SavedChanges"><summary>
            There are saved changed made since the last save point.
            </summary></member><member name="F:ActiproSoftware.Text.Undo.SavePointChangeType.UnsavedChanges"><summary>
            There are unsaved changes made since the last save point.
            </summary></member><member name="F:ActiproSoftware.Text.Undo.SavePointChangeType.RevertedChanges"><summary>
            These are reverted changes where undo was performed after the last save point.
            </summary></member><member name="T:ActiproSoftware.Text.Undo.UndoRedoRequestEventArgs"><summary>
            Event arguments for when an undo or redo operation is requesting to be applied to an <see cref="T:ActiproSoftware.Text.ITextDocument" />.
            </summary></member><member name="M:ActiproSoftware.Text.Undo.UndoRedoRequestEventArgs.#ctor(ActiproSoftware.Text.ITextDocument,ActiproSoftware.Text.Undo.IUndoableTextChange,System.Boolean)"><summary>
            Initializes a new instance of the <c>UndoRedoRequestEventArgs</c> class.
            </summary><param name="document">The <see cref="T:ActiproSoftware.Text.ITextDocument" /> that is affected by this event, if known.</param><param name="textChange">The <see cref="T:ActiproSoftware.Text.Undo.IUndoableTextChange" /> that is made.</param><param name="isUndo"><c>true</c> the event is for an undo operation; otherwise, <c>false</c>, meaning redo.</param></member><member name="P:ActiproSoftware.Text.Undo.UndoRedoRequestEventArgs.Document"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextDocument" /> that is affected by this event, if known.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextDocument" /> that is affected by this event, if known.</value></member><member name="P:ActiproSoftware.Text.Undo.UndoRedoRequestEventArgs.IsUndo"><summary>
            Gets whether this event is for an undo operation.
            </summary><value><c>true</c> the event is for an undo operation; otherwise, <c>false</c>, meaning redo.</value></member><member name="P:ActiproSoftware.Text.Undo.UndoRedoRequestEventArgs.TextChange"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Undo.IUndoableTextChange" /> that is made to the document.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Undo.IUndoableTextChange" /> that is made to the document.</value></member><member name="T:ActiproSoftware.Text.Tagging.IClassificationTag"><summary>
            Provides the base requirements for an <see cref="T:ActiproSoftware.Text.IClassificationType" /> that can be associated with some text range.
            </summary><seealso cref="T:ActiproSoftware.Text.Tagging.Implementation.ClassificationTag" /></member><member name="P:ActiproSoftware.Text.Tagging.IClassificationTag.ClassificationType"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> associated with this tag.
            </summary><value>The <see cref="T:ActiproSoftware.Text.IClassificationType" /> associated with this tag.</value></member><member name="T:ActiproSoftware.Text.Tagging.ICodeDocumentTaggerProvider"><summary>
            Provides the base requirements for a object that can create <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> objects for an <see cref="T:ActiproSoftware.Text.ICodeDocument" />.
            </summary><seealso cref="T:ActiproSoftware.Text.Tagging.Implementation.CodeDocumentTaggerProvider`1" /></member><member name="M:ActiproSoftware.Text.Tagging.ICodeDocumentTaggerProvider.GetTagger``1(ActiproSoftware.Text.ICodeDocument)"><summary>
            Returns an <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> for the specified <see cref="T:ActiproSoftware.Text.ICodeDocument" />.
            </summary><typeparam name="T">The type of <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> created by the tagger.</typeparam><param name="document">The <see cref="T:ActiproSoftware.Text.ICodeDocument" /> that requires an <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" />.</param><returns>An <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> for the specified <see cref="T:ActiproSoftware.Text.ICodeDocument" />.</returns></member><member name="P:ActiproSoftware.Text.Tagging.ICodeDocumentTaggerProvider.TagTypes"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Tagging.ITag" /><c>Type</c> objects that are supported by the <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> objects created by this provider.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Tagging.ITag" /><c>Type</c> objects that are supported by the <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> objects created by this provider.</value></member><member name="T:ActiproSoftware.Text.Tagging.ICollectionTagger`1"><summary>
            Provides the base requirements for an <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> that maintains a simple collection of tagged ranges.
            </summary><typeparam name="T">The tag type.</typeparam></member><member name="M:ActiproSoftware.Text.Tagging.ICollectionTagger`1.Add(ActiproSoftware.Text.Tagging.TagVersionRange{`0})"><summary>
            Adds a tag range to the collection.
            </summary><param name="tagRange">The tag range to add to the collection.</param><remarks>
            This is the lowest-level method used for adding a tag range, and gives the most control over snapshot translation options.
            </remarks></member><member name="M:ActiproSoftware.Text.Tagging.ICollectionTagger`1.Add(ActiproSoftware.Text.ITextSnapshotLine,`0)"><summary>
            Adds a tag range that is associated with a single snapshot line (e.g. a bookmark indicator tag).
            </summary><param name="snapshotLine">The target <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" />.</param><param name="tag">The <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> to add.</param><returns>The <see cref="T:ActiproSoftware.Text.Tagging.TagVersionRange`1" /> that was created.</returns><remarks>
            The generated <see cref="T:ActiproSoftware.Text.ITextVersionRange" /> is created with the <c>DeleteWhenZeroLength</c> and <c>LineBased</c> flags.
            </remarks></member><member name="M:ActiproSoftware.Text.Tagging.ICollectionTagger`1.Add(ActiproSoftware.Text.TextSnapshotRange,`0)"><summary>
            Adds a tag range that is applied to a snapshot text range (e.g. a breakpoint indicator tag).
            </summary><param name="snapshotRange">The target <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.</param><param name="tag">The <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> to add.</param><returns>The <see cref="T:ActiproSoftware.Text.Tagging.TagVersionRange`1" /> that was created.</returns><remarks>
            The generated <see cref="T:ActiproSoftware.Text.ITextVersionRange" /> is created with the <c>DeleteWhenZeroLength</c> flag.
            </remarks></member><member name="M:ActiproSoftware.Text.Tagging.ICollectionTagger`1.Clear"><summary>
            Removes all items from the collection.
            </summary></member><member name="M:ActiproSoftware.Text.Tagging.ICollectionTagger`1.CreateBatch"><summary>
            Creates an <see cref="T:System.IDisposable" /> object such that while the object is not disposed, items can be added
            to this collection without any change events being fired, thereby allowing batch updates to occur.
            </summary><returns>An <see cref="T:System.IDisposable" /> object.  Once disposed, the batch is ended.</returns></member><member name="M:ActiproSoftware.Text.Tagging.ICollectionTagger`1.Contains(ActiproSoftware.Text.Tagging.TagVersionRange{`0})"><summary>
            Determines whether the collection contains a specific value.
            </summary><param name="tagRange">The object to locate in the collection.</param><returns><c>true</c> if the item is found in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Tagging.ICollectionTagger`1.FindNext(ActiproSoftware.Text.ITextSnapshotLine,ActiproSoftware.Text.Tagging.ITagSearchOptions{`0})"><summary>
            Finds the next line-based tag (e.g. a bookmark indicator tag), using the specified search options.
            </summary><param name="snapshotLine">The <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" /> from which to start the search.</param><param name="options">The optional <see cref="T:ActiproSoftware.Text.Tagging.ITagSearchOptions`1" /> that specifies search options.</param><returns>The <see cref="T:ActiproSoftware.Text.Tagging.TagVersionRange`1" /> that was found, if any.</returns></member><member name="M:ActiproSoftware.Text.Tagging.ICollectionTagger`1.FindNext(ActiproSoftware.Text.TextSnapshotOffset,ActiproSoftware.Text.Tagging.ITagSearchOptions{`0})"><summary>
            Finds the next text range-based tag (e.g. a breakpoint indicator tag), using the specified search options.
            </summary><param name="snapshotOffset">The <see cref="T:ActiproSoftware.Text.TextSnapshotOffset" /> from which to start the search.</param><param name="options">The optional <see cref="T:ActiproSoftware.Text.Tagging.ITagSearchOptions`1" /> that specifies search options.</param><returns>The <see cref="T:ActiproSoftware.Text.Tagging.TagVersionRange`1" /> that was found, if any.</returns></member><member name="M:ActiproSoftware.Text.Tagging.ICollectionTagger`1.GetEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object for the entire collection.
            </summary><returns>An <c>IEnumerator</c> object for the entire collection</returns><remarks>
            Enumerators are intended to be used only to read data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para>
            The enumerator does not have exclusive access to the collection.
            </para><para>
            When an enumerator is instantiated, it takes a snapshot of the current state of the collection. 
            If changes are made to the collection, such as adding, modifying or deleting elements, the 
            snapshot gets out of sync and the enumerator throws an <c>InvalidOperationException</c>. 
            Two enumerators instantiated from the same collection at the same time can have 
            different snapshots of the collection.
            </para></remarks></member><member name="M:ActiproSoftware.Text.Tagging.ICollectionTagger`1.Remove(ActiproSoftware.Text.Tagging.TagVersionRange{`0})"><summary>
            Removes the first occurrence of a specific tag range from the collection.
            </summary><param name="tagRange">The tag range to remove from the collection.</param><returns><c>true</c> if the tag range was successfully removed from the collection; otherwise, <c>false</c></returns></member><member name="M:ActiproSoftware.Text.Tagging.ICollectionTagger`1.Remove(`0)"><summary>
            Removes a specific tag instance from the collection.
            </summary><param name="tag">The <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> to remove from the collection.</param><returns><c>true</c> if the tag was successfully removed from the collection; otherwise, <c>false</c></returns></member><member name="M:ActiproSoftware.Text.Tagging.ICollectionTagger`1.RemoveAll(System.Predicate{ActiproSoftware.Text.Tagging.TagVersionRange{`0}})"><summary>
            Removes all objects that match the conditions defined by the specified predicate.
            </summary><param name="match">The predicate that defines the conditions for removal.</param><returns>The number of objects that were removed.</returns></member><member name="M:ActiproSoftware.Text.Tagging.ICollectionTagger`1.Toggle(ActiproSoftware.Text.ITextSnapshotLine,`0)"><summary>
            Toggles whether a tag is associated with a single snapshot line (e.g. a bookmark indicator tag).
            </summary><param name="snapshotLine">The target <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" />.</param><param name="tag">The <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> to add, if no tag is already on the line.</param><returns>The <see cref="T:ActiproSoftware.Text.Tagging.TagVersionRange`1" /> that was created, if a tag was added.</returns></member><member name="M:ActiproSoftware.Text.Tagging.ICollectionTagger`1.Toggle(ActiproSoftware.Text.TextSnapshotRange,`0)"><summary>
            Toggles whether a tag is associated with a snapshot text range (e.g. a breakpoint indicator tag).
            </summary><param name="snapshotRange">The target <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.</param><param name="tag">The <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> to add, if no tag is already in the text range.</param><returns>The <see cref="T:ActiproSoftware.Text.Tagging.TagVersionRange`1" /> that was created, if a tag was added.</returns></member><member name="P:ActiproSoftware.Text.Tagging.ICollectionTagger`1.Count"><summary>
            Gets the number of elements contained in the collection.
            </summary><value>The number of elements contained in the collection.</value></member><member name="P:ActiproSoftware.Text.Tagging.ICollectionTagger`1.Item(`0)"><summary>
            Gets the tag range that points to the specified tag.
            <para>
            [C#] In C#, this property is the indexer for the <c>ICollectionTagger</c> interface. 
            </para></summary><param name="tag">The tag for which to search.</param><value>
            The tag range that points to the specified tag.
            </value></member><member name="T:ActiproSoftware.Text.Tagging.TagAggregatorBase`1"><summary>
            An abstract base class for an object that aggregates <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> objects from multiple <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> instances.
            </summary><typeparam name="T">The type of <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> associated with this aggregator.</typeparam></member><member name="M:ActiproSoftware.Text.Tagging.TagAggregatorBase`1.AttachDocument(ActiproSoftware.Text.ICodeDocument)"><summary>
            Attaches to a new document.
            </summary><param name="newDocument">The new <see cref="T:ActiproSoftware.Text.ICodeDocument" />.</param></member><member name="M:ActiproSoftware.Text.Tagging.TagAggregatorBase`1.DetachDocument"><summary>
            Detaches the document.
            </summary></member><member name="M:ActiproSoftware.Text.Tagging.TagAggregatorBase`1.Dispose(System.Boolean)"><summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary><param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param><remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing" /> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing" /> set to <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.Text.Tagging.TagAggregatorBase`1.GetTags(ActiproSoftware.Text.TextSnapshotRange[])"><summary>
            Returns the tag ranges that intersect with the specified snapshot ranges.
            </summary><param name="snapshotRanges">The array of snapshot ranges.</param><returns>The tag ranges that intersect with the specified snapshot ranges.</returns></member><member name="M:ActiproSoftware.Text.Tagging.TagAggregatorBase`1.GetTags(ActiproSoftware.Text.NormalizedTextSnapshotRangeCollection,System.Object)"><summary>
            Returns the tag ranges that intersect with the specified normalized snapshot ranges.
            </summary><param name="snapshotRanges">The collection of normalized snapshot ranges.</param><param name="parameter">An optional parameter that provides contextual information about the tag request.</param><returns>The tag ranges that intersect with the specified normalized snapshot ranges.</returns></member><member name="M:ActiproSoftware.Text.Tagging.TagAggregatorBase`1.GetTaggers"><summary>
            Returns the list of available taggers.
            </summary><returns>The list of available taggers.</returns></member><member name="M:ActiproSoftware.Text.Tagging.TagAggregatorBase`1.IsRefreshRequired(System.Object)"><summary>
            Returns whether a <see cref="M:ActiproSoftware.Text.Tagging.TagAggregatorBase`1.Refresh" /> is required when the specified service is added to or removed from the document's language.
            </summary><param name="service">The service to examine.</param><returns><c>true</c> if a refresh is required; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Tagging.TagAggregatorBase`1.OnTagsChanged(ActiproSoftware.Text.Tagging.TagsChangedEventArgs)"><summary>
            Raises the <see cref="E:ActiproSoftware.Text.Tagging.TagAggregatorBase`1.TagsChanged" /> event.
            </summary><param name="e">A <c>TagsChangedEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.Text.Tagging.TagAggregatorBase`1.Refresh"><summary>
            Refreshes the tag aggregator by reloading the taggers being watched.
            </summary></member><member name="M:ActiproSoftware.Text.Tagging.TagAggregatorBase`1.#ctor"><summary>
            Initializes a new instance of the <c>TagAggregatorBase</c> class.
            </summary></member><member name="M:ActiproSoftware.Text.Tagging.TagAggregatorBase`1.#ctor(System.Boolean)"><summary>
            Initializes a new instance of the <c>TagAggregatorBase</c> class.
            </summary><param name="canAttachToEvents">Whether to attach to events such as document language changes.</param></member><member name="P:ActiproSoftware.Text.Tagging.TagAggregatorBase`1.CanAttachToEvents"><summary>
            Gets whether the tag aggregator can attach to events.
            </summary><c>true</c> if the tag aggregator can attach to events; otherwise, <c>false</c>.
        </member><member name="P:ActiproSoftware.Text.Tagging.TagAggregatorBase`1.IsDisposed"><summary>
            Gets whether this object has been disposed.
            </summary><value><c>true</c> if this object has been disposed; otherwise, <c>false</c>.
            </value></member><member name="E:ActiproSoftware.Text.Tagging.TagAggregatorBase`1.TagsChanged"><summary>
            Occurs after available tags for a specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> have changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>TagsChangedEventArgs</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.Text.Tagging.IReadOnlyRegionTag"><summary>
            Provides the base requirements for an <see cref="T:ActiproSoftware.Text.Tagging.IReadOnlyRegionTag" /> that can be associated with some text range to mark it as read-only.
            </summary><seealso cref="T:ActiproSoftware.Text.Tagging.Implementation.ReadOnlyRegionTag" /></member><member name="P:ActiproSoftware.Text.Tagging.IReadOnlyRegionTag.IncludeFirstEdge"><summary>
            Gets or sets whether to consider any text ranges that align to this tag's leading (first) edge as being in the read-only region.
            </summary><value><c>true</c> if any text ranges that align to this tag's leading (first) edge are considered as in the read-only region; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Tagging.IReadOnlyRegionTag.IncludeLastEdge"><summary>
            Gets or sets whether to consider any text ranges that align to this tag's trailing (last) edge as being in the read-only region.
            </summary><value><c>true</c> if any text ranges that align to this tag's trailing (last) edge are considered as in the read-only region; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Tagging.IReadOnlyRegionTag.IsReadOnly"><summary>
            Gets whether the tagged text range is currently read-only.
            </summary><value><c>true</c> if the tagged text range is currently read-only; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.Text.Tagging.ITag"><summary>
            Provides the base requirements for a data object that can be associated with some text range.
            </summary></member><member name="T:ActiproSoftware.Text.Tagging.ITagAggregator`1"><summary>
            Provides the base requirements for a object that aggregates <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> objects from multiple <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> instances.
            </summary><typeparam name="T">The type of <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> associated with this aggregator.</typeparam></member><member name="M:ActiproSoftware.Text.Tagging.ITagAggregator`1.GetTags(ActiproSoftware.Text.TextSnapshotRange[])"><summary>
            Returns the tag ranges that intersect with the specified snapshot ranges.
            </summary><param name="snapshotRanges">The array of snapshot ranges.</param><returns>The tag ranges that intersect with the specified snapshot ranges.</returns></member><member name="M:ActiproSoftware.Text.Tagging.ITagAggregator`1.GetTags(ActiproSoftware.Text.NormalizedTextSnapshotRangeCollection,System.Object)"><summary>
            Returns the tag ranges that intersect with the specified normalized snapshot ranges.
            </summary><param name="snapshotRanges">The collection of normalized snapshot ranges.</param><param name="parameter">An optional parameter that provides contextual information about the tag request.</param><returns>The tag ranges that intersect with the specified normalized snapshot ranges.</returns></member><member name="E:ActiproSoftware.Text.Tagging.ITagAggregator`1.TagsChanged"><summary>
            Occurs after available tags for a specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> have changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>TagsChangedEventArgs</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.Text.Tagging.ITagger`1"><summary>
            Provides the base requirements for a object that can provide <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> objects that intersect with specified text ranges
            within an <see cref="T:ActiproSoftware.Text.ICodeDocument" />.
            </summary><typeparam name="T">The type of tag associated with this tagger.</typeparam><seealso cref="T:ActiproSoftware.Text.Tagging.Implementation.TokenTagger" /></member><member name="M:ActiproSoftware.Text.Tagging.ITagger`1.Close"><summary>
            Closes the tagger and detaches it.
            </summary></member><member name="M:ActiproSoftware.Text.Tagging.ITagger`1.GetTags(ActiproSoftware.Text.NormalizedTextSnapshotRangeCollection,System.Object)"><summary>
            Returns the tag ranges that intersect with the specified normalized snapshot ranges.
            </summary><param name="snapshotRanges">The collection of normalized snapshot ranges.</param><param name="parameter">An optional parameter that provides contextual information about the tag request.</param><returns>The tag ranges that intersect with the specified normalized snapshot ranges.</returns></member><member name="E:ActiproSoftware.Text.Tagging.ITagger`1.Closed"><summary>
            Occurs after the tagger is closed. 
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.Tagging.ITagger`1.TagsChanged"><summary>
            Occurs after available tags for a specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> have changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>TagsChangedEventArgs</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.Text.Tagging.ITagSearchOptions`1"><summary>
            Provides the base requirements for a class that stores tag search operation options.
            </summary><typeparam name="T">The tag type.</typeparam></member><member name="P:ActiproSoftware.Text.Tagging.ITagSearchOptions`1.CanWrap"><summary>
            Gets or sets whether the search can wrap at the end of the search text range.
            </summary><value><c>true</c> if the search can wrap at the end of the search text range; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Tagging.ITagSearchOptions`1.Filter"><summary>
            Gets or sets the optional callback used to determine if a potential search result is valid.
            </summary><value>The optional callback used to determine if a potential search result is valid.</value></member><member name="P:ActiproSoftware.Text.Tagging.ITagSearchOptions`1.SearchUp"><summary>
            Gets or sets whether to search backwards.
            </summary><value><c>true</c> if searches should be performed backwards; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.Text.Tagging.ITokenTag"><summary>
            Provides the base requirements for an <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> from an <see cref="T:ActiproSoftware.Text.Lexing.ILexer" /> that can be associated with some text range.
            </summary></member><member name="P:ActiproSoftware.Text.Tagging.ITokenTag.Token"><summary>
            Gets the lexer <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> associated with this tag.
            </summary><value>The lexer <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> associated with this tag.</value></member><member name="T:ActiproSoftware.Text.Tagging.TaggerKeys"><summary>
            Specifies the names of the built-in <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> objects that are included with this product.
            </summary></member><member name="F:ActiproSoftware.Text.Tagging.TaggerKeys.BookmarkIndicator"><summary>
            The bookmark indicator tagger.
            </summary></member><member name="F:ActiproSoftware.Text.Tagging.TaggerKeys.BreakpointIndicator"><summary>
            The breakpoint indicator tagger.
            </summary></member><member name="F:ActiproSoftware.Text.Tagging.TaggerKeys.CurrentStatementIndicator"><summary>
            The current statement indicator tagger.
            </summary></member><member name="F:ActiproSoftware.Text.Tagging.TaggerKeys.FindMatchHighlight"><summary>
            The find match highlight tagger.
            </summary></member><member name="F:ActiproSoftware.Text.Tagging.TaggerKeys.Token"><summary>
            The token tagger, that also generally provides the core classification types for text.
            </summary></member><member name="T:ActiproSoftware.Text.Tagging.TagsChangedEventArgs"><summary>
            Event arguments for when an <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> alters tags on text.
            </summary></member><member name="M:ActiproSoftware.Text.Tagging.TagsChangedEventArgs.#ctor(ActiproSoftware.Text.TextSnapshotRange)"><summary>
            Initializes a new instance of the <c>TagsChangedEventArgs</c> class.
            </summary><param name="snapshotRange">The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> of the change.</param></member><member name="T:ActiproSoftware.Text.Tagging.TagSnapshotRange`1"><summary>
            Implements an object that represents an <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> and its associated <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.
            </summary><typeparam name="T">The type of tag associated with this range.</typeparam></member><member name="M:ActiproSoftware.Text.Tagging.TagSnapshotRange`1.Equals(System.Object)"><summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary><param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param><returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns><exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception></member><member name="M:ActiproSoftware.Text.Tagging.TagSnapshotRange`1.GetHashCode"><summary>
            Serves as a hash function for a particular type.
            </summary><returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns></member><member name="M:ActiproSoftware.Text.Tagging.TagSnapshotRange`1.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.Text.Tagging.TagSnapshotRange`1.#ctor(ActiproSoftware.Text.TextSnapshotRange,`0)"><summary>
            Initializes a new instance of the <c>TagSnapshotRange</c> class.
            </summary><param name="snapshotRange">The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> over which the <see cref="P:ActiproSoftware.Text.Tagging.TagSnapshotRange`1.Tag" /> applies.</param><param name="tag">The <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> data object associated with this range.</param></member><member name="P:ActiproSoftware.Text.Tagging.TagSnapshotRange`1.SnapshotRange"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> over which the <see cref="P:ActiproSoftware.Text.Tagging.TagSnapshotRange`1.Tag" /> applies.
            </summary><value>The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> over which the <see cref="P:ActiproSoftware.Text.Tagging.TagSnapshotRange`1.Tag" /> applies.</value></member><member name="P:ActiproSoftware.Text.Tagging.TagSnapshotRange`1.Tag"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> data object associated with this range.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> data object associated with this range.</value></member><member name="T:ActiproSoftware.Text.Tagging.TagVersionRange`1"><summary>
            Implements an object that represents an <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> and its associated <see cref="T:ActiproSoftware.Text.ITextVersionRange" />.
            </summary><typeparam name="T">The type of tag associated with this range.</typeparam></member><member name="M:ActiproSoftware.Text.Tagging.TagVersionRange`1.Equals(System.Object)"><summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary><param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param><returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns><exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception></member><member name="M:ActiproSoftware.Text.Tagging.TagVersionRange`1.GetHashCode"><summary>
            Serves as a hash function for a particular type.
            </summary><returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns></member><member name="M:ActiproSoftware.Text.Tagging.TagVersionRange`1.#ctor(ActiproSoftware.Text.TextSnapshotRange,ActiproSoftware.Text.TextRangeTrackingModes,`0)"><summary>
            Initializes a new instance of the <c>TagVersionRange</c> class.
            </summary><param name="snapshotRange">The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> over which the <see cref="P:ActiproSoftware.Text.Tagging.TagVersionRange`1.Tag" /> applies.</param><param name="trackingModes">A <see cref="T:ActiproSoftware.Text.TextRangeTrackingModes" /> indicating the tracking modes to use.</param><param name="tag">The <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> data object associated with this range.</param></member><member name="M:ActiproSoftware.Text.Tagging.TagVersionRange`1.#ctor(ActiproSoftware.Text.ITextVersionRange,`0)"><summary>
            Initializes a new instance of the <c>TagVersionRange</c> class.
            </summary><param name="versionRange">The <see cref="T:ActiproSoftware.Text.ITextVersionRange" /> over which the <see cref="P:ActiproSoftware.Text.Tagging.TagVersionRange`1.Tag" /> applies.</param><param name="tag">The <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> data object associated with this range.</param></member><member name="P:ActiproSoftware.Text.Tagging.TagVersionRange`1.VersionRange"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextVersionRange" /> over which the <see cref="P:ActiproSoftware.Text.Tagging.TagVersionRange`1.Tag" /> applies.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextVersionRange" /> over which the <see cref="P:ActiproSoftware.Text.Tagging.TagVersionRange`1.Tag" /> applies.</value></member><member name="P:ActiproSoftware.Text.Tagging.TagVersionRange`1.Tag"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> data object associated with this range.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> data object associated with this range.</value></member><member name="T:ActiproSoftware.Text.Tagging.Implementation.ClassificationTag"><summary>
            Represents an <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> that can be used to associate an <see cref="T:ActiproSoftware.Text.IClassificationType" /> 
            with some text range by implementing <see cref="T:ActiproSoftware.Text.Tagging.IClassificationTag" />.
            </summary></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.ClassificationTag.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.ClassificationTag.#ctor"><summary>
            Initializes a new instance of the <c>ClassificationTag</c> class.
            </summary></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.ClassificationTag.#ctor(ActiproSoftware.Text.IClassificationType)"><summary>
            Initializes a new instance of the <c>ClassificationTag</c> class.
            </summary><param name="classificationType">The <see cref="T:ActiproSoftware.Text.IClassificationType" /> associated with the tag.</param></member><member name="P:ActiproSoftware.Text.Tagging.Implementation.ClassificationTag.ClassificationType"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> associated with the tag.
            </summary><value>The <see cref="T:ActiproSoftware.Text.IClassificationType" /> associated with the tag.</value></member><member name="T:ActiproSoftware.Text.Tagging.Implementation.CodeDocumentTaggerProvider`1"><summary>
            Provides an <see cref="T:ActiproSoftware.Text.Tagging.ICodeDocumentTaggerProvider" /> capable of creating <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> objects which have a constructor that accepts 
            a single <see cref="T:ActiproSoftware.Text.ICodeDocument" /> instance parameter.
            </summary><typeparam name="TTagger">
            The <see cref="T:System.Type" /> of <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> that this provider creates.
            The tagger type must have a constructor that accepts a single <see cref="T:ActiproSoftware.Text.ICodeDocument" /> instance parameter.
            </typeparam></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.CodeDocumentTaggerProvider`1.GetTagger``1(ActiproSoftware.Text.ICodeDocument)"><summary>
            Returns an <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> for the specified <see cref="T:ActiproSoftware.Text.ICodeDocument" />.
            </summary><typeparam name="T">The type of <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> created by the tagger.</typeparam><param name="document">The <see cref="T:ActiproSoftware.Text.ICodeDocument" /> that requires an <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" />.</param><returns>An <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> for the specified <see cref="T:ActiproSoftware.Text.ICodeDocument" />.</returns></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.CodeDocumentTaggerProvider`1.#ctor"><summary>
            Initializes a new instance of the <c>CodeDocumentTaggerProvider</c> class.
            </summary></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.CodeDocumentTaggerProvider`1.#ctor(System.Object)"><summary>
            Initializes a new instance of the <c>CodeDocumentTaggerProvider</c> class.
            </summary><param name="singletonKey">When a non-null value is passed, the tagger will be stored as a singleton under the specified key in the document's properties.</param></member><member name="T:ActiproSoftware.Text.Tagging.Implementation.CollectionTagger`1"><summary>
            Provides a thread-safe <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> implementation that maintains a simple collection of tagged ranges.
            </summary><typeparam name="T">The type of tag associated with this tagger.</typeparam></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.CollectionTagger`1.Add(ActiproSoftware.Text.Tagging.TagVersionRange{`0})"><summary>
            Adds a tag range to the collection.
            </summary><param name="tagRange">The tag range to add to the collection.</param><remarks>
            This is the lowest-level method used for adding a tag range, and gives the most control over snapshot translation options.
            </remarks></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.CollectionTagger`1.Add(ActiproSoftware.Text.ITextSnapshotLine,`0)"><summary>
            Adds a tag range that is associated with a single snapshot line (e.g. a bookmark indicator tag).
            </summary><param name="snapshotLine">The target <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" />.</param><param name="tag">The <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> to add.</param><returns>The <see cref="T:ActiproSoftware.Text.Tagging.TagVersionRange`1" /> that was created.</returns><remarks>
            The generated <see cref="T:ActiproSoftware.Text.ITextVersionRange" /> is created with the <c>DeleteWhenZeroLength</c> and <c>LineBased</c> flags.
            </remarks></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.CollectionTagger`1.Add(ActiproSoftware.Text.TextSnapshotRange,`0)"><summary>
            Adds a tag range that is applied to a snapshot text range (e.g. a breakpoint indicator tag).
            </summary><param name="snapshotRange">The target <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.</param><param name="tag">The <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> to add.</param><returns>The <see cref="T:ActiproSoftware.Text.Tagging.TagVersionRange`1" /> that was created.</returns><remarks>
            The generated <see cref="T:ActiproSoftware.Text.ITextVersionRange" /> is created with the <c>DeleteWhenZeroLength</c> flag.
            </remarks></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.CollectionTagger`1.Clear"><summary>
            Removes all items from the collection.
            </summary></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.CollectionTagger`1.CreateBatch"><summary>
            Creates an <see cref="T:System.IDisposable" /> object such that while the object is not disposed, items can be added
            to this collection without any change events being fired, thereby allowing batch updates to occur.
            </summary><returns>An <see cref="T:System.IDisposable" /> object.  Once disposed, the batch is ended.</returns></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.CollectionTagger`1.Contains(ActiproSoftware.Text.Tagging.TagVersionRange{`0})"><summary>
            Determines whether the collection contains a specific value.
            </summary><param name="tagRange">The object to locate in the collection.</param><returns><c>true</c> if the item is found in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.CollectionTagger`1.FindNext(ActiproSoftware.Text.ITextSnapshotLine,ActiproSoftware.Text.Tagging.ITagSearchOptions{`0})"><summary>
            Finds the next line-based tag (e.g. a bookmark indicator tag), using the specified search options.
            </summary><param name="snapshotLine">The <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" /> from which to start the search.</param><param name="options">The optional <see cref="T:ActiproSoftware.Text.Tagging.ITagSearchOptions`1" /> that specifies search options.</param><returns>The <see cref="T:ActiproSoftware.Text.Tagging.TagVersionRange`1" /> that was found, if any.</returns></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.CollectionTagger`1.FindNext(ActiproSoftware.Text.TextSnapshotOffset,ActiproSoftware.Text.Tagging.ITagSearchOptions{`0})"><summary>
            Finds the next text range-based tag (e.g. a breakpoint indicator tag), using the specified search options.
            </summary><param name="snapshotOffset">The <see cref="T:ActiproSoftware.Text.TextSnapshotOffset" /> from which to start the search.</param><param name="options">The optional <see cref="T:ActiproSoftware.Text.Tagging.ITagSearchOptions`1" /> that specifies search options.</param><returns>The <see cref="T:ActiproSoftware.Text.Tagging.TagVersionRange`1" /> that was found, if any.</returns></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.CollectionTagger`1.GetEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object for the entire collection.
            </summary><returns>An <c>IEnumerator</c> object for the entire collection</returns><remarks>
            Enumerators are intended to be used only to read data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para>
            The enumerator does not have exclusive access to the collection.
            </para><para>
            When an enumerator is instantiated, it takes a snapshot of the current state of the collection. 
            If changes are made to the collection, such as adding, modifying or deleting elements, the 
            snapshot gets out of sync and the enumerator throws an <c>InvalidOperationException</c>. 
            Two enumerators instantiated from the same collection at the same time can have 
            different snapshots of the collection.
            </para></remarks></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.CollectionTagger`1.GetTags(ActiproSoftware.Text.NormalizedTextSnapshotRangeCollection,System.Object)"><summary>
            Returns the tag ranges that intersect with the specified normalized snapshot ranges.
            </summary><param name="snapshotRanges">The collection of normalized snapshot ranges.</param><param name="parameter">An optional parameter that provides contextual information about the tag request.</param><returns>The tag ranges that intersect with the specified normalized snapshot ranges.</returns></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.CollectionTagger`1.Remove(ActiproSoftware.Text.Tagging.TagVersionRange{`0})"><summary>
            Removes the first occurrence of a specific tag range from the collection.
            </summary><param name="tagRange">The tag range to remove from the collection.</param><returns><c>true</c> if the tag range was successfully removed from the collection; otherwise, <c>false</c></returns></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.CollectionTagger`1.Remove(`0)"><summary>
            Removes a specific tag instance from the collection.
            </summary><param name="tag">The <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> to remove from the collection.</param><returns><c>true</c> if the tag was successfully removed from the collection; otherwise, <c>false</c></returns></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.CollectionTagger`1.RemoveAll(System.Predicate{ActiproSoftware.Text.Tagging.TagVersionRange{`0}})"><summary>
            Removes all objects that match the conditions defined by the specified predicate.
            </summary><param name="match">The predicate that defines the conditions for removal.</param><returns>The number of objects that were removed.</returns></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.CollectionTagger`1.Toggle(ActiproSoftware.Text.ITextSnapshotLine,`0)"><summary>
            Toggles whether a tag is associated with a single snapshot line (e.g. a bookmark indicator tag).
            </summary><param name="snapshotLine">The target <see cref="T:ActiproSoftware.Text.ITextSnapshotLine" />.</param><param name="tag">The <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> to add, if no tag is already on the line.</param><returns>The <see cref="T:ActiproSoftware.Text.Tagging.TagVersionRange`1" /> that was created, if a tag was added.</returns></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.CollectionTagger`1.Toggle(ActiproSoftware.Text.TextSnapshotRange,`0)"><summary>
            Toggles whether a tag is associated with a snapshot text range (e.g. a breakpoint indicator tag).
            </summary><param name="snapshotRange">The target <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.</param><param name="tag">The <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> to add, if no tag is already in the text range.</param><returns>The <see cref="T:ActiproSoftware.Text.Tagging.TagVersionRange`1" /> that was created, if a tag was added.</returns></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.CollectionTagger`1.#ctor(System.String,System.Collections.Generic.IEnumerable{ActiproSoftware.Text.Utility.Ordering},ActiproSoftware.Text.ICodeDocument,System.Boolean)"><summary>
            Initializes a new instance of the <c>CollectionTagger</c> class.
            </summary><param name="key">The string-based key that identifies the object.</param><param name="orderings">The collection of <see cref="T:ActiproSoftware.Text.Utility.Ordering" /> objects, used to determine how this object is positioned relative to other objects.</param><param name="document">The document to which this manager is attached.</param><param name="isForLanguage">
            Indicates whether this tagger is for a language.  
            If <c>true</c>, the tagger is closed when the document's language changes.
            </param></member><member name="P:ActiproSoftware.Text.Tagging.Implementation.CollectionTagger`1.Count"><summary>
            Gets the number of elements contained in the collection.
            </summary><value>The number of elements contained in the collection.</value></member><member name="P:ActiproSoftware.Text.Tagging.Implementation.CollectionTagger`1.Item(`0)"><summary>
            Gets the tag range that points to the specified tag.
            <para>
            [C#] In C#, this property is the indexer for the <c>CollectionTagger</c> class. 
            </para></summary><param name="tag">The tag for which to search.</param><value>
            The tag range that points to the specified tag.
            </value></member><member name="E:ActiproSoftware.Text.Tagging.Implementation.CollectionTagger`1.CollectionChanged"><summary>
            Occurs when the collection is changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>NotifyCollectionChangedEventHandler</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.Text.Tagging.Implementation.ReadOnlyRegionTag"><summary>
            Represents an <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> that can be used to mark a text range as read-only, and can optionally associate an <see cref="T:ActiproSoftware.Text.IClassificationType" />.
            </summary></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.ReadOnlyRegionTag.#ctor"><summary>
            Initializes a new instance of the <c>ReadOnlyRegionTag</c> class.
            </summary></member><member name="P:ActiproSoftware.Text.Tagging.Implementation.ReadOnlyRegionTag.IncludeFirstEdge"><summary>
            Gets or sets whether to consider any text ranges that align to this tag's leading (first) edge as being in the read-only region.
            </summary><value><c>true</c> if any text ranges that align to this tag's leading (first) edge are considered as in the read-only region; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Tagging.Implementation.ReadOnlyRegionTag.IncludeLastEdge"><summary>
            Gets or sets whether to consider any text ranges that align to this tag's trailing (last) edge as being in the read-only region.
            </summary><value><c>true</c> if any text ranges that align to this tag's trailing (last) edge are considered as in the read-only region; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Tagging.Implementation.ReadOnlyRegionTag.IsReadOnly"><summary>
            Gets or sets whether the tagged text range is currently read-only.
            </summary><value><c>true</c> if the tagged text range is currently read-only; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.Text.Tagging.Implementation.TaggerBase`1"><summary>
            Provides an abstract base class for an <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> implementation.
            </summary><typeparam name="T">The type of tag associated with this tagger.</typeparam></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.TaggerBase`1.ChangeDocument(ActiproSoftware.Text.ICodeDocument)"><summary>
            Changes the document associated with the tagger.
            </summary><param name="newDocument">The new <see cref="T:ActiproSoftware.Text.ICodeDocument" />.</param><remarks>
            This method is used when a view-based tagger needs to update the associated document.
            </remarks></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.TaggerBase`1.Close"><summary>
            Closes the tagger and detaches it from the document.
            </summary></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.TaggerBase`1.GetTags(ActiproSoftware.Text.NormalizedTextSnapshotRangeCollection,System.Object)"><summary>
            Returns the tag ranges that intersect with the specified normalized snapshot ranges.
            </summary><param name="snapshotRanges">The collection of normalized snapshot ranges.</param><param name="parameter">An optional parameter that provides contextual information about the tag request.</param><returns>The tag ranges that intersect with the specified normalized snapshot ranges.</returns></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.TaggerBase`1.OnClosed"><summary>
            Occurs when the tagger is closed.
            </summary><remarks>
            The default implementation of this method does nothing.
            Overrides should release any event handlers set up in the tagger's constructor.
            </remarks></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.TaggerBase`1.OnTagsChanged(ActiproSoftware.Text.Tagging.TagsChangedEventArgs)"><summary>
            Raises the <see cref="E:ActiproSoftware.Text.Tagging.Implementation.TaggerBase`1.TagsChanged" /> event.
            </summary><param name="e">A <c>TagsChangedEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.TaggerBase`1.#ctor(System.String,System.Collections.Generic.IEnumerable{ActiproSoftware.Text.Utility.Ordering},ActiproSoftware.Text.ICodeDocument)"><summary>
            Initializes a new instance of the <c>TaggerBase</c> class.
            </summary><param name="key">The string-based key that identifies the object.</param><param name="orderings">The collection of <see cref="T:ActiproSoftware.Text.Utility.Ordering" /> objects, used to determine how this object is positioned relative to other objects.</param><param name="document">The document to which this manager is attached.</param></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.TaggerBase`1.#ctor(System.String,System.Collections.Generic.IEnumerable{ActiproSoftware.Text.Utility.Ordering},ActiproSoftware.Text.ICodeDocument,System.Boolean)"><summary>
            Initializes a new instance of the <c>TaggerBase</c> class.
            </summary><param name="key">The string-based key that identifies the object.</param><param name="orderings">The collection of <see cref="T:ActiproSoftware.Text.Utility.Ordering" /> objects, used to determine how this object is positioned relative to other objects.</param><param name="document">The document to which this manager is attached.</param><param name="isForLanguage">
            Indicates whether this tagger is for a language.  
            If <c>true</c>, the tagger is closed when the document's language changes.
            </param></member><member name="P:ActiproSoftware.Text.Tagging.Implementation.TaggerBase`1.Document"><summary>
            Gets the document to which this tagger is attached.
            </summary><value>The document to which this tagger is attached.</value></member><member name="P:ActiproSoftware.Text.Tagging.Implementation.TaggerBase`1.Key"><summary>
            Gets the string-based key that identifies the object.
            </summary><value>The string-based key that identifies the object.</value></member><member name="P:ActiproSoftware.Text.Tagging.Implementation.TaggerBase`1.Orderings"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.Text.Utility.Ordering" /> objects, used to determine how this object is positioned relative to other objects.
            </summary><value>The collection of <see cref="T:ActiproSoftware.Text.Utility.Ordering" /> objects, used to determine how this object is positioned relative to other objects.</value></member><member name="E:ActiproSoftware.Text.Tagging.Implementation.TaggerBase`1.Closed"><summary>
            Occurs when the tagger is closed. 
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.Tagging.Implementation.TaggerBase`1.TagsChanged"><summary>
            Occurs after a range of tags have changed. 
            </summary><eventdata>
            The event handler receives an argument of type <c>TagsChangedEventArgs</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.Text.Tagging.Implementation.TaggerProviderBase`1"><summary>
            Provides an abstract tagger provider base class that automatically returns the <see cref="P:ActiproSoftware.Text.Tagging.Implementation.TaggerProviderBase`1.TagTypes" /> supported
            based on reflection of the <typeparamref name="TTagger" /> type.
            </summary><typeparam name="TTagger">
            The <see cref="T:System.Type" /> of <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> that this factory creates.
            </typeparam></member><member name="P:ActiproSoftware.Text.Tagging.Implementation.TaggerProviderBase`1.TagTypes"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Tagging.ITag" /><c>Type</c> objects that are supported by the <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> objects created by this provider.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Tagging.ITag" /><c>Type</c> objects that are supported by the <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> objects created by this provider.</value></member><member name="T:ActiproSoftware.Text.Tagging.Implementation.TagSearchOptions`1"><summary>
            Stores tag search operation options.
            </summary><typeparam name="T">The tag type.</typeparam></member><member name="P:ActiproSoftware.Text.Tagging.Implementation.TagSearchOptions`1.CanWrap"><summary>
            Gets or sets whether the search can wrap at the end of the search text range.
            </summary><value><c>true</c> if the search can wrap at the end of the search text range; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Tagging.Implementation.TagSearchOptions`1.Filter"><summary>
            Gets or sets the optional callback used to determine if a potential search result is valid.
            </summary><value>The optional callback used to determine if a potential search result is valid.</value></member><member name="P:ActiproSoftware.Text.Tagging.Implementation.TagSearchOptions`1.SearchUp"><summary>
            Gets or sets whether to search backwards.
            </summary><value><c>true</c> if searches should be performed backwards; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.Text.Tagging.Implementation.TokenClassificationTag"><summary>
            Represents an <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> that can be used to associate an <see cref="T:ActiproSoftware.Text.IClassificationType" /> 
            and an <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> with some text range by implementing <see cref="T:ActiproSoftware.Text.Tagging.IClassificationTag" /> and <see cref="T:ActiproSoftware.Text.Tagging.ITokenTag" />.
            </summary></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.TokenClassificationTag.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.TokenClassificationTag.#ctor"><summary>
            Initializes a new instance of the <c>TokenClassificationTag</c> class.
            </summary></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.TokenClassificationTag.#ctor(ActiproSoftware.Text.Lexing.IToken,ActiproSoftware.Text.IClassificationType)"><summary>
            Initializes a new instance of the <c>TokenClassificationTag</c> class.
            </summary><param name="token">The lexer <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> associated with this tag.</param><param name="classificationType">The <see cref="T:ActiproSoftware.Text.IClassificationType" /> associated with the tag.</param></member><member name="P:ActiproSoftware.Text.Tagging.Implementation.TokenClassificationTag.ClassificationType"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> associated with the tag.
            </summary><value>The <see cref="T:ActiproSoftware.Text.IClassificationType" /> associated with the tag.</value></member><member name="P:ActiproSoftware.Text.Tagging.Implementation.TokenClassificationTag.Token"><summary>
            Gets or sets the lexer <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> associated with this tag.
            </summary><value>The lexer <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> associated with this tag.</value></member><member name="T:ActiproSoftware.Text.Tagging.Implementation.TokenTagger"><summary>
            An <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> implementation that provides <see cref="T:ActiproSoftware.Text.Tagging.ITokenTag" /> and <see cref="T:ActiproSoftware.Text.Tagging.IClassificationTag" /> objects 
            based on a language's <see cref="T:ActiproSoftware.Text.Lexing.ILexer" />.
            </summary></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.TokenTagger.ClassifyToken(ActiproSoftware.Text.Lexing.IToken)"><summary>
            Returns an <see cref="T:ActiproSoftware.Text.IClassificationType" /> for the specified <see cref="T:ActiproSoftware.Text.Lexing.IToken" />, if one is appropriate.
            </summary><param name="token">The <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> to examine.</param><returns>An <see cref="T:ActiproSoftware.Text.IClassificationType" /> for the specified <see cref="T:ActiproSoftware.Text.Lexing.IToken" />, if one is appropriate.</returns><remarks>
            The default implementation of this method automatically returns the classification type if the token
            is an <see cref="T:ActiproSoftware.Text.Lexing.IMergableToken" />.
            </remarks></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.TokenTagger.OnClosed"><summary>
            Occurs when the tagger is closed.
            </summary></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.TokenTagger.GetTags(ActiproSoftware.Text.NormalizedTextSnapshotRangeCollection,System.Object)"><summary>
            Returns the tag ranges that intersect with the specified normalized snapshot ranges.
            </summary><param name="snapshotRanges">The collection of normalized snapshot ranges.</param><param name="parameter">An optional parameter that provides contextual information about the tag request.</param><returns>The tag ranges that intersect with the specified normalized snapshot ranges.</returns></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.TokenTagger.GetTokens(ActiproSoftware.Text.Lexing.ILexer,ActiproSoftware.Text.TextSnapshotRange,System.Object,System.Boolean,System.Int32@)"><summary>
            Returns the <see cref="T:ActiproSoftware.Text.Lexing.ITokenSet" /> containing the tokens that were parsed for the specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.
            </summary><param name="lexer">The <see cref="T:ActiproSoftware.Text.Lexing.ILexer" /> to use for token generation.</param><param name="desiredSnapshotRange">The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> that should be examined.</param><param name="parseContext">An optional object that may be used to help provide context information when resuming incremental parsing.</param><param name="canUpdateLineContexts">Whether line contexts can be updated.</param><param name="invalidateThroughOffset">Returns the offset through which tokens were invalidated.</param><returns>The <see cref="T:ActiproSoftware.Text.Lexing.ITokenSet" /> containing the tokens that were parsed for the specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.</returns></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.TokenTagger.RaiseTagsChanged(ActiproSoftware.Text.Tagging.TagsChangedEventArgs)"><summary>
            Raises the <c>TagsChanged</c> event.
            </summary><param name="e">A <c>TagsChangedEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.TokenTagger.#ctor(ActiproSoftware.Text.ICodeDocument)"><summary>
            Initializes a new instance of the <c>TokenTagger</c> class.
            </summary><param name="document">The document to which this manager is attached.</param></member><member name="T:ActiproSoftware.Text.Tagging.Implementation.TokenTaggerProvider`1"><summary>
            Provides an <see cref="T:ActiproSoftware.Text.Tagging.ICodeDocumentTaggerProvider" /> capable of creating <see cref="T:ActiproSoftware.Text.Tagging.Implementation.TokenTagger" /> objects which have a constructor that accepts 
            a single <see cref="T:ActiproSoftware.Text.ICodeDocument" /> instance parameter.
            </summary><typeparam name="TTagger">
            The <see cref="T:System.Type" /> of <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> that this factory creates.
            The tagger type must have a constructor that accepts a single <see cref="T:ActiproSoftware.Text.ICodeDocument" /> instance parameter.
            </typeparam></member><member name="M:ActiproSoftware.Text.Tagging.Implementation.TokenTaggerProvider`1.#ctor"><summary>
            Initializes a new instance of the <c>TokenTaggerProvider</c> class.
            </summary></member><member name="T:ActiproSoftware.Text.Searching.ISearchCapture"><summary>
            Provides the base requirements for a single capture by a regular expression match within an <see cref="T:ActiproSoftware.Text.Searching.ISearchResult" />.
            </summary></member><member name="P:ActiproSoftware.Text.Searching.ISearchCapture.Text"><summary>
            Gets the text that was captured.
            </summary><value>The text that was captured.</value></member><member name="T:ActiproSoftware.Text.Searching.ISearchCaptureCollection"><summary>
            Provides the base requirements for a collection of <see cref="T:ActiproSoftware.Text.Searching.ISearchCapture" /> objects.
            </summary></member><member name="T:ActiproSoftware.Text.Searching.ISearchOptions"><summary>
            Provides the base requirements for a class that stores options for a find/replace operation.
            </summary></member><member name="P:ActiproSoftware.Text.Searching.ISearchOptions.FindText"><summary>
            Gets or sets the text to find.
            </summary><value>The text to find.</value></member><member name="P:ActiproSoftware.Text.Searching.ISearchOptions.MatchCase"><summary>
            Gets or sets whether searches should be case sensitive.
            </summary><value><c>true</c> if searches should be case sensitive; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Searching.ISearchOptions.MatchWholeWord"><summary>
            Gets or sets whether searches should only match whole words.
            </summary><value><c>true</c> if searches should only match whole words; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Searching.ISearchOptions.MaximumResultCount"><summary>
            Gets or sets the maximum number of results that can be found.
            </summary><value>The maximum number of results that can be found.</value><remarks>The count must be larger than zero.</remarks></member><member name="P:ActiproSoftware.Text.Searching.ISearchOptions.PatternProvider"><summary>
            Gets or sets the search pattern provider (normal, regular expression, wildcard, etc.).
            </summary><value>
            A <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /> specifying the search pattern provider.
            </value></member><member name="P:ActiproSoftware.Text.Searching.ISearchOptions.ReplaceText"><summary>
            Gets or sets the text with which to replace (replace operations only).
            </summary><value>The text with which to replace.</value></member><member name="P:ActiproSoftware.Text.Searching.ISearchOptions.SearchUp"><summary>
            Gets or sets whether to search backwards.
            </summary><value><c>true</c> if searches should be performed backwards; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.Text.Searching.ISearchPatternProvider"><summary>
            Provides the base requirements for an object that can provide regular expression find/replace patterns based on a supplied pattern.
            </summary><remarks>
            All find/replace operations are performed using the built-in regular expression engine.
            This interface allows for the creation of custom pattern formats and enables them to be converted to the core regular expression pattern syntax.
            </remarks></member><member name="M:ActiproSoftware.Text.Searching.ISearchPatternProvider.GetFindPattern(System.String)"><summary>
            Returns the regular expression match pattern to use for find operations, based on the supplied pattern that uses this provider.
            </summary><param name="pattern">The pattern to convert using this provider.</param><returns>The regular expression match pattern to use for find operations.</returns></member><member name="M:ActiproSoftware.Text.Searching.ISearchPatternProvider.GetReplacePattern(System.String)"><summary>
            Returns the regular expression match pattern to use for replace operations, based on the supplied pattern that uses this provider.
            </summary><param name="pattern">The pattern to convert using this provider.</param><returns>The regular expression match pattern to use for replace operations.</returns></member><member name="P:ActiproSoftware.Text.Searching.ISearchPatternProvider.Description"><summary>
            Gets the description of the search pattern provider.
            </summary><value>The description of the search pattern provider.</value></member><member name="P:ActiproSoftware.Text.Searching.ISearchPatternProvider.RequiresCaseSensitivity"><summary>
            Gets whether this pattern requires case sensitivity.
            </summary><value><c>true</c> if this pattern requires case sensitivity; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.Text.Searching.ISearchPatternProviderCollection"><summary>
            Provides the base requirements for a collection of <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /> objects.
            </summary><seealso cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /><seealso cref="T:ActiproSoftware.Text.Searching.Implementation.SearchPatternProviderCollection" /></member><member name="T:ActiproSoftware.Text.Searching.ISearchPatternProviderFactory"><summary>
            Provides the base requirements for a factory capable of creating <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /> objects.
            </summary><seealso cref="T:ActiproSoftware.Text.Searching.Implementation.DefaultSearchPatternProviderFactory" /></member><member name="M:ActiproSoftware.Text.Searching.ISearchPatternProviderFactory.CreateProviders"><summary>
            Creates the collection of <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /> objects to use.
            </summary><returns>A <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProviderCollection" /> containing the <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /> objects that were created.</returns></member><member name="T:ActiproSoftware.Text.Searching.ISearchResult"><summary>
            Provides the base requirements for a class that stores a single result of a search operation.
            </summary></member><member name="P:ActiproSoftware.Text.Searching.ISearchResult.Captures"><summary>
            Gets the read-only collection of captures.
            </summary><value>The read-only collection of captures.</value></member><member name="P:ActiproSoftware.Text.Searching.ISearchResult.FindSnapshotRange"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> that contains the text that was found.
            </summary><value>A <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> that contains the text that was found.</value></member><member name="P:ActiproSoftware.Text.Searching.ISearchResult.ReplaceSnapshotRange"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> that contains the text that was replaced.
            </summary><value>A <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> that contains the text that was replaced.</value><remarks>
            The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> is marked as deleted if no replace was performed.
            </remarks></member><member name="T:ActiproSoftware.Text.Searching.ISearchResultCollection"><summary>
            Provides the base requirements for a collection of <see cref="T:ActiproSoftware.Text.Searching.ISearchResult" /> objects.
            </summary></member><member name="T:ActiproSoftware.Text.Searching.ISearchResultSet"><summary>
            Provides the base requirements for a class that stores the results of a search operation.
            </summary></member><member name="P:ActiproSoftware.Text.Searching.ISearchResultSet.Options"><summary>
            Gets or sets a copy of the <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> that were used to generate this result set.
            </summary><value>A copy of the <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> that were used to generate this result set.</value></member><member name="P:ActiproSoftware.Text.Searching.ISearchResultSet.OperationType"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.Text.Searching.SearchOperationType" /> that indicates the search operation type that was performed.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Searching.SearchOperationType" /> that indicates the search operation type that was performed.</value></member><member name="P:ActiproSoftware.Text.Searching.ISearchResultSet.Results"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.Text.Searching.ISearchResult" /> objects.
            </summary><value>The collection of <see cref="T:ActiproSoftware.Text.Searching.ISearchResult" /> objects.</value></member><member name="P:ActiproSoftware.Text.Searching.ISearchResultSet.Wrapped"><summary>
            Gets or sets whether the find operation wrapped when it reached the end of the search text range.
            </summary><value><c>true</c> if the find operation wrapped; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.Text.Searching.SearchOperationType"><summary>
            Specifies the type of search operation.
            </summary></member><member name="F:ActiproSoftware.Text.Searching.SearchOperationType.FindNext"><summary>
            Finds the next occurrence of the find text.
            </summary></member><member name="F:ActiproSoftware.Text.Searching.SearchOperationType.ReplaceNext"><summary>
            Replaces the next occurrence of the find text with the replace text.
            </summary></member><member name="F:ActiproSoftware.Text.Searching.SearchOperationType.FindAll"><summary>
            Finds all occurrences of the find text.
            </summary></member><member name="F:ActiproSoftware.Text.Searching.SearchOperationType.ReplaceAll"><summary>
            Replaces all occurrences of the find text with the replace text.
            </summary></member><member name="F:ActiproSoftware.Text.Searching.SearchOperationType.FindNextIncremental"><summary>
            Finds the next occurrence of the find text via incremental search mode.
            </summary></member><member name="T:ActiproSoftware.Text.Searching.SearchPatternProviders"><summary>
            Provides access to the built-in <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /> instances, that 
            can provide regular expression find/replace patterns based on a supplied pattern.
            </summary></member><member name="P:ActiproSoftware.Text.Searching.SearchPatternProviders.Acronym"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /> for an acronym search.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /> for an acronym search.</value></member><member name="P:ActiproSoftware.Text.Searching.SearchPatternProviders.Normal"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /> for a normal search.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /> for a normal search.</value></member><member name="P:ActiproSoftware.Text.Searching.SearchPatternProviders.RegularExpression"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /> for a regular expression search.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /> for a regular expression search.</value></member><member name="P:ActiproSoftware.Text.Searching.SearchPatternProviders.Shorthand"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /> for a shorthand search.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /> for a shorthand search.</value></member><member name="P:ActiproSoftware.Text.Searching.SearchPatternProviders.Wildcard"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /> for a wildcard search.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /> for a wildcard search.</value></member><member name="T:ActiproSoftware.Text.Searching.Implementation.DefaultSearchPatternProviderFactory"><summary>
            The default factory implementation that creates <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /> objects.
            </summary></member><member name="M:ActiproSoftware.Text.Searching.Implementation.DefaultSearchPatternProviderFactory.CreateProviders"><summary>
            Creates the collection of <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /> objects to use.
            </summary><returns>A <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProviderCollection" /> containing the <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /> objects that were created.</returns></member><member name="T:ActiproSoftware.Text.Searching.Implementation.SearchPatternProviderCollection"><summary>
            Encapsulates a collection of <see cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /> objects.
            </summary><seealso cref="T:ActiproSoftware.Text.Searching.ISearchPatternProvider" /></member><member name="T:ActiproSoftware.Text.Searching.Implementation.SearchResultSet"><summary>
            Stores the results of a find operation.
            </summary></member><member name="M:ActiproSoftware.Text.Searching.Implementation.SearchResultSet.ToString"><summary>
            Returns a <c>String</c> that represents the current <c>Object</c>.
            </summary><returns>A <c>String</c> that represents the current <c>Object</c>.</returns></member><member name="M:ActiproSoftware.Text.Searching.Implementation.SearchResultSet.#ctor(ActiproSoftware.Text.Searching.SearchOperationType,ActiproSoftware.Text.Searching.ISearchOptions,System.Boolean)"><summary>
            Initializes a new instance of the <c>SearchResultSet</c> class.
            </summary><param name="operationType">A <see cref="T:ActiproSoftware.Text.Searching.SearchOperationType" /> that indicates the search operation type that was performed.</param><param name="options">A copy of the <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> that were used to generate this result set.</param><param name="wrapped">Whether the find operation wrapped when it reached the end of the search text range.</param></member><member name="P:ActiproSoftware.Text.Searching.Implementation.SearchResultSet.Options"><summary>
            Gets or sets a copy of the <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> that were used to generate this result set.
            </summary><value>A copy of the <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> that were used to generate this result set.</value></member><member name="P:ActiproSoftware.Text.Searching.Implementation.SearchResultSet.OperationType"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.Text.Searching.SearchOperationType" /> that indicates the search operation type that was performed.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Searching.SearchOperationType" /> that indicates the search operation type that was performed.</value></member><member name="P:ActiproSoftware.Text.Searching.Implementation.SearchResultSet.Results"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.Text.Searching.ISearchResult" /> objects.
            </summary><value>The collection of <see cref="T:ActiproSoftware.Text.Searching.ISearchResult" /> objects.</value></member><member name="P:ActiproSoftware.Text.Searching.Implementation.SearchResultSet.Wrapped"><summary>
            Gets or sets whether the find operation wrapped when it reached the end of the search text range.
            </summary><value><c>true</c> if the find operation wrapped; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.Text.Searching.Implementation.TextSearcher"><summary>
            Provides core functionality for searching within an <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that is typically wrapped by external helper methods.
            </summary></member><member name="M:ActiproSoftware.Text.Searching.Implementation.TextSearcher.FindAll(ActiproSoftware.Text.ITextSnapshot,ActiproSoftware.Text.Searching.ISearchOptions,ActiproSoftware.Text.TextRange)"><summary>
            Performs a find all operation over a specific range of the snapshot.
            </summary><param name="snapshot">The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> in which to search.</param><param name="options">The <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> to use.</param><param name="searchTextRange">
            The <see cref="T:ActiproSoftware.Text.TextRange" /> of offsets to search.
            If all should be searched, specify the range <c>0</c> to the length of the <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </param><returns>
            An <see cref="T:ActiproSoftware.Text.Searching.ISearchResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.Text.Searching.Implementation.TextSearcher.FindNext(ActiproSoftware.Text.ITextSnapshot,ActiproSoftware.Text.Searching.ISearchOptions,System.Int32,System.Boolean,ActiproSoftware.Text.TextRange)"><summary>
            Performs a find next operation over a specific range of the snapshot.
            </summary><param name="snapshot">The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> in which to search.</param><param name="options">The <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> to use.</param><param name="startOffset">The offset at which to start the search.</param><param name="canWrap">Whether the search can wrap at the end of the search text range.</param><param name="searchTextRange">
            The <see cref="T:ActiproSoftware.Text.TextRange" /> of offsets to search.
            If all should be searched, specify the range <c>0</c> to the length of the <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </param><returns>
            An <see cref="T:ActiproSoftware.Text.Searching.ISearchResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.Text.Searching.Implementation.TextSearcher.FindNext(ActiproSoftware.Text.ITextSnapshot,ActiproSoftware.Text.Searching.ISearchOptions,System.Int32,System.Boolean,ActiproSoftware.Text.TextRange,System.Threading.CancellationToken)"><summary>
            Performs a find next operation over a specific range of the snapshot.
            </summary><param name="snapshot">The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> in which to search.</param><param name="options">The <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> to use.</param><param name="startOffset">The offset at which to start the search.</param><param name="canWrap">Whether the search can wrap at the end of the search text range.</param><param name="searchTextRange">
            The <see cref="T:ActiproSoftware.Text.TextRange" /> of offsets to search.
            If all should be searched, specify the range <c>0</c> to the length of the <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </param><param name="cancellationToken">The cancellation token that can abort the search operation.</param><returns>
            An <see cref="T:ActiproSoftware.Text.Searching.ISearchResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.Text.Searching.Implementation.TextSearcher.ReplaceAll(ActiproSoftware.Text.ITextDocument,System.Object,ActiproSoftware.Text.Searching.ISearchOptions,ActiproSoftware.Text.TextRange[])"><summary>
            Performs a replace all operation over a specific range of the snapshot.
            </summary><param name="document">The <see cref="T:ActiproSoftware.Text.ITextDocument" /> in which to search.</param><param name="source">The optional source of the text change, which is most often an editor view if specified.</param><param name="options">The <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> to use.</param><param name="searchTextRanges">
            The <see cref="T:ActiproSoftware.Text.TextRange" /> array of offsets to search.
            If everything should be searched, specify the range <c>0</c> to the length of the document's current <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </param><returns>
            An <see cref="T:ActiproSoftware.Text.Searching.ISearchResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.Text.Searching.Implementation.TextSearcher.ReplaceNext(ActiproSoftware.Text.ITextDocument,System.Object,ActiproSoftware.Text.Searching.ISearchOptions,System.Int32,System.Boolean,ActiproSoftware.Text.TextRange)"><summary>
            Performs a replace next operation over a specific range of the snapshot.
            </summary><param name="document">The <see cref="T:ActiproSoftware.Text.ITextDocument" /> in which to search.</param><param name="source">The optional source of the text change, which is most often an editor view if specified.</param><param name="options">The <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> to use.</param><param name="startOffset">The offset at which to start the search.</param><param name="canWrap">Whether the search can wrap at the end of the search text range.</param><param name="searchTextRange">
            The <see cref="T:ActiproSoftware.Text.TextRange" /> of offsets to search.
            If all should be searched, specify the range <c>0</c> to the length of the document's current <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </param><returns>
            An <see cref="T:ActiproSoftware.Text.Searching.ISearchResultSet" /> that specifies the result of the operation.
            </returns></member><member name="T:ActiproSoftware.Text.RegularExpressions.CharClass"><summary>
            Stores information about a character class.
            </summary></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.Add(System.Char)"><summary>
            Adds a single character to the character class.
            </summary><param name="ch">The character to add.</param></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.Add(System.Char,System.Char)"><summary>
            Adds an interval of characters to the character class.
            </summary><param name="start">The start character in the interval.</param><param name="end">The end character in the interval.</param></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.Add(ActiproSoftware.Text.RegularExpressions.CharInterval)"><summary>
            Adds an interval of characters to the character class.
            </summary><param name="interval">The interval of characters to add.</param></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.AddCategory(System.Globalization.UnicodeCategory,System.Boolean)"><summary>
            Adds the specified Unicode general category to the character class.
            </summary><param name="category">A <see cref="T:System.Globalization.UnicodeCategory" /> indicating the category.</param><param name="negate">Whether to negate the category.</param></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.AddCategory(System.String,System.Boolean)"><summary>
            Adds the specified Unicode general category to the character class.
            </summary><param name="categoryName">The name of the category.  For example, <c>Lu</c> is used for uppercase letters.</param><param name="negate">Whether to negate the category.</param></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.AddRange(ActiproSoftware.Text.RegularExpressions.CharInterval[])"><summary>
            Adds the contents of a <see cref="T:ActiproSoftware.Text.RegularExpressions.CharInterval" /> array to the collection.
            </summary><param name="intervals">The <see cref="T:ActiproSoftware.Text.RegularExpressions.CharInterval" /> array whose values are to be added.</param></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.AddRange(ActiproSoftware.Text.RegularExpressions.CharClass)"><summary>
            Adds the contents of a <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> to the collection.
            </summary><param name="charClass">The <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> whose values are to be added.</param></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.Clear"><summary>
            Clears the characters in this <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> instance, but does not reset the <see cref="P:ActiproSoftware.Text.RegularExpressions.CharClass.IsNegated" /> flag.
            </summary></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.Contains(System.Char)"><summary>
            Returns whether the specified character is in the character class.
            </summary><param name="ch">The character to look for in the collection.</param><returns><c>true</c> if the character is in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.Contains(System.Char,System.Char)"><summary>
            Returns whether the specified interval of characters is in the character class.
            </summary><param name="start">The start character in the interval.</param><param name="end">The end character in the interval.</param><returns><c>true</c> if the interval of characters is in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.Contains(ActiproSoftware.Text.RegularExpressions.CharInterval)"><summary>
            Returns whether the specified interval is in the character class.
            </summary><param name="interval">The <see cref="T:ActiproSoftware.Text.RegularExpressions.CharInterval" /> to look for in the collection.</param><returns><c>true</c> if the interval is in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.Contains(ActiproSoftware.Text.RegularExpressions.CharClass)"><summary>
            Returns whether the specified character class is in the character class.
            </summary><param name="charClass">The <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> to look for in the collection.</param><returns><c>true</c> if the character class is in the collection; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.CopyTo(ActiproSoftware.Text.RegularExpressions.CharInterval[],System.Int32)"><summary>
            Copies the entire collection to a compatible one-dimensional <c>Array</c>, 
            starting at the specified index of the target array.
            </summary><param name="array">
            The one-dimensional <see cref="T:ActiproSoftware.Text.RegularExpressions.CharInterval" /> array that is the destination of the elements copied from the collection. 
            The array must have zero-based indexing. 
            </param><param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.GetCategorySpecification(System.Globalization.UnicodeCategory)"><summary>
            Returns whether a certain Unicode general category is specified in this character class, and if so, whether it is positive or negative matching.
            </summary><param name="category">A <see cref="T:System.Globalization.UnicodeCategory" /> indicating the category.</param><returns><c>true</c> if the category is specified as a positive match.
            <c>false</c> if the category is specified as a negative match.
            <see langword="null" /> if the category is not specified.
            </returns></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.GetEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object for the entire collection.
            </summary><returns>An <c>IEnumerator</c> object for the entire collection</returns><remarks>
            Enumerators are intended to be used only to read data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para>
            The enumerator does not have exclusive access to the collection.
            </para><para>
            When an enumerator is instantiated, it takes a snapshot of the current state of the collection. 
            If changes are made to the collection, such as adding, modifying or deleting elements, the 
            snapshot gets out of sync and the enumerator throws an <c>InvalidOperationException</c>. 
            Two enumerators instantiated from the same collection at the same time can have 
            different snapshots of the collection.
            </para></remarks></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.Remove(System.Char)"><summary>
            Removes the specified character from the character class.
            </summary><param name="ch">The character to remove.</param><returns><c>true</c> if the character was removed; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.Remove(ActiproSoftware.Text.RegularExpressions.CharInterval)"><summary>
            Removes the specified character interval from the character class.
            </summary><param name="interval">The character interval to remove.</param><returns><c>true</c> if the character interval was removed; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.RemoveCategory(System.Globalization.UnicodeCategory)"><summary>
            Removes the specified Unicode general category from the character class.
            </summary><param name="category">A <see cref="T:System.Globalization.UnicodeCategory" /> indicating the category.</param></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.RemoveCategory(System.String)"><summary>
            Removes the specified Unicode general category from the character class.
            </summary><param name="categoryName">The name of the category.  For example, <c>Lu</c> is used for uppercase letters.</param></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.#ctor"><summary>
            Initializes a new instance of the <c>CharClass</c> class.
            </summary></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.#ctor(System.Char)"><summary>
            Initializes a new instance of the <c>CharClass</c> class with a character.
            </summary><param name="ch">A character to add to the character class.</param></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>CharClass</c> class with a string of characters.
            </summary><param name="characters">The string of characters to add to the character class.</param></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.#ctor(ActiproSoftware.Text.RegularExpressions.CharInterval[])"><summary>
            Initializes a new instance of the <c>CharClass</c> class with an array of <see cref="T:ActiproSoftware.Text.RegularExpressions.CharInterval" /> objects.
            </summary><param name="intervals">The array of <see cref="T:ActiproSoftware.Text.RegularExpressions.CharInterval" /> objects that should be added.</param></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.#ctor(ActiproSoftware.Text.RegularExpressions.CharClass)"><summary>
            Initializes a new instance of the <c>CharClass</c> class with another <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" />.
            </summary><param name="charClass">The <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> whose items should be added.</param></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.#ctor(System.Char,System.Char)"><summary>
            Initializes a new instance of the <c>CharClass</c> class with an interval of characters.
            </summary><param name="start">The start character in the interval.</param><param name="end">The end character in the interval.</param></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.#ctor(System.Char,System.Boolean)"><summary>
            Initializes a new instance of the <c>CharClass</c> class with a character and an optional complement.
            </summary><param name="ch">A character to add to the character class.</param><param name="isNegated">Whether to negate the character class after adding the initial character.</param></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharClass.#ctor(System.Char,System.Char,System.Boolean)"><summary>
            Initializes a new instance of the <c>CharClass</c> class with an interval of characters and an optional complement.
            </summary><param name="start">The start character in the interval.</param><param name="end">The end character in the interval.</param><param name="isNegated">Whether to negate the character class after adding the initial character range.</param></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.All"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains all Unicode characters.
            </summary><value>A <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains all Unicode characters.</value><remarks>This character class is the equivalent of <c>[\u0000-\uFFFF]</c>.</remarks></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.Alpha"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains all alphabetic characters.
            </summary><value>A <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains all alphabetic characters.</value><remarks>This character class is the equivalent of <c>\p{L}</c> (all letters).</remarks></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.Digit"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains all Unicode decimal digits.
            </summary><value>A <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains all Unicode decimal digits.</value><remarks>This character class is the equivalent of <c>\d</c> and <c>\p{Nd}</c>.</remarks></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.HexDigit"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains all Unicode hexidecimal digits.
            </summary><value>A <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains all Unicode hexidecimal digits.</value><remarks>This character class is the equivalent of <c>[0-9a-fA-F]</c>.</remarks></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.LineTerminator"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains all Unicode line terminators.
            </summary><value>A <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains all Unicode line terminators.</value><remarks>This character class is the equivalent of <c>[\n\r\p{Zl}\p{Zp}]</c>.</remarks></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.LineTerminatorWhitespace"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains all Unicode line terminators and whitespace characters.
            </summary><value>A <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains all Unicode line terminators and whitespace characters.</value><remarks>This character class is the equivalent of <c>\s</c> or <c>[\f\n\r\t\v\x85\p{Z}]</c>.</remarks></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.NonAlpha"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains no alphabetic digits.
            </summary><value>A <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains no alphabetic digits.</value><remarks>This character class is the equivalent of <c>\P{L}</c> (no letters).</remarks></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.NonDigit"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains no Unicode decimal digits.
            </summary><value>A <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains no Unicode decimal digits.</value><remarks>This character class is the equivalent of <c>\D</c>.</remarks></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.None"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains no characters.
            </summary><value>A <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains no characters.</value></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.NonHexDigit"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains no Unicode hexidecimal digits.
            </summary><value>A <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains no Unicode hexidecimal digits.</value></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.NonLineTerminator"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains no Unicode line terminators.
            </summary><value>A <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains no Unicode line terminators.</value><remarks>This character class is the equivalent of <c>[^\n\r\p{Zl}\p{Zp}]</c>.</remarks></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.NonLineTerminatorWhitespace"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains no Unicode line terminators or whitespace characters.
            </summary><value>A <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains no Unicode line terminators or whitespace characters.</value><remarks>This character class is the equivalent of <c>\S</c> or <c>[^\f\n\r\t\v\x85\p{Z}]</c>.</remarks></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.NonWhitespace"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains no Unicode whitespace characters.
            </summary><value>A <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains no Unicode whitespace characters.</value><remarks>This character class is the equivalent of <c>[^\f\t\v\x85\p{Zs}]</c>.</remarks></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.NonWord"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains no word characters.
            </summary><value>A <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains no word characters.</value><remarks>This character class is the equivalent of <c>\W</c> and <c>[^\p{L}\p{Nd}\p{Pc}]</c> (no letters, decimal digits, and connectors like underscore).</remarks></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.Whitespace"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains all Unicode whitespace characters.
            </summary><value>A <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains all Unicode whitespace characters.</value><remarks>This character class is the equivalent of <c>[\f\t\v\x85\p{Zs}]</c>.</remarks></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.Word"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains all word characters.
            </summary><value>A <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> that contains all word characters.</value><remarks><remarks>This character class is the equivalent of <c>\w</c> and <c>[\p{L}\p{Nd}\p{Pc}]</c> (all letters, decimal digits, and connectors like underscore).</remarks></remarks></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.CharacterCount"><summary>
            Gets the number of characters contained in the <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> intervals, excluding any Unicode general categories specified.
            </summary><value>The number of characters contained in the <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> intervals, excluding any Unicode general categories specified.</value></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.Count"><summary>
            Gets the number of elements contained in the <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> instance.
            </summary><value>The number of elements contained in the <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> instance.</value></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.HasCategorySpecification"><summary>
            Gets whether there is at least one Unicode generate category specification in the character class.
            </summary><value><c>true</c> if there is at least one Unicode generate category specification in the character class; otherwise, <c>false</c>.
            </value><remarks>
            Use the <see cref="M:ActiproSoftware.Text.RegularExpressions.CharClass.GetCategorySpecification(System.Globalization.UnicodeCategory)" /> method to test whether a specific <see cref="T:System.Globalization.UnicodeCategory" /> is specified,
            and whether it is positive or negative.
            </remarks></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.IsNegated"><summary>
            Gets whether the character class is negated.
            </summary><value><c>true</c> if the character class is negated; otherwise, <c>false</c>.
            </value><remarks>
            The negation is the opposite of the character class, specified by a <c>^</c> character after the open square brace.
            When negated, the return value of <see cref="M:ActiproSoftware.Text.RegularExpressions.CharClass.Contains(System.Char)" /> is toggled.
            </remarks></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.IsReadOnly"><summary>
            Gets whether the collection is read-only.
            </summary><value><c>true</c> if the colletion is read-only; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.IsSingleCharacter"><summary>
            Gets whether the character class only contains an interval for a single character.
            </summary><value><c>true</c> if the character class only contains an interval for a single character; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharClass.Item(System.Int32)"><summary>
            Gets the interval at the specified index. 
            <para>
            [C#] In C#, this property is the indexer for the <c>CharClass</c> class. 
            </para></summary><param name="index">The index of the interval to return.</param><value>
            The <see cref="T:ActiproSoftware.Text.RegularExpressions.CharInterval" /> at the specified index. 
            </value></member><member name="T:ActiproSoftware.Text.RegularExpressions.CharInterval"><summary>
            Stores an interval of characters.
            </summary></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharInterval.Contains(System.Char)"><summary>
            Returns whether the specified character is contained by the interval.
            </summary><param name="ch">The character to test.</param><returns><c>true</c> if the specified character is contained by the interval; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharInterval.Contains(ActiproSoftware.Text.RegularExpressions.CharInterval)"><summary>
            Returns whether the specified character interval is contained by the interval.
            </summary><param name="interval">The character interval to test.</param><returns><c>true</c> if the specified character interval is contained by the interval; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharInterval.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharInterval.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharInterval.IntersectsWith(ActiproSoftware.Text.RegularExpressions.CharInterval)"><summary>
            Returns whether the specified character interval intersects with the interval.
            </summary><param name="interval">The character interval to test.</param><returns><c>true</c> if the specified character interval intersects with the interval; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharInterval.GetIntersection(ActiproSoftware.Text.RegularExpressions.CharInterval)"><summary>
            Creates the intersection of the interval with another <see cref="T:ActiproSoftware.Text.RegularExpressions.CharInterval" />.
            </summary><param name="interval">The <see cref="T:ActiproSoftware.Text.RegularExpressions.CharInterval" /> used to find the intersection.</param><returns>The intersection of the interval with another <see cref="T:ActiproSoftware.Text.RegularExpressions.CharInterval" />.</returns></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharInterval.ToString"><summary>
            Converts the object to a <c>String</c>.
            </summary><returns>
            A string whose value represents this object.
            </returns></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharInterval.#ctor(System.Char)"><summary>
            Initializes a new instance of the <see cref="T:ActiproSoftware.Text.RegularExpressions.CharInterval" /> class.
            </summary><param name="ch">The character in the interval.</param></member><member name="M:ActiproSoftware.Text.RegularExpressions.CharInterval.#ctor(System.Char,System.Char)"><summary>
            Initializes a new instance of the <see cref="T:ActiproSoftware.Text.RegularExpressions.CharInterval" /> class.
            </summary><param name="start">The start character in the interval.</param><param name="end">The end character in the interval.</param></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharInterval.Count"><summary>
            Gets the number of characters contained in interval.
            </summary><value>The number of characters contained in interval.</value></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharInterval.End"><summary>
            Gets or sets the end character in the interval of this <see cref="T:ActiproSoftware.Text.RegularExpressions.CharInterval" />.
            </summary><value>The end character in the interval of this <see cref="T:ActiproSoftware.Text.RegularExpressions.CharInterval" />.</value></member><member name="P:ActiproSoftware.Text.RegularExpressions.CharInterval.Start"><summary>
            Gets or sets the start character in the interval of this <see cref="T:ActiproSoftware.Text.RegularExpressions.CharInterval" />.
            </summary><value>The start character in the interval of this <see cref="T:ActiproSoftware.Text.RegularExpressions.CharInterval" />.</value></member><member name="T:ActiproSoftware.Text.RegularExpressions.InvalidRegexPatternException"><summary>
            An exception that is thrown when parsing invalid regular expression patterns.
            </summary></member><member name="M:ActiproSoftware.Text.RegularExpressions.InvalidRegexPatternException.#ctor"><summary>
            Initializes a new instance of the <c>InvalidRegexPatternException</c> class.
            </summary></member><member name="M:ActiproSoftware.Text.RegularExpressions.InvalidRegexPatternException.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>InvalidRegexPatternException</c> class with a specified error message.
            </summary><param name="message">The error message that explains the reason for the exception.</param></member><member name="M:ActiproSoftware.Text.RegularExpressions.InvalidRegexPatternException.#ctor(System.String,System.Exception)"><summary>
            Initializes a new instance of the <c>InvalidRegexPatternException</c> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary><param name="message">The error message that explains the reason for the exception.</param><param name="innerException">The exception that is the cause of the current exception.</param></member><member name="M:ActiproSoftware.Text.RegularExpressions.InvalidRegexPatternException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><summary>
            Initializes a new instance of the <c>InvalidRegexPatternException</c> class with serialized data.
            </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param></member><member name="T:ActiproSoftware.Text.RegularExpressions.MatchType"><summary>
            Represents the type of regular expression match that was made.
            </summary></member><member name="F:ActiproSoftware.Text.RegularExpressions.MatchType.NoMatch"><summary>
            No match was made.
            </summary></member><member name="F:ActiproSoftware.Text.RegularExpressions.MatchType.ExactMatch"><summary>
            An exact match was made.
            </summary></member><member name="F:ActiproSoftware.Text.RegularExpressions.MatchType.LooseMatch"><summary>
            A loose match was made.  This occurs when using a case insensitivity of <c>AutoCorrect</c> and a non-exact match was found.
            </summary></member><member name="T:ActiproSoftware.Text.RegularExpressions.RegexHelper"><summary>
            Provides helper methods for working with regular expression patterns.
            </summary></member><member name="M:ActiproSoftware.Text.RegularExpressions.RegexHelper.Escape(System.String)"><summary>
            Escapes all special characters in the specified regex search pattern.
            </summary><param name="pattern">The search pattern to escape.</param><returns>The escaped pattern.</returns></member><member name="M:ActiproSoftware.Text.RegularExpressions.RegexHelper.Escape(System.String,System.Boolean)"><summary>
            Escapes all special characters in the specified regex search or replace pattern.
            </summary><param name="pattern">The pattern to escape.</param><param name="isReplacePattern">Whether the <paramref name="pattern" /> is a replace pattern.</param><returns>The escaped pattern.</returns></member><member name="M:ActiproSoftware.Text.RegularExpressions.RegexHelper.IsPatternSpecialChar(System.Char)"><summary>
            Returns whether the specified character is a search pattern special character.
            </summary><param name="ch">The character to examine.</param><returns><c>true</c> if the specified character is a find pattern special character; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.RegularExpressions.RegexHelper.Validate(System.String,System.Boolean)"><summary>
            Validates the specified regular expression pattern.
            </summary><param name="pattern">The pattern to examine.</param><param name="allowCapturing">Whether to allow capturing.</param><remarks>
            An exception will be thrown if the pattern is invalid.
            </remarks></member><member name="M:ActiproSoftware.Text.RegularExpressions.RegexHelper.Validate(System.String,System.Boolean,System.Collections.Generic.HashSet{System.String})"><summary>
            Validates the specified regular expression pattern and referenced lexical macros.
            </summary><param name="pattern">The pattern to examine.</param><param name="allowCapturing">Whether to allow capturing.</param><param name="macroKeys">The set of available lexical macro keys.</param><remarks>
            An exception will be thrown if the pattern is invalid.
            </remarks></member><member name="T:ActiproSoftware.Text.Parsing.AmbientParseRequestDispatcherProvider"><summary>
            Implements a class that can be used to provide a static <see cref="T:ActiproSoftware.Text.Parsing.IParseRequestDispatcher" /> that is used for parsing operations by default.
            </summary><remarks>
            Set the <see cref="P:ActiproSoftware.Text.Parsing.AmbientParseRequestDispatcherProvider.Dispatcher" /> property to an <see cref="T:ActiproSoftware.Text.Parsing.IParseRequestDispatcher" /> instance to register the default dispatcher.
            </remarks></member><member name="P:ActiproSoftware.Text.Parsing.AmbientParseRequestDispatcherProvider.Dispatcher"><summary>
            Gets or sets the default <see cref="T:ActiproSoftware.Text.Parsing.IParseRequestDispatcher" /> to use when a parsing operation request is made.
            </summary><value>The default <see cref="T:ActiproSoftware.Text.Parsing.IParseRequestDispatcher" /> to use when a parsing operation request is made.</value></member><member name="T:ActiproSoftware.Text.Parsing.IAstNode"><summary>
            Provides the base requirements for an AST (abstract syntax tree) node.
            </summary></member><member name="M:ActiproSoftware.Text.Parsing.IAstNode.Contains(System.Int32)"><summary>
            Returns whether the AST node contains the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the AST node contains the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the offset falls on the <see cref="P:ActiproSoftware.Text.Parsing.IAstNode.EndOffset" /> offset
            since this method indicates if the offset is encompassed by the AST node.
            This method also returns <c>false</c> if the AST node doesn't have known offsets.
            </remarks></member><member name="M:ActiproSoftware.Text.Parsing.IAstNode.FindChildNode(System.Int32)"><summary>
            Searches through the child nodes for a node that contains the specified offset.
            </summary><param name="offset">The offset to check.</param><returns>The child <see cref="T:ActiproSoftware.Text.Parsing.IAstNode" /> that contains the specified offset, if any.</returns></member><member name="M:ActiproSoftware.Text.Parsing.IAstNode.FindDescendantNode(System.Int32)"><summary>
            Recursively searches through the descendant nodes for a node that contains the specified offset.
            </summary><param name="offset">The offset to check.</param><returns>The descendant <see cref="T:ActiproSoftware.Text.Parsing.IAstNode" /> that contains the specified offset, if any.</returns></member><member name="M:ActiproSoftware.Text.Parsing.IAstNode.ToTreeString(System.Int32)"><summary>
            Outputs the contents of the AST node in tree form.
            </summary><param name="indentLevel">The indentation level.</param><returns>A string containing the tree form of the AST node.</returns></member><member name="P:ActiproSoftware.Text.Parsing.IAstNode.Children"><summary>
            Gets the list containing the child AST nodes of this AST node.
            </summary><value>The list containing the child AST nodes of this AST node.</value></member><member name="P:ActiproSoftware.Text.Parsing.IAstNode.EndOffset"><summary>
            Gets or sets the end offset of this AST node, if known.
            </summary><value>The end offset of this AST node, if known.</value></member><member name="P:ActiproSoftware.Text.Parsing.IAstNode.HasChildren"><summary>
            Gets whether the AST node contains any child AST nodes.
            </summary><value><c>true</c> if the AST node contains any child AST nodes; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Parsing.IAstNode.Id"><summary>
            Gets an integer value that identifies the type of AST node, if known.
            </summary><value>An integer value that identifies the type of AST node, if known.</value></member><member name="P:ActiproSoftware.Text.Parsing.IAstNode.Length"><summary>
            Gets the character length of this AST node, if known.
            </summary><value>The character length of this AST node, if known.</value></member><member name="P:ActiproSoftware.Text.Parsing.IAstNode.Parent"><summary>
            Gets or sets the parent <see cref="T:ActiproSoftware.Text.Parsing.IAstNode" /> of this AST node, if known.
            </summary><value>The parent <see cref="T:ActiproSoftware.Text.Parsing.IAstNode" /> of this AST node, if known.</value></member><member name="P:ActiproSoftware.Text.Parsing.IAstNode.StartOffset"><summary>
            Gets or sets the start offset of this AST node, if known.
            </summary><value>The start offset of this AST node, if known.</value></member><member name="P:ActiproSoftware.Text.Parsing.IAstNode.Value"><summary>
            Gets or sets the string-based value for the AST node.
            </summary><value>The string-based value for the AST node.</value></member><member name="T:ActiproSoftware.Text.Parsing.IAstNodeIdProvider"><summary>
            Provides the base requirements for a class that provides AST node ID's.
            </summary></member><member name="T:ActiproSoftware.Text.Parsing.IParseData"><summary>
            Provides the base requirements for a class that represents the result of a parsing operation.
            </summary></member><member name="T:ActiproSoftware.Text.Parsing.IParseError"><summary>
            Provides the base requirements for an object that indicates a message, warning or error related to parsing.
            </summary><seealso cref="T:ActiproSoftware.Text.Parsing.Implementation.ParseError" /></member><member name="P:ActiproSoftware.Text.Parsing.IParseError.ClassificationType"><summary>
            Gets the optional <see cref="T:ActiproSoftware.Text.IClassificationType" /> associated with the error.
            </summary><value>The optional <see cref="T:ActiproSoftware.Text.IClassificationType" /> associated with the error.</value></member><member name="P:ActiproSoftware.Text.Parsing.IParseError.Description"><summary>
            Gets the description of the error, which is displayed in the user interface.
            </summary><value>The description of the error, which is displayed in the user interface.</value></member><member name="P:ActiproSoftware.Text.Parsing.IParseError.Level"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.Parsing.ParseErrorLevel" /> indicating the error level.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Parsing.ParseErrorLevel" /> indicating the error level.</value></member><member name="P:ActiproSoftware.Text.Parsing.IParseError.PositionRange"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.TextPositionRange" /> of the error.
            </summary><value>The <see cref="T:ActiproSoftware.Text.TextPositionRange" /> of the error.</value><remarks>
            If no text position data is available for the error, the value should be <c>TextPositionRange.Empty</c>.
            </remarks></member><member name="T:ActiproSoftware.Text.Parsing.IParseErrorProvider"><summary>
            Provides the base requirements for an object that returns a list of <see cref="T:ActiproSoftware.Text.Parsing.IParseError" /> objects,
            and is generally implemented by <see cref="T:ActiproSoftware.Text.Parsing.IParseData" /> instances if they support error reporting.
            </summary><seealso cref="T:ActiproSoftware.Text.Parsing.IParseError" /></member><member name="P:ActiproSoftware.Text.Parsing.IParseErrorProvider.Errors"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.Text.Parsing.IParseError" /> objects that specify parse errors.
            </summary><value>The collection of <see cref="T:ActiproSoftware.Text.Parsing.IParseError" /> objects that specify parse errors.</value></member><member name="P:ActiproSoftware.Text.Parsing.IParseErrorProvider.Snapshot"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextSnapshot" />, if known, from which the parse errors were created.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextSnapshot" />, if known, from which the parse errors were created.</value></member><member name="T:ActiproSoftware.Text.Parsing.IParser"><summary>
            Provides the base requirements of a parser (syntax/semantic analyzer) for a language.
            </summary><remarks>
            This interface type can be registered with an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> using the 
            <see cref="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService(System.Object,System.Object)" /> method.
            Once an object that implements this interface is registered with the language for this interface type, its features can be used by the language.
            </remarks></member><member name="M:ActiproSoftware.Text.Parsing.IParser.Parse(ActiproSoftware.Text.Parsing.IParseRequest)"><summary>
            Performs a parsing operation using the parameters specified in the supplied <see cref="T:ActiproSoftware.Text.Parsing.IParseRequest" />
            and returns the resulting parse data.
            </summary><param name="request">The <see cref="T:ActiproSoftware.Text.Parsing.IParseRequest" /> that contains data about the requested parsing operation.</param><returns>An <see cref="T:ActiproSoftware.Text.Parsing.IParseData" /> that is the result of the parsing operation.</returns><remarks>
            A <see cref="T:ActiproSoftware.Text.Parsing.IParseRequestDispatcher" /> typically calls this method when a queued parse request is ready to be processed.
            </remarks></member><member name="T:ActiproSoftware.Text.Parsing.IParseRequest"><summary>
            Provides the base requirements of a parsing operation request.
            </summary><seealso cref="T:ActiproSoftware.Text.Parsing.Implementation.ParseRequest" /></member><member name="P:ActiproSoftware.Text.Parsing.IParseRequest.CreatedDateTime"><summary>
            Gets the <see cref="T:System.DateTime" /> at which the parse request was created.
            </summary><value>The <see cref="T:System.DateTime" /> at which the parse request was created.</value></member><member name="P:ActiproSoftware.Text.Parsing.IParseRequest.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> for which this parse request was created.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> for which this parse request was created.</value></member><member name="P:ActiproSoftware.Text.Parsing.IParseRequest.ParseHashKey"><summary>
            Gets a hash key that uniquely identifies the parse request for a source/target combination.
            </summary><value>A hash key that uniquely identifies the parse request for a source/target combination.</value></member><member name="P:ActiproSoftware.Text.Parsing.IParseRequest.Parser"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Parsing.IParser" /> that will perform the parsing operation.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Parsing.IParser" /> that will perform the parsing operation.</value></member><member name="P:ActiproSoftware.Text.Parsing.IParseRequest.Priority"><summary>
            Gets an integer value describing the priority of the request, where a higher number has a higher priority.
            </summary><value>
            An integer value describing the priority of the request, where a higher number has a higher priority.
            The default value is <c>ParseRequest.MediumPriority</c>.
            </value></member><member name="P:ActiproSoftware.Text.Parsing.IParseRequest.RepeatedRequestPause"><summary>
            Gets or sets the number of milliseconds to pause if there are repeated attempts for this same request.
            </summary><value>The number of milliseconds to pause if there are repeated attempts for this same request.  The default value is <c>250</c>.</value></member><member name="P:ActiproSoftware.Text.Parsing.IParseRequest.Snapshot"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextSnapshot" />, if available, for which the parse request was created.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextSnapshot" />, if available, for which the parse request was created.</value></member><member name="P:ActiproSoftware.Text.Parsing.IParseRequest.SourceKey"><summary>
            Gets a text key, typically a filename, that uniquely identifies the text to parse.
            </summary><value>A text key, typically a filename, that uniquely identifies the text to parse.</value></member><member name="P:ActiproSoftware.Text.Parsing.IParseRequest.State"><summary>
            Gets or sets the current state of the request.
            </summary><value>The current state of the request.</value><remarks>
            This property should only be set by a <see cref="T:ActiproSoftware.Text.Parsing.IParseRequestDispatcher" />.
            </remarks></member><member name="P:ActiproSoftware.Text.Parsing.IParseRequest.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.Text.Parsing.IParseRequest.Target"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Parsing.IParseTarget" /> that will be notified once the parsing operation is complete.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Parsing.IParseTarget" /> that will be notified once the parsing operation is complete.</value></member><member name="P:ActiproSoftware.Text.Parsing.IParseRequest.TextBufferReader"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> used to read the text that should be parsed.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> used to read the text that should be parsed.</value></member><member name="T:ActiproSoftware.Text.Parsing.IParseRequestDispatcher"><summary>
            Provides the base requirements for a class that can queue up <see cref="T:ActiproSoftware.Text.Parsing.IParseRequest" /> objects, 
            prioritize and execute them on one or more worker threads, and notify an <see cref="T:ActiproSoftware.Text.Parsing.IParseTarget" /> of the result.
            </summary><seealso cref="T:ActiproSoftware.Text.Parsing.Implementation.ThreadedParseRequestDispatcher" /></member><member name="M:ActiproSoftware.Text.Parsing.IParseRequestDispatcher.GetPendingRequests"><summary>
            Gets an array of the pending requests in the parse request queue.
            </summary><value>An array of the pending requests in the parse request queue.</value></member><member name="M:ActiproSoftware.Text.Parsing.IParseRequestDispatcher.HasPendingRequest(System.String)"><summary>
            Returns whether there is currently a pending request with the specified hash key.
            </summary><param name="parseHashKey">The parse hash key identifying the request for which to search.</param><returns><c>true</c> if there is currently a pending request with the specified hash key; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Parsing.IParseRequestDispatcher.QueueRequest(ActiproSoftware.Text.Parsing.IParseRequest)"><summary>
            Adds an <see cref="T:ActiproSoftware.Text.Parsing.IParseRequest" /> to the queue of pending requests.
            </summary><param name="request">The <see cref="T:ActiproSoftware.Text.Parsing.IParseRequest" /> that should be processed.</param></member><member name="M:ActiproSoftware.Text.Parsing.IParseRequestDispatcher.RemovePendingRequests(System.String)"><summary>
            Removes any pending requests in the parse request queue that have the specified hash key.
            </summary><param name="parseHashKey">The parse hash key for which to search.</param><returns>
            The number of pending requests that were removed.
            </returns></member><member name="M:ActiproSoftware.Text.Parsing.IParseRequestDispatcher.WaitForParse(System.String)"><summary>
            Waits a maximum of 250 milliseconds for the specified request to complete.
            </summary><param name="parseHashKey">The parse hash key identifying the request for which to wait.</param><returns><c>true</c> if a wait occurred; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Parsing.IParseRequestDispatcher.WaitForParse(System.String,System.Int32)"><summary>
            Waits for the specified request to complete, up to a maximum number of milliseconds.
            </summary><param name="parseHashKey">The parse hash key identifying the request for which to wait.</param><param name="maximumWaitTime">The maximum wait time in milliseconds.</param><returns><c>true</c> if a wait occurred; otherwise, <c>false</c>.
            </returns></member><member name="P:ActiproSoftware.Text.Parsing.IParseRequestDispatcher.IsBusy"><summary>
            Gets whether the multi-threaded parser service is currently busy processing a request.
            </summary><value><c>true</c> if the multi-threaded parser service is currently busy processing a request; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Parsing.IParseRequestDispatcher.PendingRequestCount"><summary>
            Gets the number of pending requests remaining in the parse request queue.
            </summary><value>The number of pending requests remaining in the parse request queue.</value></member><member name="T:ActiproSoftware.Text.Parsing.IParseTarget"><summary>
            Provides the base requirements for a class that can be notified with the results of a parsing operation.
            </summary></member><member name="M:ActiproSoftware.Text.Parsing.IParseTarget.NotifyParseComplete(ActiproSoftware.Text.Parsing.IParseRequest,ActiproSoftware.Text.Parsing.IParseData)"><summary>
            Called when a parsing operation has completed, and passes the original request along with the result.
            </summary><param name="request">An <see cref="T:ActiproSoftware.Text.Parsing.IParseRequest" /> that contains information about the parsing operation that was requested.</param><param name="result">An <see cref="T:ActiproSoftware.Text.Parsing.IParseData" /> that is the result of the parsing operation.</param></member><member name="P:ActiproSoftware.Text.Parsing.IParseTarget.UniqueId"><summary>
            Gets the <see cref="T:System.Guid" /> that uniquely identifies the control.
            </summary><value>The <see cref="T:System.Guid" /> that uniquely identifies the control.</value></member><member name="T:ActiproSoftware.Text.Parsing.ParseDataPropertyChangedEventArgs"><summary>
            Provides event arguments for a property change event, indicating the old and new values.
            </summary></member><member name="M:ActiproSoftware.Text.Parsing.ParseDataPropertyChangedEventArgs.#ctor(ActiproSoftware.Text.Parsing.IParseData,ActiproSoftware.Text.Parsing.IParseData)"><summary>
            Initializes a new instance of the <c>ParseDataPropertyChangedEventArgs</c> class.
            </summary><param name="oldValue">The previous value of the property being tracked as reported by an event.</param><param name="newValue">The new value of the property being tracked as reported by an event.</param></member><member name="T:ActiproSoftware.Text.Parsing.ParseErrorLevel"><summary>
            Specifies the error level of an <see cref="T:ActiproSoftware.Text.Parsing.IParseError" />.
            </summary></member><member name="F:ActiproSoftware.Text.Parsing.ParseErrorLevel.Message"><summary>
            A message.
            </summary></member><member name="F:ActiproSoftware.Text.Parsing.ParseErrorLevel.Warning"><summary>
            A warning.
            </summary></member><member name="F:ActiproSoftware.Text.Parsing.ParseErrorLevel.Error"><summary>
            An error.
            </summary></member><member name="T:ActiproSoftware.Text.Parsing.ParseRequestState"><summary>
            Specifies the current state of an <see cref="T:ActiproSoftware.Text.Parsing.IParseRequest" />.
            </summary></member><member name="F:ActiproSoftware.Text.Parsing.ParseRequestState.Created"><summary>
            The request has been created, but has not yet been queued.
            </summary></member><member name="F:ActiproSoftware.Text.Parsing.ParseRequestState.Queued"><summary>
            The request has been queued by an <see cref="T:ActiproSoftware.Text.Parsing.IParseRequestDispatcher" />.
            </summary></member><member name="F:ActiproSoftware.Text.Parsing.ParseRequestState.Processing"><summary>
            The request is currently being processed by an <see cref="T:ActiproSoftware.Text.Parsing.IParser" />.
            </summary></member><member name="F:ActiproSoftware.Text.Parsing.ParseRequestState.Processed"><summary>
            The request has been processed.
            </summary></member><member name="F:ActiproSoftware.Text.Parsing.ParseRequestState.Aborted"><summary>
            The request has been aborted, possibly removed for another newer request for the same parse hash key.
            </summary></member><member name="T:ActiproSoftware.Text.Parsing.SyntaxLanguageParsingExtensions"><summary>
            Contains parsing-related extension methods that make it easier to work with <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> objects.
            </summary></member><member name="M:ActiproSoftware.Text.Parsing.SyntaxLanguageParsingExtensions.Parse(ActiproSoftware.Text.ISyntaxLanguage,System.String)"><summary>
            Parses text using the specified language's <see cref="T:ActiproSoftware.Text.Parsing.IParser" /> service and returns the <see cref="T:ActiproSoftware.Text.Parsing.IParseData" /> result.
            </summary><param name="language">The <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> to examine for a parser.</param><param name="text">The text to parse.</param><returns>The <see cref="T:ActiproSoftware.Text.Parsing.IParseData" /> returned by the parser.</returns><remarks>This method parses text directly in the calling thread.</remarks></member><member name="T:ActiproSoftware.Text.Parsing.Implementation.AstNodeBase"><summary>
            Represents an abstract AST (abstract syntax tree) node implementation that is intended to be used as a base class for type-specific AST nodes.
            </summary></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.AstNodeBase.Contains(System.Int32)"><summary>
            Returns whether the AST node contains the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the AST node contains the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the offset falls on the <see cref="P:ActiproSoftware.Text.Parsing.Implementation.AstNodeBase.EndOffset" /> offset
            since this method indicates if the offset is encompassed by the AST node.
            This method also returns <c>false</c> if the AST node doesn't have known offsets.
            </remarks></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.AstNodeBase.FindChildNode(System.Int32)"><summary>
            Searches through the child nodes for a node that contains the specified offset.
            </summary><param name="offset">The offset to check.</param><returns>The child <see cref="T:ActiproSoftware.Text.Parsing.IAstNode" /> that contains the specified offset, if any.</returns></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.AstNodeBase.FindDescendantNode(System.Int32)"><summary>
            Recursively searches through the descendant nodes for a node that contains the specified offset.
            </summary><param name="offset">The offset to check.</param><returns>The descendant <see cref="T:ActiproSoftware.Text.Parsing.IAstNode" /> that contains the specified offset, if any.</returns></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.AstNodeBase.GetChildrenEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object that can iterate the child <see cref="T:ActiproSoftware.Text.Parsing.IAstNode" /> objects in this node.
            </summary><returns>An <c>IEnumerator</c> object that can iterate the child <see cref="T:ActiproSoftware.Text.Parsing.IAstNode" /> objects in this node.</returns></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.AstNodeBase.ToString"><summary>
            Returns a <c>String</c> that represents the current <c>Object</c>.
            </summary><returns>A <c>String</c> that represents the current <c>Object</c>.</returns></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.AstNodeBase.ToTreeString(System.Int32)"><summary>
            Outputs the contents of the AST node in tree form.
            </summary><param name="indentLevel">The indentation level.</param><returns>A string containing the tree form of the AST node.</returns></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.AstNodeBase.Children"><summary>
            Gets the list containing the child AST nodes of this AST node.
            </summary><value>The list containing the child AST nodes of this AST node.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.AstNodeBase.EndOffset"><summary>
            Gets or sets the end offset of this AST node, if known.
            </summary><value>The end offset of this AST node, if known.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.AstNodeBase.HasChildren"><summary>
            Gets whether the AST node contains any child AST nodes.
            </summary><value><c>true</c> if the AST node contains any child AST nodes; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.AstNodeBase.Id"><summary>
            Gets an integer value that identifies the type of AST node, if known.
            </summary><value>An integer value that identifies the type of AST node, if known.</value><remarks>
            This class' default implementation always returns <c>0</c>.
            </remarks></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.AstNodeBase.Length"><summary>
            Gets the character length of this AST node, if known.
            </summary><value>The character length of this AST node, if known.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.AstNodeBase.Parent"><summary>
            Gets or sets the parent <see cref="T:ActiproSoftware.Text.Parsing.IAstNode" /> of this AST node, if known.
            </summary><value>The parent <see cref="T:ActiproSoftware.Text.Parsing.IAstNode" /> of this AST node, if known.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.AstNodeBase.Root"><summary>
            Gets the root <see cref="T:ActiproSoftware.Text.Parsing.IAstNode" /> of this AST node hierarchy, if known.
            </summary><value>The root <see cref="T:ActiproSoftware.Text.Parsing.IAstNode" /> of this AST node hierarchy, if known.</value><remarks>
            The root node is found by walking up the <see cref="P:ActiproSoftware.Text.Parsing.Implementation.AstNodeBase.Parent" /> tree.
            </remarks></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.AstNodeBase.StartOffset"><summary>
            Gets or sets the start offset of this AST node, if known.
            </summary><value>The start offset of this AST node, if known.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.AstNodeBase.Value"><summary>
            Gets or sets the string-based value for the AST node.
            </summary><value>The string-based value for the AST node.</value></member><member name="T:ActiproSoftware.Text.Parsing.Implementation.AstNodeIdProviderBase"><summary>
            Represents an abstract base class for an object that provides static IDs for the AST nodes of an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" />.
            </summary></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.AstNodeIdProviderBase.ContainsId(System.Int32)"><summary>
            Returns whether the specified ID value is valid for this ID provider.
            </summary><param name="id">The ID to examine.</param><returns><c>true</c> if the ID value is valid; otherwise, <c>false</c></returns></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.AstNodeIdProviderBase.GetDescription(System.Int32)"><summary>
            Returns the actual string representation for the specified ID.
            </summary><param name="id">The ID to examine.</param><returns>The actual string representation for the specified ID.</returns></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.AstNodeIdProviderBase.GetKey(System.Int32)"><summary>
            Returns the string-based key for the specified ID.
            </summary><param name="id">The ID to examine.</param><returns>The string-based key for the specified ID.</returns></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.AstNodeIdProviderBase.MaxId"><summary>
            Gets the maximum ID returned by this provider.
            </summary><value>The maximum ID returned by this provider.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.AstNodeIdProviderBase.MinId"><summary>
            Gets the minimum ID returned by this provider.
            </summary><value>The minimum ID returned by this provider.</value></member><member name="T:ActiproSoftware.Text.Parsing.Implementation.DefaultAstNode"><summary>
            Represents an AST (abstract syntax tree) node implementation that has a string value and optional child nodes.
            </summary></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.DefaultAstNode.Contains(System.Int32)"><summary>
            Returns whether the AST node contains the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the AST node contains the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the offset falls on the <see cref="P:ActiproSoftware.Text.Parsing.Implementation.DefaultAstNode.EndOffset" /> offset
            since this method indicates if the offset is encompassed by the AST node.
            This method also returns <c>false</c> if the AST node doesn't have known offsets.
            </remarks></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.DefaultAstNode.FindChildNode(System.Int32)"><summary>
            Searches through the child nodes for a node that contains the specified offset.
            </summary><param name="offset">The offset to check.</param><returns>The child <see cref="T:ActiproSoftware.Text.Parsing.IAstNode" /> that contains the specified offset, if any.</returns></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.DefaultAstNode.FindDescendantNode(System.Int32)"><summary>
            Recursively searches through the descendant nodes for a node that contains the specified offset.
            </summary><param name="offset">The offset to check.</param><returns>The descendant <see cref="T:ActiproSoftware.Text.Parsing.IAstNode" /> that contains the specified offset, if any.</returns></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.DefaultAstNode.ToString"><summary>
            Returns a <c>String</c> that represents the current <c>Object</c>.
            </summary><returns>A <c>String</c> that represents the current <c>Object</c>.</returns></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.DefaultAstNode.ToTreeString(System.Int32)"><summary>
            Outputs the contents of the AST node in tree form.
            </summary><param name="indentLevel">The indentation level.</param><returns>A string containing the tree form of the AST node.</returns></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.DefaultAstNode.Children"><summary>
            Gets the list containing the child AST nodes of this AST node.
            </summary><value>The list containing the child AST nodes of this AST node.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.DefaultAstNode.EndOffset"><summary>
            Gets or sets the end offset of this AST node, if known.
            </summary><value>The end offset of this AST node, if known.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.DefaultAstNode.HasChildren"><summary>
            Gets whether the AST node contains any child AST nodes.
            </summary><value><c>true</c> if the AST node contains any child AST nodes; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.DefaultAstNode.Id"><summary>
            Gets an integer value that identifies the type of AST node, if known.
            </summary><value>An integer value that identifies the type of AST node, if known.</value><remarks>
            This class' default implementation always returns <c>0</c>.
            </remarks></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.DefaultAstNode.Length"><summary>
            Gets the character length of this AST node, if known.
            </summary><value>The character length of this AST node, if known.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.DefaultAstNode.Parent"><summary>
            Gets or sets the parent <see cref="T:ActiproSoftware.Text.Parsing.IAstNode" /> of this AST node, if known.
            </summary><value>The parent <see cref="T:ActiproSoftware.Text.Parsing.IAstNode" /> of this AST node, if known.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.DefaultAstNode.StartOffset"><summary>
            Gets or sets the start offset of this AST node, if known.
            </summary><value>The start offset of this AST node, if known.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.DefaultAstNode.Value"><summary>
            Gets or sets the string-based value for the AST node.
            </summary><value>The string-based value for the AST node.</value></member><member name="T:ActiproSoftware.Text.Parsing.Implementation.ParseError"><summary>
            Represents an object that indicates a message, warning or error related to parsing.
            </summary></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.ParseError.Equals(System.Object)"><summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary><param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param><returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns><exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.ParseError.GetHashCode"><summary>
            Serves as a hash function for a particular type.
            </summary><returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.ParseError.ToString"><summary>
            Returns a <c>String</c> that represents the current <c>Object</c>.
            </summary><returns>A <c>String</c> that represents the current <c>Object</c>.</returns></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.ParseError.#ctor"><summary>
            Initializes a new instance of the <c>ParseError</c> class.
            </summary></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.ParseError.#ctor(ActiproSoftware.Text.Parsing.ParseErrorLevel,System.String,ActiproSoftware.Text.TextPositionRange)"><summary>
            Initializes a new instance of the <c>ParseError</c> class.
            </summary><param name="level">A <see cref="T:ActiproSoftware.Text.Parsing.ParseErrorLevel" /> indicating the error level.</param><param name="description">The description of the error, which is displayed in the user interface.</param><param name="positionRange">The <see cref="T:ActiproSoftware.Text.TextPositionRange" /> of the error.</param></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.ParseError.ClassificationType"><summary>
            Gets or sets the optional <see cref="T:ActiproSoftware.Text.IClassificationType" /> associated with the error.
            </summary><value>The optional <see cref="T:ActiproSoftware.Text.IClassificationType" /> associated with the error.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.ParseError.Description"><summary>
            Gets or sets the description of the error, which is displayed in the user interface.
            </summary><value>The description of the error, which is displayed in the user interface.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.ParseError.Level"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.Text.Parsing.ParseErrorLevel" /> indicating the error level.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Parsing.ParseErrorLevel" /> indicating the error level.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.ParseError.PositionRange"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Text.TextPositionRange" /> of the error.
            </summary><value>The <see cref="T:ActiproSoftware.Text.TextPositionRange" /> of the error.</value><remarks>
            If no text position data is available for the error, the value should be <c>TextPositionRange.Empty</c>.
            </remarks></member><member name="T:ActiproSoftware.Text.Parsing.Implementation.ParserBase"><summary>
            Represents the base implementation of a parser (syntax/semantic analyzer) for a language.
            </summary></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.ParserBase.Parse(ActiproSoftware.Text.Parsing.IParseRequest)"><summary>
            Performs a parsing operation using the parameters specified in the supplied <see cref="T:ActiproSoftware.Text.Parsing.IParseRequest" />
            and returns the resulting parse data.
            </summary><param name="request">The <see cref="T:ActiproSoftware.Text.Parsing.IParseRequest" /> that contains data about the requested parsing operation.</param><returns>An <see cref="T:ActiproSoftware.Text.Parsing.IParseData" /> that is the result of the parsing operation.</returns><remarks>
            A <see cref="T:ActiproSoftware.Text.Parsing.IParseRequestDispatcher" /> typically calls this method when a queued parse request is ready to be processed.
            </remarks></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.ParserBase.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>ParserBase</c> class.
            </summary><param name="key">A string that identifies the parser.</param></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.ParserBase.Key"><summary>
            Gets or sets a string that identifies the parser, generally the related language name.
            </summary><value>A string that identifies the parser, generally the related language name.</value></member><member name="T:ActiproSoftware.Text.Parsing.Implementation.ParseRequest"><summary>
            Represents a request for a parsing operation.
            </summary></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.ParseRequest.GetParseHashKey(ActiproSoftware.Text.ICodeDocument)"><summary>
            Returns the <see cref="P:ActiproSoftware.Text.Parsing.Implementation.ParseRequest.ParseHashKey" /> to use for the specified <see cref="T:ActiproSoftware.Text.ICodeDocument" />.
            </summary><param name="document">The <see cref="T:ActiproSoftware.Text.ICodeDocument" /> to examine.</param><returns>The <see cref="P:ActiproSoftware.Text.Parsing.Implementation.ParseRequest.ParseHashKey" /> to use for the specified <see cref="T:ActiproSoftware.Text.ICodeDocument" />.</returns></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.ParseRequest.#ctor(System.String,ActiproSoftware.Text.ITextBufferReader,ActiproSoftware.Text.Parsing.IParser,ActiproSoftware.Text.Parsing.IParseTarget)"><summary>
            Initializes a new instance of the <c>ParseRequest</c> class. 
            </summary><param name="sourceKey">A text key, typically a filename, that uniquely identifies the text to parse.</param><param name="textBufferReader">The <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that contains the text to parse.</param><param name="parser">The <see cref="T:ActiproSoftware.Text.Parsing.IParser" /> that will perform the parsing operation.</param><param name="parseTarget">An <see cref="T:ActiproSoftware.Text.Parsing.IParseTarget" /> indicating the object that will receive the results of the parse.</param></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.ParseRequest.#ctor(System.String,ActiproSoftware.Text.ITextBufferReader,ActiproSoftware.Text.ISyntaxLanguage,ActiproSoftware.Text.Parsing.IParseTarget)"><summary>
            Initializes a new instance of the <c>ParseRequest</c> class. 
            </summary><param name="sourceKey">A text key, typically a filename, that uniquely identifies the text to parse.</param><param name="textBufferReader">The <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that contains the text to parse.</param><param name="language">The <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> for which this parse request was created.</param><param name="parseTarget">An <see cref="T:ActiproSoftware.Text.Parsing.IParseTarget" /> indicating the object that will receive the results of the parse.</param></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.ParseRequest.CreatedDateTime"><summary>
            Gets the <see cref="T:System.DateTime" /> at which the parse request was created.
            </summary><value>The <see cref="T:System.DateTime" /> at which the parse request was created.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.ParseRequest.Language"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> for which this parse request was created.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> for which this parse request was created.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.ParseRequest.ParseHashKey"><summary>
            Gets a hash key that uniquely identifies the parse request for a source/target combination.
            </summary><value>A hash key that uniquely identifies the parse request for a source/target combination.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.ParseRequest.Parser"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Parsing.IParser" /> that will perform the parsing operation.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Parsing.IParser" /> that will perform the parsing operation.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.ParseRequest.Priority"><summary>
            Gets or sets an integer value describing the priority of the request, where a higher number has a higher priority.
            </summary><value>
            An integer value describing the priority of the request, where a higher number has a higher priority.
            The default value is <c>ParseRequest.MediumPriority</c>.
            </value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.ParseRequest.RepeatedRequestPause"><summary>
            Gets or sets the number of milliseconds to pause if there are repeated attempts for this same request.
            </summary><value>The number of milliseconds to pause if there are repeated attempts for this same request.  The default value is <c>250</c>.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.ParseRequest.Snapshot"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Text.ITextSnapshot" />, if available, for which the parse request was created.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextSnapshot" />, if available, for which the parse request was created.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.ParseRequest.SourceKey"><summary>
            Gets a text key, typically a filename, that uniquely identifies the text to parse.
            </summary><value>A text key, typically a filename, that uniquely identifies the text to parse.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.ParseRequest.State"><summary>
            Gets or sets the current state of the request.
            </summary><value>The current state of the request.</value><remarks>
            This property should only be set by a <see cref="T:ActiproSoftware.Text.Parsing.IParseRequestDispatcher" />.
            </remarks></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.ParseRequest.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the control. The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.ParseRequest.Target"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Parsing.IParseTarget" /> that will be notified once the parsing operation is complete.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Parsing.IParseTarget" /> that will be notified once the parsing operation is complete.</value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.ParseRequest.TextBufferReader"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> used to read the text that should be parsed.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> used to read the text that should be parsed.</value></member><member name="F:ActiproSoftware.Text.Parsing.Implementation.ParseRequest.HighPriority"><summary>
            Specifies a high priority.
            </summary><value>The value is <c>300</c>.</value></member><member name="F:ActiproSoftware.Text.Parsing.Implementation.ParseRequest.MediumPriority"><summary>
            Specifies a medium priority.
            </summary><value>The value is <c>200</c>.</value></member><member name="F:ActiproSoftware.Text.Parsing.Implementation.ParseRequest.LowPriority"><summary>
            Specifies a low priority.
            </summary><value>The value is <c>100</c>.</value></member><member name="T:ActiproSoftware.Text.Parsing.Implementation.ThreadedParseRequestDispatcher"><summary>
            Implements an <see cref="T:ActiproSoftware.Text.Parsing.IParseRequestDispatcher" /> that uses a worker thread to process parse requests.
            </summary></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.ThreadedParseRequestDispatcher.Dispose(System.Boolean)"><summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary><param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources. 
            </param><remarks>
            This method is called by the public <c>Dispose</c> method and the <c>Finalize</c> method. 
            <c>Dispose</c> invokes this method with the <paramref name="disposing" /> parameter set to <c>true</c>. 
            <c>Finalize</c> invokes this method with <paramref name="disposing" /> set to <c>false</c>.
            </remarks></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.ThreadedParseRequestDispatcher.GetPendingRequests"><summary>
            Gets an array of the pending requests in the parse request queue.
            </summary><value>An array of the pending requests in the parse request queue.</value></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.ThreadedParseRequestDispatcher.HasPendingRequest(System.String)"><summary>
            Returns whether there is currently a pending request with the specified hash key.
            </summary><param name="parseHashKey">The parse hash key identifying the request for which to search.</param><returns><c>true</c> if there is currently a pending request with the specified hash key; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.ThreadedParseRequestDispatcher.QueueRequest(ActiproSoftware.Text.Parsing.IParseRequest)"><summary>
            Adds an <see cref="T:ActiproSoftware.Text.Parsing.IParseRequest" /> to the queue of pending requests.
            </summary><param name="request">The <see cref="T:ActiproSoftware.Text.Parsing.IParseRequest" /> that should be processed.</param></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.ThreadedParseRequestDispatcher.RemovePendingRequests(System.String)"><summary>
            Removes any pending requests in the parse request queue that have the specified hash key.
            </summary><param name="parseHashKey">The parse hash key for which to search.</param><returns>
            The number of pending requests that were removed.
            </returns></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.ThreadedParseRequestDispatcher.WaitForParse(System.String)"><summary>
            Waits a maximum of 250 milliseconds for the specified request to complete.
            </summary><param name="parseHashKey">The parse hash key identifying the request for which to wait.</param><returns><c>true</c> if a wait occurred; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.ThreadedParseRequestDispatcher.WaitForParse(System.String,System.Int32)"><summary>
            Waits for the specified request to complete, up to a maximum number of milliseconds.
            </summary><param name="parseHashKey">The parse hash key identifying the request for which to wait.</param><param name="maximumWaitTime">The maximum wait time in milliseconds.</param><returns><c>true</c> if a wait occurred; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.ThreadedParseRequestDispatcher.#ctor"><summary>
            Initializes a new instance of the <c>ThreadedParseRequestDispatcher</c> class.
            </summary></member><member name="M:ActiproSoftware.Text.Parsing.Implementation.ThreadedParseRequestDispatcher.#ctor(System.Int32)"><summary>
            Initializes a new instance of the <c>ThreadedParseRequestDispatcher</c> class.
            </summary><param name="maxThreadCount">The maximum number of worker threads to use.  Must be at least <c>1</c>, and should not generally exceed the number of processor cores in the machine.</param></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.ThreadedParseRequestDispatcher.IsBusy"><summary>
            Gets whether the multi-threaded parser service is currently busy processing a request.
            </summary><value><c>true</c> if the multi-threaded parser service is currently busy processing a request; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Parsing.Implementation.ThreadedParseRequestDispatcher.PendingRequestCount"><summary>
            Gets the number of pending requests remaining in the parse request queue.
            </summary><value>The number of pending requests remaining in the parse request queue.</value></member><member name="T:ActiproSoftware.Text.Lexing.ILexer"><summary>
            Provides the base requirements of a lexer (lexical analyzer) for a language.
            </summary><remarks>
            This interface type can be registered with an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> using the 
            <see cref="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService(System.Object,System.Object)" /> method.
            Once an object that implements this interface is registered with the language for this interface type, its features can be used by the language.
            </remarks></member><member name="M:ActiproSoftware.Text.Lexing.ILexer.Parse(ActiproSoftware.Text.TextSnapshotRange,ActiproSoftware.Text.Lexing.ILexerTarget)"><summary>
            Lexically parses the specified <see cref="T:ActiproSoftware.Text.TextRange" /> of the <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </summary><param name="snapshotRange">A <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> indicating the offset range to parse.</param><param name="parseTarget">The <see cref="T:ActiproSoftware.Text.Lexing.ILexerTarget" /> that receives the parsing output.</param><returns>A <see cref="T:ActiproSoftware.Text.TextRange" /> containing the offset range that was modified.</returns></member><member name="P:ActiproSoftware.Text.Lexing.ILexer.TokenIdProvider"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ITokenIdProvider" /> that provides access to all the token IDs and keys used by this lexer.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ITokenIdProvider" /> that provides access to all the token IDs and keys used by this lexer.</value></member><member name="T:ActiproSoftware.Text.Lexing.ILexerContext"><summary>
            Provides the base requirements for a class that stores lexer context data, allowing
            a lexer to resume at the point represented by the context.
            </summary></member><member name="P:ActiproSoftware.Text.Lexing.ILexerContext.ScopeState"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScopeStateNode" /> that represents the stack of lexical scopes and states in place at where the context is resuming.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScopeStateNode" /> that represents the stack of lexical scopes and states in place at where the context is resuming.</value></member><member name="T:ActiproSoftware.Text.Lexing.ILexerTarget"><summary>
            Provides the base requirements for an object that should receive parse output from a lexer.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.ILexerTarget.OnPostParse(System.Int32)"><summary>
            Occurs after lexing ends.
            </summary><param name="endOffset">The offset at which parsing has stopped.</param></member><member name="M:ActiproSoftware.Text.Lexing.ILexerTarget.OnPreParse(System.Int32@)"><summary>
            Occurs before lexing starts.
            </summary><param name="startOffset">The offset at which parsing will commence.</param><returns>A <see cref="T:ActiproSoftware.Text.Lexing.ILexerContext" /> that contains information about the starting context.</returns></member><member name="M:ActiproSoftware.Text.Lexing.ILexerTarget.OnTokenParsed(ActiproSoftware.Text.Lexing.IToken,ActiproSoftware.Text.Lexing.ILexicalScopeStateNode)"><summary>
            Occurs when an <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> is parsed by the lexer.
            </summary><param name="newToken">The <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> that was parsed.</param><param name="scopeStateNode">The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScopeStateNode" /> at the start of the token.</param><returns><c>true</c> if the lexing should continue; otherwise, <c>false</c>.
            </returns></member><member name="P:ActiproSoftware.Text.Lexing.ILexerTarget.HasInitialContext"><summary>
            Gets whether an initial context is available, from which incremental parsing can resume.
            </summary><value><c>true</c> if an initial context is available; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.Text.Lexing.ILexicalScope"><summary>
            Provides the base requirements for a lexical scope.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.ILexicalScope.IsScopeEnd(ActiproSoftware.Text.ITextBufferReader)"><summary>
            Performs a lex to determine if the current text in the <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> ends the lexical scope.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that is reading a text source.</param><returns>A <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> indicating the lexer result.</returns></member><member name="M:ActiproSoftware.Text.Lexing.ILexicalScope.IsScopeStart(ActiproSoftware.Text.ITextBufferReader)"><summary>
            Performs a lex to determine if the current text in the <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> starts the lexical scope.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that is reading a text source.</param><returns>A <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> indicating the lexer result.</returns></member><member name="P:ActiproSoftware.Text.Lexing.ILexicalScope.IsAncestorEndScopeCheckEnabled"><summary>
            Gets whether ancestor end scope checking is enabled while parsing inside the scope.
            </summary><value><c>true</c> if ancestor end scope checking is enabled; otherwise, <c>false</c>.
            </value><remarks>
            When enabled, this allows ancestor scopes to be examined to see a pattern matches their end scope.
            In the event a match is found, this scope exits as well as the ancestor's scope.
            </remarks></member><member name="P:ActiproSoftware.Text.Lexing.ILexicalScope.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that defines the lexical scope.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that defines the lexical scope.</value></member><member name="P:ActiproSoftware.Text.Lexing.ILexicalScope.ParentTransition"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateTransition" /> that is the parent of this scope.
            </summary><value>
            The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateTransition" /> that is the parent of this scope.  
            </value></member><member name="P:ActiproSoftware.Text.Lexing.ILexicalScope.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the object.  The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.Text.Lexing.ILexicalScope.Transition"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateTransition" /> that this scope performs after ending.
            </summary><value>
            The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateTransition" /> that this scope performs after ending.  
            If the value is <see langword="null" />, then no state transition is performed when the scope ends.
            </value><remarks>The state transition may be made to a child language.</remarks></member><member name="T:ActiproSoftware.Text.Lexing.ILexicalScopeCollection"><summary>
            Provides the base requirements for a collection of <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" /> objects.
            </summary><seealso cref="T:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeCollection" /></member><member name="T:ActiproSoftware.Text.Lexing.ILexicalScopeStateNode"><summary>
            Provides the base requirements for a node that stores lexical scope and state information.
            </summary></member><member name="P:ActiproSoftware.Text.Lexing.ILexicalScopeStateNode.LexicalScope"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" /> represented by this node.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" /> represented by this node.</value></member><member name="P:ActiproSoftware.Text.Lexing.ILexicalScopeStateNode.LexicalState"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> represented by this node.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> represented by this node.</value></member><member name="P:ActiproSoftware.Text.Lexing.ILexicalScopeStateNode.Parent"><summary>
            Gets or sets the parent <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScopeStateNode" />.
            </summary><value>The parent <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScopeStateNode" />.</value></member><member name="T:ActiproSoftware.Text.Lexing.ILexicalState"><summary>
            Provides the base requirements for a lexical state.
            </summary></member><member name="P:ActiproSoftware.Text.Lexing.ILexicalState.ChildLexicalStates"><summary>
            Gets the collection of child lexical states.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateCollection" /> containing the child lexical states.</value></member><member name="P:ActiproSoftware.Text.Lexing.ILexicalState.DefaultTokenId"><summary>
            Gets or sets the ID of the default token that this state assigns.
            </summary><value>The ID of the default token that this state assigns.</value></member><member name="P:ActiproSoftware.Text.Lexing.ILexicalState.Id"><summary>
            Gets the ID value that identifies the lexical state.
            </summary><value>The ID value that identifies the lexical state.</value></member><member name="P:ActiproSoftware.Text.Lexing.ILexicalState.Lexer"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexer" /> that contains the state.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexer" /> that contains the state.</value></member><member name="P:ActiproSoftware.Text.Lexing.ILexicalState.LexicalScopes"><summary>
            Gets the collection of lexical scopes.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScopeCollection" /> containing the lexical scopes.</value></member><member name="P:ActiproSoftware.Text.Lexing.ILexicalState.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the object.  The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.Text.Lexing.ILexicalState.Transition"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateTransition" /> that is performed immediately after a start scope match.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateTransition" /> that is performed immediately after a start scope match.</value><remarks>
            This provides a mechanism to automatically transition to another language when this state's start scope is matched.
            This state's end scope may be used to exit the child language.
            <para>
            ASP-style tags are an example of when to use this transition.
            </para></remarks></member><member name="T:ActiproSoftware.Text.Lexing.ILexicalStateCollection"><summary>
            Provides the base requirements for a collection of <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> objects.
            </summary><seealso cref="T:ActiproSoftware.Text.Lexing.Implementation.LexicalStateCollection" /></member><member name="T:ActiproSoftware.Text.Lexing.ILexicalStateIdProvider"><summary>
            Provides the base requirements for a class that provides lexical state ID's.
            </summary></member><member name="T:ActiproSoftware.Text.Lexing.ILexicalStateTransition"><summary>
            Provides the base requirements for a transition from one lexical state to another.
            </summary><seealso cref="T:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTransition" /></member><member name="P:ActiproSoftware.Text.Lexing.ILexicalStateTransition.ChildLanguage"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> that contains the <see cref="P:ActiproSoftware.Text.Lexing.ILexicalStateTransition.ChildLexicalState" />.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> that contains the <see cref="P:ActiproSoftware.Text.Lexing.ILexicalStateTransition.ChildLexicalState" />.</value></member><member name="P:ActiproSoftware.Text.Lexing.ILexicalStateTransition.ChildLexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" /> that is used in the <see cref="P:ActiproSoftware.Text.Lexing.ILexicalStateTransition.ChildLexicalState" /> to end the transition and pop back up to the parent lexical state.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" /> that is used in the <see cref="P:ActiproSoftware.Text.Lexing.ILexicalStateTransition.ChildLexicalState" /> to end the transition and pop back up to the parent lexical state.</value></member><member name="P:ActiproSoftware.Text.Lexing.ILexicalStateTransition.ChildLexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> into which a transition is made.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> into which a transition is made.</value></member><member name="P:ActiproSoftware.Text.Lexing.ILexicalStateTransition.ParentLexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" /> that owns this state transition.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" /> that owns this state transition.</value></member><member name="T:ActiproSoftware.Text.Lexing.IMergableLexer"><summary>
            Provides the base requirements for a lexer (lexical analyzer) for a language that supports merging with other languages.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.IMergableLexer.CreateChangeBatch"><summary>
            Creates an <see cref="T:System.IDisposable" /> object such that while the object is not disposed, the
            lexer can be modified without any change events being fired, thereby allowing batch updates to occur.
            </summary><returns>An <see cref="T:System.IDisposable" /> object.  Once disposed, the batch is ended.</returns></member><member name="M:ActiproSoftware.Text.Lexing.IMergableLexer.CreateDocumentEndToken(System.Int32,ActiproSoftware.Text.TextPosition,ActiproSoftware.Text.Lexing.ILexicalState)"><summary>
            Creates an <see cref="T:ActiproSoftware.Text.Lexing.IMergableToken" /> that represents the end of a document.
            </summary><param name="startOffset">The start offset of the <see cref="T:ActiproSoftware.Text.Lexing.IToken" />.</param><param name="startPosition">The start <see cref="T:ActiproSoftware.Text.TextPosition" /> of the <see cref="T:ActiproSoftware.Text.Lexing.IToken" />.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that contains the token.</param><returns>An <see cref="T:ActiproSoftware.Text.Lexing.IMergableToken" /> that represents the end of a document.</returns></member><member name="M:ActiproSoftware.Text.Lexing.IMergableLexer.CreateToken(System.Int32,System.Int32,ActiproSoftware.Text.TextPosition,ActiproSoftware.Text.TextPosition,ActiproSoftware.Text.Lexing.MergableLexerFlags,ActiproSoftware.Text.Lexing.ILexicalState,ActiproSoftware.Text.Lexing.IMergableTokenLexerData)"><summary>
            Creates an <see cref="T:ActiproSoftware.Text.Lexing.IMergableToken" /> that represents the range of text with the specified lexer data.
            </summary><param name="startOffset">The start offset of the token.</param><param name="length">The length of the token.</param><param name="startPosition">The <see cref="T:ActiproSoftware.Text.TextPosition" /> of the first character in the token.</param><param name="endPosition">The <see cref="T:ActiproSoftware.Text.TextPosition" /> after the last character in the token.</param><param name="lexerFlags">The <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerFlags" /> for the token.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that contains the token.</param><param name="lexerData">The <see cref="T:ActiproSoftware.Text.Lexing.IMergableTokenLexerData" /> that contains lexer information about the token.</param><returns>An <see cref="T:ActiproSoftware.Text.Lexing.IMergableToken" /> that represents the range of text with the specified lexer data.</returns></member><member name="M:ActiproSoftware.Text.Lexing.IMergableLexer.GetAllLexicalStateTransitions"><summary>
            Returns a collection containing all <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateTransition" /> objects within the lexer.
            </summary><returns>A collection containing all <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateTransition" /> objects within the lexer.</returns><remarks>
            This method allows consumers to see which language transitions can be made within the lexer.
            </remarks></member><member name="M:ActiproSoftware.Text.Lexing.IMergableLexer.GetDefaultToken(ActiproSoftware.Text.ITextBufferReader,ActiproSoftware.Text.Lexing.ILexicalState)"><summary>
            Returns a single-character <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> representing the lexer result for the
            default token in the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> and seeks forward one position in the <see cref="T:ActiproSoftware.Text.ITextBufferReader" /></summary><param name="reader">An <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that specifies the current state.</param><returns>A <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> indicating the lexer result.</returns></member><member name="M:ActiproSoftware.Text.Lexing.IMergableLexer.GetNextToken(ActiproSoftware.Text.ITextBufferReader,ActiproSoftware.Text.Lexing.ILexicalState)"><summary>
            Performs a lex to return the next <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> 
            from a <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> and seeks past it if there is a match.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that specifies the current state.</param><returns>A <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> indicating the lexer result.</returns></member><member name="P:ActiproSoftware.Text.Lexing.IMergableLexer.DefaultLexicalState"><summary>
            Gets or sets the root <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> for when the language is entered.
            </summary><value>The root <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> for when the language is entered.</value></member><member name="P:ActiproSoftware.Text.Lexing.IMergableLexer.LexicalStateIdProvider"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateIdProvider" /> that provides access to all the lexical state IDs and keys used by this lexer.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateIdProvider" /> that provides access to all the lexical state IDs and keys used by this lexer.</value></member><member name="E:ActiproSoftware.Text.Lexing.IMergableLexer.Changed"><summary>
            Occurs after the lexer is changed via a block of code surrounded by <see cref="M:ActiproSoftware.Text.Lexing.IMergableLexer.CreateChangeBatch" />. 
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.Text.Lexing.IMergableToken"><summary>
            Represents the base requirements for a mergable token that has been assigned to a span of text by a mergable lexer.
            </summary><seealso cref="T:ActiproSoftware.Text.Lexing.Implementation.MergableToken" /></member><member name="M:ActiproSoftware.Text.Lexing.IMergableToken.HasFlag(ActiproSoftware.Text.Lexing.MergableLexerFlags)"><summary>
            Returns whether the parse data has the specified <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerFlags" /> flag.
            </summary><param name="flag">The <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerFlags" /> to check for.</param><returns><c>true</c> if the parse data has the specified <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerFlags" /> flag; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Lexing.IMergableToken.SetFlag(ActiproSoftware.Text.Lexing.MergableLexerFlags,System.Boolean)"><summary>
            Sets or clears the specified <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerFlags" /> flag.
            </summary><param name="flag">The <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerFlags" /> to set or clear.</param><param name="setBit">Whether to set the flag; otherwise, the flag is cleared.</param><remarks>This method should only be called by lexers.</remarks></member><member name="P:ActiproSoftware.Text.Lexing.IMergableToken.AutoCaseCorrectText"><summary>
            Gets the text that should be used for this <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> when performing an auto case correction operation on it.
            </summary><value>The text that should be used for this <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> when performing an auto case correction operation on it.</value><remarks>
            Return a <see langword="null" /> value to indicate that there is no auto case correction text available.
            </remarks></member><member name="P:ActiproSoftware.Text.Lexing.IMergableToken.ClassificationType"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> assigned to the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.IClassificationType" /> assigned to the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.IMergableToken.DeclaringLexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that declares the pattern that matched the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that declares the pattern that matched the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.IMergableToken.Lexer"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.IMergableLexer" /> that created the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.IMergableLexer" /> that created the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.IMergableToken.LexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" />, if any, that defines the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" />, if any, that defines the token.</value><remarks>
            If this value is <see langword="null" />, the token was not defined by a lexical scope.
            </remarks></member><member name="P:ActiproSoftware.Text.Lexing.IMergableToken.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that contains the token.</value></member><member name="T:ActiproSoftware.Text.Lexing.IMergableTokenLexerData"><summary>
            Provides the base requirements for an object that provides lexer data for a <see cref="T:ActiproSoftware.Text.Lexing.IMergableToken" />.
            </summary><seealso cref="T:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTokenData" /><seealso cref="T:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeTokenData" /></member><member name="P:ActiproSoftware.Text.Lexing.IMergableTokenLexerData.ClassificationType"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> assigned to the token.
            </summary><value>The key of the <see cref="T:ActiproSoftware.Text.IClassificationType" /> assigned to the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.IMergableTokenLexerData.Lexer"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.IMergableLexer" /> that created the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.IMergableLexer" /> that created the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.IMergableTokenLexerData.LexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" />, if any, that defines the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" />, if any, that defines the token.</value><remarks>
            If this value is <see langword="null" />, the token was not defined by a lexical scope.
            </remarks></member><member name="P:ActiproSoftware.Text.Lexing.IMergableTokenLexerData.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that contains the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.IMergableTokenLexerData.TokenId"><summary>
            Gets the token ID assigned to the token.
            </summary><value>The token ID assigned to the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.IMergableTokenLexerData.TokenKey"><summary>
            Gets the token key assigned to the token, if it is known.
            </summary><value>The token key assigned to the token, if it is known.</value></member><member name="T:ActiproSoftware.Text.Lexing.IToken"><summary>
            Represents the base requirements for a token that has been assigned to a span of text by a lexer.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.IToken.Contains(System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> contains the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> contains the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the offset falls on the <see cref="P:ActiproSoftware.Text.Lexing.IToken.EndOffset" /> offset
            since this method indicates if the offset is encompassed by the <see cref="T:ActiproSoftware.Text.Lexing.IToken" />.
            </remarks></member><member name="M:ActiproSoftware.Text.Lexing.IToken.Contains(ActiproSoftware.Text.TextPosition)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> contains the specified <see cref="T:ActiproSoftware.Text.TextPosition" />.
            </summary><param name="position">The <see cref="T:ActiproSoftware.Text.TextPosition" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> contains the specified <see cref="T:ActiproSoftware.Text.TextPosition" />; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the position falls on the <see cref="P:ActiproSoftware.Text.Lexing.IToken.EndPosition" /> position
            since this method indicates if the position is encompassed by the <see cref="T:ActiproSoftware.Text.Lexing.IToken" />.
            </remarks></member><member name="P:ActiproSoftware.Text.Lexing.IToken.EndOffset"><summary>
            Gets the offset after the last character in the token.
            </summary><value>The offset after the last character in the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.IToken.EndPosition"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.TextPosition" /> after the last character in the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.TextPosition" /> after the last character in the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.IToken.Id"><summary>
            Gets the ID assigned to the token.
            </summary><value>The ID assigned to the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.IToken.Key"><summary>
            Gets the key assigned to the token.
            </summary><value>The key assigned to the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.IToken.Length"><summary>
            Gets or sets the absolute length of the token.
            </summary><value>The absolute length of the token.</value><remarks>
            The setter for this property is for internal use only.  Altering its value will corrupt the <see cref="T:ActiproSoftware.Text.ITextDocument" /><see cref="T:ActiproSoftware.Text.Lexing.IToken" /> collection.
            </remarks></member><member name="P:ActiproSoftware.Text.Lexing.IToken.LexicalStateId"><summary>
            Gets the ID assigned to the lexical state that contains the token.
            </summary><value>The ID assigned to the lexical state that contains the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.IToken.PositionRange"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.TextPositionRange" /> that specifies the text position range of the token.
            </summary><value>A <see cref="T:ActiproSoftware.Text.TextPositionRange" /> that specifies the text position range of the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.IToken.StartOffset"><summary>
            Gets or sets the offset of the first character in the token.
            </summary><value>The offset of the first character in the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.IToken.StartPosition"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.TextPosition" /> of the first character in the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.TextPosition" /> of the first character in the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.IToken.TextRange"><summary>
            Gets a <see cref="P:ActiproSoftware.Text.Lexing.IToken.TextRange" /> that specifies the text range of the token.
            </summary><value>A <see cref="P:ActiproSoftware.Text.Lexing.IToken.TextRange" /> that specifies the text range of the token.</value></member><member name="T:ActiproSoftware.Text.Lexing.ITokenIdProvider"><summary>
            Provides the base requirements for a class that provides token ID's.
            </summary></member><member name="T:ActiproSoftware.Text.Lexing.ITokenSet"><summary>
            Provides the base requirements for a class that stores token data for a range of text.
            </summary><seealso cref="T:ActiproSoftware.Text.Lexing.Implementation.TokenSet" /></member><member name="M:ActiproSoftware.Text.Lexing.ITokenSet.IndexOf(System.Int32,System.Int32)"><summary>
            Returns the index of the <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> in the set that contains the specified offset, if any.
            </summary><param name="offset">The offset for which to search.</param><param name="hintIndex">The hint index at which to begin searching; otherwise, <c>-1</c>.</param><returns>The index of the <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> in the set that contains the specified offset; otherwise, <c>-1</c>.</returns></member><member name="P:ActiproSoftware.Text.Lexing.ITokenSet.Count"><summary>
            Gets the count of tokens that are stored in the token set.
            </summary><value>The count of tokens that are stored in the token set.</value></member><member name="P:ActiproSoftware.Text.Lexing.ITokenSet.FirstToken"><summary>
            Gets the first <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> in the set.
            </summary><value>The first <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> in the set.</value></member><member name="P:ActiproSoftware.Text.Lexing.ITokenSet.FirstTokenExtendsBack"><summary>
            Gets whether the <see cref="P:ActiproSoftware.Text.Lexing.ITokenSet.FirstToken" /> extends back to another token set.
            </summary><value><c>true</c> if the <see cref="P:ActiproSoftware.Text.Lexing.ITokenSet.FirstToken" /> extends back to another token set; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Lexing.ITokenSet.LastToken"><summary>
            Gets the last <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> in the set.
            </summary><value>The last <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> in the set.</value></member><member name="P:ActiproSoftware.Text.Lexing.ITokenSet.LastTokenExtendsForward"><summary>
            Gets whether the <see cref="P:ActiproSoftware.Text.Lexing.ITokenSet.LastToken" /> extends forward to another token set.
            </summary><value><c>true</c> if the <see cref="P:ActiproSoftware.Text.Lexing.ITokenSet.LastToken" /> extends forward to another token set; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Lexing.ITokenSet.ParseContext"><summary>
            Gets an optional object that may be used to help provide context information when resuming incremental parsing near the end of this token set.
            </summary><value>An optional object that may be used to help provide context information when resuming incremental parsing near the end of this token set.</value></member><member name="P:ActiproSoftware.Text.Lexing.ITokenSet.Tokens(System.Int32)"><summary>
            Gets an <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> in the token set.
            </summary><param name="index">The index of the <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> to return.</param><value>
            An <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> in the token set.
            </value></member><member name="T:ActiproSoftware.Text.Lexing.MergableLexerFlags"><summary>
            Specifies flags for an <see cref="T:ActiproSoftware.Text.Lexing.IMergableToken" />.
            </summary></member><member name="F:ActiproSoftware.Text.Lexing.MergableLexerFlags.None"><summary>
            There are no flags set.
            </summary></member><member name="F:ActiproSoftware.Text.Lexing.MergableLexerFlags.LooseMatch"><summary>
            A loose match was made.  This occurs when using a case insensitivity of <c>AutoCorrect</c> and a non-exact match was found.
            </summary></member><member name="F:ActiproSoftware.Text.Lexing.MergableLexerFlags.ScopeStart"><summary>
            The token starts a scope.
            </summary></member><member name="F:ActiproSoftware.Text.Lexing.MergableLexerFlags.ScopeEnd"><summary>
            The token ends a scope.
            </summary></member><member name="F:ActiproSoftware.Text.Lexing.MergableLexerFlags.DirectStateTransition"><summary>
            The token starts a scope which performs a direct lexical state transition.
            </summary></member><member name="F:ActiproSoftware.Text.Lexing.MergableLexerFlags.ScopeStateTransitionStart"><summary>
            The token ends a scope but performs a scope lexical state transition.
            </summary></member><member name="F:ActiproSoftware.Text.Lexing.MergableLexerFlags.ScopeStateTransitionEnd"><summary>
            The token ends a scope for a scope lexical state transition.
            </summary></member><member name="F:ActiproSoftware.Text.Lexing.MergableLexerFlags.LanguageStart"><summary>
            The token marks the start of a child language.
            </summary></member><member name="F:ActiproSoftware.Text.Lexing.MergableLexerFlags.LanguageEnd"><summary>
            The token marks the end of a child language.
            </summary></member><member name="T:ActiproSoftware.Text.Lexing.MergableLexerResult"><summary>
            Provides a lexer result for a token.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.MergableLexerResult.#ctor(ActiproSoftware.Text.RegularExpressions.MatchType,ActiproSoftware.Text.Lexing.IMergableTokenLexerData)"><summary>
            Initializes a new instance of the <c>MergableLexerResult</c> class. 
            </summary><param name="matchType">A <see cref="P:ActiproSoftware.Text.Lexing.MergableLexerResult.MatchType" /> indicating the type of match that was made.</param><param name="lexerData">The <see cref="T:ActiproSoftware.Text.Lexing.IMergableTokenLexerData" /> to use for this token.</param></member><member name="P:ActiproSoftware.Text.Lexing.MergableLexerResult.LexerData"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.IMergableTokenLexerData" /> to use for this token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.IMergableTokenLexerData" /> to use for this token.</value></member><member name="P:ActiproSoftware.Text.Lexing.MergableLexerResult.MatchType"><summary>
            Gets a <see cref="P:ActiproSoftware.Text.Lexing.MergableLexerResult.MatchType" /> indicating the type of match that was made.
            </summary><value>A <see cref="P:ActiproSoftware.Text.Lexing.MergableLexerResult.MatchType" /> indicating the type of match that was made.</value></member><member name="F:ActiproSoftware.Text.Lexing.MergableLexerResult.NoMatch"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> that can be used to indicate there was no match.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> that can be used to indicate there was no match.</value></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexer"><summary>
            Represents a dynamic lexer (lexical analyzer), one that is pattern-based.
            </summary><remarks>
            Instances of this object can be registered with an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> using the 
            <see cref="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService(System.Object,System.Object)" /> method.
            Once an instance is registered with the language for the <see cref="T:ActiproSoftware.Text.Lexing.ILexer" /> interface type, its features can be used by the language.
            </remarks></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.DynamicLexer.GetAllLexicalStateTransitions"><summary>
            Returns a collection containing all <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateTransition" /> objects within the lexer.
            </summary><returns>A collection containing all <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateTransition" /> objects within the lexer.</returns><remarks>
            This method allows consumers to see which language transitions can be made within the lexer.
            </remarks></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.DynamicLexer.GetDefaultToken(ActiproSoftware.Text.ITextBufferReader,ActiproSoftware.Text.Lexing.ILexicalState)"><summary>
            Returns a single-character <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> representing the lexer result for the
            default token in the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> and seeks forward one position in the <see cref="T:ActiproSoftware.Text.ITextBufferReader" /></summary><param name="reader">An <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that specifies the current state.</param><returns>A <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> indicating the lexer result.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.DynamicLexer.GetNextToken(ActiproSoftware.Text.ITextBufferReader,ActiproSoftware.Text.Lexing.ILexicalState)"><summary>
            Performs a lex to return the next <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> 
            from a <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> and seeks past it if there is a match.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that specifies the current state.</param><returns>A <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> indicating the lexer result.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.DynamicLexer.OnChanged(System.EventArgs)"><summary>
            Raises the <c>Changed</c> event.
            </summary><param name="e">The <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.DynamicLexer.#ctor"><summary>
            Initializes a new instance of the <c>DynamicLexer</c> class.
            </summary></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexer.DefaultLexicalState"><summary>
            Gets or sets the root <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> for when the language is entered.
            </summary><value>The root <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> for when the language is entered.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexer.Key"><summary>
            Gets or sets a string that identifies the lexer, generally the related language name.
            </summary><value>A string that identifies the lexer, generally the related language name.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexer.LexicalMacros"><summary>
            Gets the collection of lexical macros.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Lexing.Implementation.IDynamicLexicalMacroCollection" /> containing the lexical macros.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexer.LexicalStateIdProvider"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateIdProvider" /> that provides access to all the lexical state IDs and keys used by this lexer.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateIdProvider" /> that provides access to all the lexical state IDs and keys used by this lexer.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexer.LexicalStates"><summary>
            Gets the collection of lexical states.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Lexing.Implementation.IDynamicLexicalStateCollection" /> containing the lexical states.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexer.TokenIdProvider"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Text.Lexing.ITokenIdProvider" /> that provides access to all the token IDs and keys used by this lexer.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ITokenIdProvider" /> that provides access to all the token IDs and keys used by this lexer.</value></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalMacro"><summary>
            Defines a macro, which is a named regular expression.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalMacro.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalMacro.#ctor(System.String,System.String)"><summary>
            Initializes a new instance of the <c>LexicalMacro</c> class.
            </summary><param name="key">The key of the macro.</param><param name="pattern">The text regular expression source.</param></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalMacro.Key"><summary>
            Gets a string-based key that identifies the object.
            </summary><value>A string-based key that identifies the object.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalMacro.Pattern"><summary>
            Gets the text regular expression source.
            </summary><value>The text regular expression source.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalMacro.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the object.  The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPattern"><summary>
            Represents a lexical pattern.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPattern.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPattern.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>DynamicLexicalPattern</c> class.
            </summary><param name="pattern">The text regular expression source.</param></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPattern.LexicalPatternGroup"><summary>
            Gets the parent <see cref="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup" />.
            </summary><value>The parent <see cref="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup" />.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPattern.Pattern"><summary>
            Gets or sets the text regular expression source.
            </summary><value>The text regular expression source.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPattern.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the object.  The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup"><summary>
            Encapsulates a collection of <see cref="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPattern" /> objects.
            </summary><seealso cref="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPattern" /></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup.#ctor(ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternType,System.String,ActiproSoftware.Text.IClassificationType)"><summary>
            Initializes a new instance of the <c>DynamicLexicalPatternGroup</c> class. 
            </summary><param name="patternType">A <see cref="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternType" /> indicating the type of pattern.</param><param name="tokenKey">The key of the token that this pattern group assigns.</param><param name="classificationType">The <see cref="T:ActiproSoftware.Text.IClassificationType" /> that this pattern group uses.</param></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup.CaseSensitivity"><summary>
            Gets or sets a nullable <see cref="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup.CaseSensitivity" /> determining how the lexer should handle case sensitivity
            for patterns in the pattern group.
            </summary><value>
            A nullable <see cref="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup.CaseSensitivity" /> determining how the lexer should handle case sensitivity
            for patterns in the pattern group.
            </value><remarks>
            A <see langword="null" /> value indicates that the setting should be inherited from the parent <see cref="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup.LexicalState" /></remarks></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup.ClassificationType"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> to use for tokens within the pattern group.
            </summary><value>The <see cref="T:ActiproSoftware.Text.IClassificationType" /> to use for tokens within the pattern group.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup.IsCaseSensitive"><summary>
            Gets whether the explicit patterns in the pattern group are case sensitive.
            </summary><value><c>true</c> if the explicit patterns in the pattern group are case sensitive; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup.Key"><summary>
            Gets or sets a string-based key that identifies the object.
            </summary><value>A string-based key that identifies the object.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup.LexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalScope" />, if any, that defines the pattern group.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalScope" />, if any, that defines the pattern group.</value><remarks>
            If this value is <see langword="null" />, the pattern group was not defined by a lexical scope.
            </remarks></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalState" /> that defines the pattern group.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalState" /> that defines the pattern group.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup.LookAheadPattern"><summary>
            Gets or sets the text regular expression source for the look-ahead.
            </summary><value>The text regular expression source for the look-ahead.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup.LookBehindPattern"><summary>
            Gets or sets the text regular expression source for the look-behind.
            </summary><value>The text regular expression source for the look-behind.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup.Patterns"><summary>
            Gets the collection of lexical patterns.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Lexing.Implementation.IDynamicLexicalPatternCollection" /> containing the lexical patterns.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup.PatternType"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternType" /> indicating the type of pattern.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternType" /> indicating the type of pattern.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the object.  The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup.TokenId"><summary>
            Gets or sets a numeric ID that identifies the token that this pattern group assigns.
            </summary><value>A numeric ID that identifies the token that this pattern group assigns.</value><remarks>
            This property is similar to the <see cref="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup.TokenKey" /> property although <see cref="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup.TokenKey" /> is a string,
            while <c>TokenID</c> is a number which can be cast to an enumeration.
            </remarks></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup.TokenKey"><summary>
            Gets the key of the token that this pattern group assigns.
            </summary><value>The key of the token that this pattern group assigns.</value></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternType"><summary>
            Specifies the type of lexical pattern.
            </summary></member><member name="F:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternType.Explicit"><summary>
            An explicit pattern in which all pattern characters have no regex meaning.
            </summary></member><member name="F:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternType.Regex"><summary>
            A pattern in which regex characters have special meaning and can control regular expression parsing.
            </summary></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalScope"><summary>
            Contains information about a lexical scope.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalScope.IsScopeEnd(ActiproSoftware.Text.ITextBufferReader)"><summary>
            Performs a lex to determine if the current text in the <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> ends the lexical scope.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that is reading a text source.</param><returns>A <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> indicating the lexer result.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalScope.IsScopeStart(ActiproSoftware.Text.ITextBufferReader)"><summary>
            Performs a lex to determine if the current text in the <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> starts the lexical scope.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that is reading a text source.</param><returns>A <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> indicating the lexer result.</returns></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalScope.EndLexicalPatternGroup"><summary>
            Gets or sets the lexical pattern group that ends the scope.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup" /> that ends the scope.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalScope.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalState" /> that defines the lexical scope.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalState" /> that defines the lexical scope.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalScope.StartLexicalPatternGroup"><summary>
            Gets or sets the lexical pattern group that starts the scope.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup" /> that starts the scope.</value></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalState"><summary>
            Contains information about a lexical state.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalState.CreateChildLexicalStates"><summary>
            Creates the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateCollection" /> collection that is returned by <see cref="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateBase.ChildLexicalStatesCore" />.
            </summary><returns>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateCollection" /> that was created.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalState.CreateLexicalScopes"><summary>
            Creates the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScopeCollection" /> collection that is returned by <see cref="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateBase.LexicalScopesCore" />.
            </summary><returns>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScopeCollection" /> that was created.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalState.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>DynamicLexicalState</c> class.
            </summary><param name="key">The key of the lexical state.</param></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalState.#ctor(System.Int32,System.String)"><summary>
            Initializes a new instance of the <c>DynamicLexicalState</c> class.
            </summary><param name="id">The ID of the lexical state.</param><param name="key">The key of the lexical state.</param></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalState.ChildLexicalStates"><summary>
            Gets the collection of child lexical states.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Lexing.Implementation.IDynamicLexicalStateCollection" /> containing the child lexical states.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalState.DefaultCaseSensitivity"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.Text.CaseSensitivity" /> determining how the lexer should handle case sensitivity
            for patterns in the state's pattern groups.
            </summary><value>
            A <see cref="T:ActiproSoftware.Text.CaseSensitivity" /> determining how the lexer should handle case sensitivity
            for patterns in the state's pattern groups.
            The default value is <c>CaseSensitivity.Insensitive</c>.
            </value><remarks>
            This property provides the default value for lexical pattern groups within the state without an explicit 
            case sensitivity option set.
            </remarks></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalState.DefaultClassificationType"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> of the default token that this state assigns.
            </summary><value>The <see cref="T:ActiproSoftware.Text.IClassificationType" /> of the default token that this state assigns.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalState.Lexer"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.Implementation.IDynamicLexer" /> that contains the state.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.Implementation.IDynamicLexer" /> that contains the state.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalState.LexicalPatternGroups"><summary>
            Gets the collection of lexical pattern groups.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Lexing.Implementation.IDynamicLexicalPatternGroupCollection" /> containing the lexical pattern groups.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalState.LexicalScopes"><summary>
            Gets the collection of lexical scopes.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Lexing.Implementation.IDynamicLexicalScopeCollection" /> containing the lexical scopes.</value></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.IDynamicLexer"><summary>
            Provides the base requirements for a dynamic lexer, one that is pattern based.
            </summary><seealso cref="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexer" /></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.IDynamicLexer.DefaultLexicalState"><summary>
            Gets or sets the root <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> for when the language is entered.
            </summary><value>The root <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> for when the language is entered.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.IDynamicLexer.Key"><summary>
            Gets or sets a string that identifies the lexer, generally the related language name.
            </summary><value>A string that identifies the lexer, generally the related language name.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.IDynamicLexer.LexicalMacros"><summary>
            Gets the collection of lexical macros.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Lexing.Implementation.IDynamicLexicalMacroCollection" /> containing the lexical macros.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.IDynamicLexer.LexicalStates"><summary>
            Gets the collection of lexical states.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Lexing.Implementation.IDynamicLexicalStateCollection" /> containing the lexical states.</value></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.IDynamicLexicalMacroCollection"><summary>
            Provides the base requirements for a collection of <see cref="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalMacro" /> objects.
            </summary></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.IDynamicLexicalPatternCollection"><summary>
            Provides the base requirements for a collection of <see cref="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPattern" /> objects.
            </summary></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.IDynamicLexicalPatternGroupCollection"><summary>
            Provides the base requirements for a collection of <see cref="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalPatternGroup" /> objects.
            </summary></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.IDynamicLexicalScopeCollection"><summary>
            Provides the base requirements for a collection of <see cref="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalScope" /> objects.
            </summary></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.IDynamicLexicalStateCollection"><summary>
            Provides the base requirements for a collection of <see cref="T:ActiproSoftware.Text.Lexing.Implementation.DynamicLexicalState" /> objects.
            </summary></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeBase"><summary>
            Provides the abstract base class for a lexical scope.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeBase.IsScopeEnd(ActiproSoftware.Text.ITextBufferReader)"><summary>
            Performs a lex to determine if the current text in the <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> ends the lexical scope.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that is reading a text source.</param><returns>A <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> indicating the lexer result.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeBase.IsScopeStart(ActiproSoftware.Text.ITextBufferReader)"><summary>
            Performs a lex to determine if the current text in the <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> starts the lexical scope.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that is reading a text source.</param><returns>A <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> indicating the lexer result.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeBase.#ctor"><summary>
            Initializes a new instance of the <c>LexicalScopeBase</c> class.
            </summary></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeBase.IsAncestorEndScopeCheckEnabled"><summary>
            Gets or sets whether ancestor end scope checking is enabled while parsing inside the scope.
            </summary><value><c>true</c> if ancestor end scope checking is enabled; otherwise, <c>false</c>.
            </value><remarks>
            When enabled, this allows ancestor scopes to be examined to see a pattern matches their end scope.
            In the event a match is found, this scope exits as well as the ancestor's scope.
            </remarks></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeBase.LexicalStateCore"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that defines the lexical scope.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that defines the lexical scope.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeBase.ParentTransitionCore"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateTransition" /> that is the parent of this scope.
            </summary><value>
            The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateTransition" /> that is the parent of this scope.  
            </value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeBase.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the object.  The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeBase.Transition"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateTransition" /> that this scope performs after ending.
            </summary><value>
            The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateTransition" /> that this scope performs after ending.  
            If the value is <see langword="null" />, then no state transition is performed when the scope ends.
            </value><remarks>The state transition may be made to a child language.</remarks></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeCollection"><summary>
            Represents a collection of lexical scopes.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeCollection.OnItemAdded(System.Int32,ActiproSoftware.Text.Lexing.Implementation.LexicalScopeBase)"><summary>
            Called after an item as been added into the collection.
            </summary><param name="index">The index at which the item is added.</param><param name="value">The item that is added.</param></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeCollection.OnItemRemoving(System.Int32,ActiproSoftware.Text.Lexing.Implementation.LexicalScopeBase)"><summary>
            Called before an item has been removed from the collection.
            </summary><param name="index">The index at which the item is removed.</param><param name="value">The item that is removed.</param></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeCollection.#ctor(ActiproSoftware.Text.Lexing.ILexicalState)"><summary>
            Initializes a new instance of the <c>LexicalScopeCollection</c> class.
            </summary><param name="parentLexicalState">The parent <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that should be assigned to children, if any.</param></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeTokenData"><summary>
            Provides <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> lexer data based on a token ID and an <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" />.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeTokenData.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeTokenData.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeTokenData.#ctor(ActiproSoftware.Text.Lexing.ILexicalScope,System.Int32)"><summary>
            Initializes a new instance of the <c>LexicalScopeTokenData</c> class. 
            </summary><param name="lexicalScope">The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" /> that contains the token.</param><param name="tokenId">The ID of the token.</param></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeTokenData.ClassificationType"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> assigned to the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.IClassificationType" /> assigned to the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeTokenData.Lexer"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.IMergableLexer" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.IMergableLexer" /> that contains the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeTokenData.LexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" />, if any, that defines the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" />, if any, that defines the token.</value><remarks>
            If this value is <see langword="null" />, the token was not defined by a lexical scope.
            </remarks></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeTokenData.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that contains the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeTokenData.TokenId"><summary>
            Gets the token ID assigned to the token.
            </summary><value>The token ID assigned to the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeTokenData.TokenKey"><summary>
            Gets the token key assigned to the token, if it is known.
            </summary><value>The token key assigned to the token, if it is known.</value></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.LexicalStateBase"><summary>
            Provides the abstract base class for a lexical state.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalStateBase.CreateChildLexicalStates"><summary>
            Creates the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateCollection" /> collection that is returned by <see cref="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateBase.ChildLexicalStatesCore" />.
            </summary><returns>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateCollection" /> that was created.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalStateBase.CreateLexicalScopes"><summary>
            Creates the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScopeCollection" /> collection that is returned by <see cref="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateBase.LexicalScopesCore" />.
            </summary><returns>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScopeCollection" /> that was created.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalStateBase.#ctor(System.Int32,System.String)"><summary>
            Initializes a new instance of the <c>LexicalStateBase</c> class.
            </summary><param name="id">The ID of the lexical state.</param><param name="key">The key of the lexical state.</param></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateBase.ChildLexicalStatesCore"><summary>
            Gets the collection of child lexical states.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Lexing.Implementation.LexicalStateCollection" /> containing the child lexical states.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateBase.DefaultTokenId"><summary>
            Gets or sets the ID of the default token that this state assigns.
            </summary><value>The ID of the default token that this state assigns.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateBase.DefaultTokenKey"><summary>
            Gets or sets the key of the default token that this state assigns.
            </summary><value>The key of the default token that this state assigns.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateBase.Id"><summary>
            Gets or sets the ID value that identifies the lexical state.
            </summary><value>The ID value that identifies the lexical state.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateBase.Key"><summary>
            Gets a string-based key that identifies the lexical state.
            </summary><value>A string-based key that identifies the lexical state.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateBase.LexerCore"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Text.Lexing.ILexer" /> that contains the state.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexer" /> that contains the state.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateBase.LexicalScopesCore"><summary>
            Gets the collection of lexical scopes.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Lexing.Implementation.LexicalScopeCollection" /> containing the lexical scopes.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateBase.Tag"><summary>
            Gets or sets the object that contains user-defined data about the object.
            </summary><value>
            An <see cref="T:System.Object" /> that contains user-defined data about the object.  The default is <see langword="null" />.
            </value><remarks>
            Any type derived from the <see cref="T:System.Object" /> class can be assigned to this property. 
            </remarks></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateBase.Transition"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateTransition" /> that is performed immediately after a start scope match.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateTransition" /> that is performed immediately after a start scope match.</value><remarks>
            This provides a mechanism to automatically transition to another language when this state's start scope is matched.
            This state's end scope may be used to exit the child language.
            <para>
            ASP-style tags are an example of when to use this transition.
            </para></remarks></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.LexicalStateCollection"><summary>
            Represents a collection of lexical states.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalStateCollection.GetAllLexicalStateTransitions"><summary>
            Returns a collection containing all <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateTransition" /> objects within the lexical states.
            </summary><returns>A collection containing all <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateTransition" /> objects within the lexical states.</returns><remarks>
            This method allows consumers to see which language transitions can be made within the lexer.
            </remarks></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalStateCollection.OnItemAdded(System.Int32,ActiproSoftware.Text.Lexing.Implementation.LexicalStateBase)"><summary>
            Called after an item as been added into the collection.
            </summary><param name="index">The index at which the item is added.</param><param name="value">The item that is added.</param></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalStateCollection.OnItemRemoving(System.Int32,ActiproSoftware.Text.Lexing.Implementation.LexicalStateBase)"><summary>
            Called before an item has been removed from the collection.
            </summary><param name="index">The index at which the item is removed.</param><param name="value">The item that is removed.</param></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalStateCollection.#ctor(ActiproSoftware.Text.Lexing.ILexer)"><summary>
            Initializes a new instance of the <c>LexicalStateCollection</c> class.
            </summary><param name="parentLexer">The parent <see cref="T:ActiproSoftware.Text.Lexing.ILexer" /> that should be assigned to children, if any.</param></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.LexicalStateIdProviderBase"><summary>
            Represents an abstract base class for an object that provides static IDs for the lexical states of an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" />.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalStateIdProviderBase.ContainsId(System.Int32)"><summary>
            Returns whether the specified ID value is valid for this ID provider.
            </summary><param name="id">The ID to examine.</param><returns><c>true</c> if the ID value is valid; otherwise, <c>false</c></returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalStateIdProviderBase.GetDescription(System.Int32)"><summary>
            Returns the actual string representation for the specified ID.
            </summary><param name="id">The ID to examine.</param><returns>The actual string representation for the specified ID.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalStateIdProviderBase.GetKey(System.Int32)"><summary>
            Returns the string-based key for the specified ID.
            </summary><param name="id">The ID to examine.</param><returns>The string-based key for the specified ID.</returns></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateIdProviderBase.MaxId"><summary>
            Gets the maximum ID returned by this provider.
            </summary><value>The maximum ID returned by this provider.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateIdProviderBase.MinId"><summary>
            Gets the minimum ID returned by this provider.
            </summary><value>The minimum ID returned by this provider.</value></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTokenData"><summary>
            Provides <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> lexer data based on a token ID and on an <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" />.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTokenData.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTokenData.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTokenData.#ctor(ActiproSoftware.Text.Lexing.ILexicalState,System.Int32)"><summary>
            Initializes a new instance of the <c>LexicalStateTokenData</c> class. 
            </summary><param name="lexicalState">The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that contains the token.</param><param name="tokenId">The ID of the token.</param></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTokenData.ClassificationType"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> assigned to the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.IClassificationType" /> assigned to the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTokenData.Lexer"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.IMergableLexer" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.IMergableLexer" /> that contains the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTokenData.LexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" />, if any, that defines the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" />, if any, that defines the token.</value><remarks>
            If this value is <see langword="null" />, the token was not defined by a lexical scope.
            </remarks></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTokenData.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that contains the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTokenData.TokenId"><summary>
            Gets the token ID assigned to the token.
            </summary><value>The token ID assigned to the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTokenData.TokenKey"><summary>
            Gets the token key assigned to the token, if it is known.
            </summary><value>The token key assigned to the token, if it is known.</value></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTransition"><summary>
            Contains information about a transition from one lexical state to another.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTransition.#ctor(ActiproSoftware.Text.ISyntaxLanguage,ActiproSoftware.Text.Lexing.ILexicalState,ActiproSoftware.Text.Lexing.Implementation.LexicalScopeBase)"><summary>
            Initializes a new instance of the <c>LexicalStateTransition</c> class.
            </summary><param name="childLanguage">The <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> that contains the <see cref="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTransition.ChildLexicalState" />.</param><param name="childLexicalState">The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> into which a transition is made.</param><param name="childLexicalScope">The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" /> that is used in the <see cref="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTransition.ChildLexicalState" /> to end the transition and pop back up to the parent lexical state.</param></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTransition.ChildLanguage"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> that contains the <see cref="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTransition.ChildLexicalState" />.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> that contains the <see cref="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTransition.ChildLexicalState" />.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTransition.ChildLexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" /> that is used in the <see cref="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTransition.ChildLexicalState" /> to end the transition and pop back up to the parent lexical state.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" /> that is used in the <see cref="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTransition.ChildLexicalState" /> to end the transition and pop back up to the parent lexical state.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTransition.ChildLexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> into which a transition is made.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> into which a transition is made.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.LexicalStateTransition.ParentLexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" /> that owns this state transition.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" /> that owns this state transition.</value></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.MergableLexerBase"><summary>
            Represents the base implementation of a lexer (lexical analyzer) for a language that supports merging with other languages.
            </summary><remarks>
            Instances of this object can be registered with an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> using the 
            <see cref="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService(System.Object,System.Object)" /> method.
            Once an instance is registered with the language for the <see cref="T:ActiproSoftware.Text.Lexing.ILexer" /> interface type, its features can be used by the language.
            </remarks></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.MergableLexerBase.CreateChangeBatch"><summary>
            Creates an <see cref="T:System.IDisposable" /> object such that while the object is not disposed, the
            lexer can be modified without any change events being fired, thereby allowing batch updates to occur.
            </summary><returns>An <see cref="T:System.IDisposable" /> object.  Once disposed, the batch is ended.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.MergableLexerBase.CreateDocumentEndToken(System.Int32,ActiproSoftware.Text.TextPosition,ActiproSoftware.Text.Lexing.ILexicalState)"><summary>
            Creates an <see cref="T:ActiproSoftware.Text.Lexing.IMergableToken" /> that represents the end of a document.
            </summary><param name="startOffset">The start offset of the <see cref="T:ActiproSoftware.Text.Lexing.IToken" />.</param><param name="startPosition">The start <see cref="T:ActiproSoftware.Text.TextPosition" /> of the <see cref="T:ActiproSoftware.Text.Lexing.IToken" />.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that contains the token.</param><returns>An <see cref="T:ActiproSoftware.Text.Lexing.IMergableToken" /> that represents the end of a document.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.MergableLexerBase.CreateToken(System.Int32,System.Int32,ActiproSoftware.Text.TextPosition,ActiproSoftware.Text.TextPosition,ActiproSoftware.Text.Lexing.MergableLexerFlags,ActiproSoftware.Text.Lexing.ILexicalState,ActiproSoftware.Text.Lexing.IMergableTokenLexerData)"><summary>
            Creates an <see cref="T:ActiproSoftware.Text.Lexing.IMergableToken" /> that represents the range of text with the specified lexer data.
            </summary><param name="startOffset">The start offset of the token.</param><param name="length">The length of the token.</param><param name="startPosition">The <see cref="T:ActiproSoftware.Text.TextPosition" /> of the first character in the token.</param><param name="endPosition">The <see cref="T:ActiproSoftware.Text.TextPosition" /> after the last character in the token.</param><param name="lexerFlags">The <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerFlags" /> for the token.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that contains the token.</param><param name="lexerData">The <see cref="T:ActiproSoftware.Text.Lexing.IMergableTokenLexerData" /> that contains lexer information about the token.</param><returns>An <see cref="T:ActiproSoftware.Text.Lexing.IMergableToken" /> that represents the range of text with the specified lexer data.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.MergableLexerBase.GetDefaultToken(ActiproSoftware.Text.ITextBufferReader,ActiproSoftware.Text.Lexing.ILexicalState)"><summary>
            Returns a single-character <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> representing the lexer result for the
            default token in the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> and seeks forward one position in the <see cref="T:ActiproSoftware.Text.ITextBufferReader" /></summary><param name="reader">An <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that specifies the current state.</param><returns>A <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> indicating the lexer result.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.MergableLexerBase.GetIncrementalParseRange(ActiproSoftware.Text.TextSnapshotRange)"><summary>
            Returns a <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> that indicates the minimum range to parse when incremental parsing for the
            specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> is requested.
            </summary><param name="snapshotRange">The requested <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> to incrementally parse.</param><returns>The actual <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> to incrementally parse.</returns><remarks>
            When performing incremental parsing, a larger snapshot range than the actual modified snapshot range should usually be parsed.
            For instance, if the end user types text at the end of a word that should make the word a keyword, incremental parsing should
            start at least at the start of the word or else it won't be recognized as a keyword.
            <para>
            The default implementation of this method starts incremental parsing at the start of the line at which the requested
            snapshot range begins.
            </para><para>
            This method is called by the default <see cref="M:ActiproSoftware.Text.Lexing.Implementation.MergableLexerBase.Parse(ActiproSoftware.Text.TextSnapshotRange,ActiproSoftware.Text.Lexing.ILexerTarget)" /> implementation to modify the snapshot range to parse.
            </para></remarks></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.MergableLexerBase.GetAllLexicalStateTransitions"><summary>
            Returns a collection containing all <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateTransition" /> objects within the lexer.
            </summary><returns>A collection containing all <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateTransition" /> objects within the lexer.</returns><remarks>
            This method allows consumers to see which language transitions can be made within the lexer.
            </remarks></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.MergableLexerBase.GetNextToken(ActiproSoftware.Text.ITextBufferReader,ActiproSoftware.Text.Lexing.ILexicalState)"><summary>
            Performs a lex to return the next <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> 
            from a <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> and seeks past it if there is a match.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that specifies the current state.</param><returns>A <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> indicating the lexer result.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.MergableLexerBase.OnChanged(System.EventArgs)"><summary>
            Raises the <see cref="E:ActiproSoftware.Text.Lexing.Implementation.MergableLexerBase.Changed" /> event.
            </summary><param name="e">The <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.MergableLexerBase.Parse(ActiproSoftware.Text.TextSnapshotRange,ActiproSoftware.Text.Lexing.ILexerTarget)"><summary>
            Lexically parses the specified <see cref="T:ActiproSoftware.Text.TextRange" /> of the <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </summary><param name="snapshotRange">A <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> indicating the offset range to parse.</param><param name="parseTarget">The <see cref="T:ActiproSoftware.Text.Lexing.ILexerTarget" /> that receives the parsing output.</param><returns>A <see cref="T:ActiproSoftware.Text.TextRange" /> containing the offset range that was modified.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.MergableLexerBase.#ctor"><summary>
            Initializes a new instance of the <c>MergableLexerBase</c> class.
            </summary></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.MergableLexerBase.DefaultLexicalStateCore"><summary>
            Gets or sets the root <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> for when the language is entered.
            </summary><value>The root <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> for when the language is entered.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.MergableLexerBase.KeyCore"><summary>
            Gets or sets a string that identifies the lexer, generally the related language name.
            </summary><value>A string that identifies the lexer, generally the related language name.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.MergableLexerBase.LexicalStateIdProviderCore"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateIdProvider" /> that provides access to all the lexical state IDs and keys used by this lexer.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateIdProvider" /> that provides access to all the lexical state IDs and keys used by this lexer.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.MergableLexerBase.TokenIdProviderCore"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Text.Lexing.ITokenIdProvider" /> that provides access to all the token IDs and keys used by this lexer.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ITokenIdProvider" /> that provides access to all the token IDs and keys used by this lexer.</value></member><member name="E:ActiproSoftware.Text.Lexing.Implementation.MergableLexerBase.Changed"><summary>
            Occurs after the lexer is changed via a block of code surrounded by <see cref="M:ActiproSoftware.Text.Lexing.Implementation.MergableLexerBase.CreateChangeBatch" />. 
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.MergableLexerCoordinator"><summary>
            Coordinates lexer and state shifting for one or more mergable lexers.
            </summary><remarks>
            Features include:
            <list><item>Forward-only reading in the <see cref="T:ActiproSoftware.Text.ITextBufferReader" />.</item><item>Retrieve one token at a time from a starting offset.</item><item>Possible look-ahead token gathering and caching.</item><item>Parse through a certain snapshot range and output to an ILexerTarget.</item></list></remarks></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.MergableLexerCoordinator.Create(ActiproSoftware.Text.ITextBufferReader,ActiproSoftware.Text.Lexing.IMergableLexer)"><summary>
            Creates an instance of a coordinator for the specified <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> and <see cref="T:ActiproSoftware.Text.Lexing.IMergableLexer" />.
            </summary><param name="reader">The <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> to use.</param><param name="rootLexer">The root <see cref="T:ActiproSoftware.Text.Lexing.IMergableLexer" />.</param><returns>The <see cref="T:ActiproSoftware.Text.Lexing.Implementation.MergableLexerCoordinator" /> that was created.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.MergableLexerCoordinator.GetNextToken"><summary>
            Returns the next <see cref="T:ActiproSoftware.Text.Lexing.IMergableToken" />.
            </summary><returns>The next <see cref="T:ActiproSoftware.Text.Lexing.IMergableToken" />.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.MergableLexerCoordinator.Parse(ActiproSoftware.Text.TextSnapshotRange,ActiproSoftware.Text.Lexing.ILexerTarget)"><summary>
            Lexically parses the specified <see cref="T:ActiproSoftware.Text.TextRange" /> of the <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </summary><param name="snapshotRange">A <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> indicating the offset range to parse.</param><param name="lexerTarget">The <see cref="T:ActiproSoftware.Text.Lexing.ILexerTarget" /> to update.</param><returns>A <see cref="T:ActiproSoftware.Text.TextRange" /> that was parsed.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.MergableLexerCoordinator.Pop"><summary>
            Pops the top coordinator state from the stack and restores the coordinator to that state.
            </summary><returns><c>true</c> if a pop occurred; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.MergableLexerCoordinator.Push"><summary>
            Pushes the coordinator state onto a stack for later restoration, generally to begin a multiple token look-ahead operation.
            </summary><remarks>
            Any call to this method must have a corresponding <see cref="M:ActiproSoftware.Text.Lexing.Implementation.MergableLexerCoordinator.Pop" /> call.
            </remarks></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.MergableToken"><summary>
            Represents the default implementation of an <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> that can be used with an <see cref="T:ActiproSoftware.Text.Lexing.IMergableLexer" />.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.MergableToken.HasFlag(ActiproSoftware.Text.Lexing.MergableLexerFlags)"><summary>
            Returns whether the parse data has the specified <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerFlags" /> flag.
            </summary><param name="flag">The <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerFlags" /> to check for.</param><returns><c>true</c> if the parse data has the specified <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerFlags" /> flag; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.MergableToken.SetFlag(ActiproSoftware.Text.Lexing.MergableLexerFlags,System.Boolean)"><summary>
            Sets or clears the specified <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerFlags" /> flag.
            </summary><param name="flag">The <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerFlags" /> to set or clear.</param><param name="setBit">Whether to set the flag; otherwise, the flag is cleared.</param><remarks>This method should only be called by lexers.</remarks></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.MergableToken.#ctor(System.Int32,System.Int32,ActiproSoftware.Text.TextPosition,ActiproSoftware.Text.TextPosition,ActiproSoftware.Text.Lexing.MergableLexerFlags,ActiproSoftware.Text.Lexing.ILexicalState,ActiproSoftware.Text.Lexing.IMergableTokenLexerData)"><summary>
            Initializes a new instance of the <c>MergableToken</c> class.
            </summary><param name="startOffset">The start offset of the token.</param><param name="length">The length of the token.</param><param name="startPosition">The <see cref="T:ActiproSoftware.Text.TextPosition" /> of the first character in the token.</param><param name="endPosition">The <see cref="T:ActiproSoftware.Text.TextPosition" /> after the last character in the token.</param><param name="lexerFlags">The <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerFlags" /> for the token.</param><param name="lexicalState">The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that contains the token.</param><param name="lexerData">The <see cref="T:ActiproSoftware.Text.Lexing.IMergableTokenLexerData" /> that contains the lexer information about the token.</param></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.MergableToken.AutoCaseCorrectText"><summary>
            Gets the text that should be used for this <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> when performing an auto case correction operation on it.
            </summary><value>The text that should be used for this <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> when performing an auto case correction operation on it.</value><remarks>
            Return a <see langword="null" /> value to indicate that there is no auto case correction text available.
            </remarks></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.MergableToken.ClassificationType"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.IClassificationType" /> assigned to the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.IClassificationType" /> assigned to the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.MergableToken.DeclaringLexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that declares the pattern that matched the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that declares the pattern that matched the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.MergableToken.Id"><summary>
            Gets the ID assigned to the token.
            </summary><value>The ID assigned to the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.MergableToken.Key"><summary>
            Gets the key assigned to the token.
            </summary><value>The key assigned to the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.MergableToken.Lexer"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.IMergableLexer" /> that created the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.IMergableLexer" /> that created the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.MergableToken.LexerData"><summary>
            Gets an <see cref="T:ActiproSoftware.Text.Lexing.IMergableTokenLexerData" /> that contains lexer information for the token.
            </summary><value>An <see cref="T:ActiproSoftware.Text.Lexing.IMergableTokenLexerData" /> that contains lexer information for the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.MergableToken.LexerFlags"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerFlags" /> indicating lexer flags for the token.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerFlags" /> indicating lexer flags for the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.MergableToken.LexicalScope"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" />, if any, that defines the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" />, if any, that defines the token.</value><remarks>
            If this value is <see langword="null" />, the token was not defined by a lexical scope.
            </remarks></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.MergableToken.LexicalState"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that contains the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalState" /> that contains the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.MergableToken.LexicalStateId"><summary>
            Gets the ID assigned to the lexical state.
            </summary><value>The ID assigned to the lexical state.</value></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.ProgrammaticLexicalScope"><summary>
            Provides a lexical scope implementation that uses two delegates to perform the <see cref="M:ActiproSoftware.Text.Lexing.Implementation.ProgrammaticLexicalScope.IsScopeStart(ActiproSoftware.Text.ITextBufferReader)" /> and <see cref="M:ActiproSoftware.Text.Lexing.Implementation.ProgrammaticLexicalScope.IsScopeEnd(ActiproSoftware.Text.ITextBufferReader)" /> checks.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.ProgrammaticLexicalScope.IsScopeEnd(ActiproSoftware.Text.ITextBufferReader)"><summary>
            Performs a lex to determine if the current text in the <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> ends the lexical scope.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that is reading a text source.</param><returns>A <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> indicating the lexer result.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.ProgrammaticLexicalScope.IsScopeStart(ActiproSoftware.Text.ITextBufferReader)"><summary>
            Performs a lex to determine if the current text in the <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> starts the lexical scope.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that is reading a text source.</param><returns>A <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> indicating the lexer result.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.ProgrammaticLexicalScope.#ctor(ActiproSoftware.Text.Lexing.Implementation.ProgrammaticLexicalScopeMatch,ActiproSoftware.Text.Lexing.Implementation.ProgrammaticLexicalScopeMatch)"><summary>
            Initializes a new instance of the <c>ProgrammaticLexicalScope</c> class.
            </summary><param name="isScopeStartDelegate">The <see cref="T:ActiproSoftware.Text.Lexing.Implementation.ProgrammaticLexicalScopeMatch" /> to use for matching the scope's start.</param><param name="isScopeEndDelegate">The <see cref="T:ActiproSoftware.Text.Lexing.Implementation.ProgrammaticLexicalScopeMatch" /> to use for matching the scope's end.</param></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.ProgrammaticLexicalScopeMatch"><summary>
            Represents the method that will handle token matching callbacks for <see cref="T:ActiproSoftware.Text.Lexing.Implementation.ProgrammaticLexicalScope" /> objects.
            </summary><param name="reader">An <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> that is reading a text source.</param><param name="lexicalScope">The <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScope" /> that specifies the lexical scope to check.</param><returns>A <see cref="T:ActiproSoftware.Text.Lexing.MergableLexerResult" /> indicating the lexer result.</returns></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.ProgrammaticLexicalState"><summary>
            Provides a default implementation for a lexical state.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.ProgrammaticLexicalState.#ctor(System.Int32,System.String)"><summary>
            Initializes a new instance of the <c>ProgrammaticLexicalState</c> class.
            </summary><param name="id">The ID of the lexical state.</param><param name="key">The key of the lexical state.</param></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.ProgrammaticLexicalState.ChildLexicalStates"><summary>
            Gets the collection of child lexical states.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Lexing.ILexicalStateCollection" /> containing the child lexical states.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.ProgrammaticLexicalState.Lexer"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.Lexing.ILexer" /> that contains the state.
            </summary><value>The <see cref="T:ActiproSoftware.Text.Lexing.ILexer" /> that contains the state.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.ProgrammaticLexicalState.LexicalScopes"><summary>
            Gets the collection of lexical scopes.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Lexing.ILexicalScopeCollection" /> containing the lexical scopes.</value></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.TokenBase"><summary>
            Represents the base class for an <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> implementation.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.TokenBase.Contains(System.Int32)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> contains the specified offset.
            </summary><param name="offset">The offset to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> contains the specified offset; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the offset falls on the <see cref="P:ActiproSoftware.Text.Lexing.Implementation.TokenBase.EndOffset" /> offset
            since this method indicates if the offset is encompassed by the <see cref="T:ActiproSoftware.Text.Lexing.IToken" />.
            </remarks></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.TokenBase.Contains(ActiproSoftware.Text.TextPosition)"><summary>
            Returns whether the <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> contains the specified <see cref="T:ActiproSoftware.Text.TextPosition" />.
            </summary><param name="position">The <see cref="T:ActiproSoftware.Text.TextPosition" /> to examine.</param><returns><c>true</c> if the <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> contains the specified <see cref="T:ActiproSoftware.Text.TextPosition" />; otherwise, <c>false</c>.
            </returns><remarks>
            This method returns <c>false</c> if the position falls on the <see cref="P:ActiproSoftware.Text.Lexing.Implementation.TokenBase.EndPosition" /> position
            since this method indicates if the position is encompassed by the <see cref="T:ActiproSoftware.Text.Lexing.IToken" />.
            </remarks></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.TokenBase.Equals(System.Object)"><summary>
            Determines whether the specified <c>Object</c> is equal to the current <c>Object</c>. 
            </summary><param name="obj">The <c>Object</c> to compare to the current <c>Object</c>.</param><returns><c>true</c> if the specified <c>Object</c> is equal to the current <c>Object</c>; 
            otherwise, <c>false</c>. 
            </returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.TokenBase.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.TokenBase.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.TokenBase.ToString(System.String)"><summary>
            Creates and returns a string representation of the current object.
            </summary><param name="tokenDescription">The description of the <see cref="T:ActiproSoftware.Text.Lexing.IToken" />.</param><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.TokenBase.#ctor(System.Int32,System.Int32,ActiproSoftware.Text.TextPosition,ActiproSoftware.Text.TextPosition)"><summary>
            Initializes a new instance of the <c>TokenBase</c> class.
            </summary><param name="startOffset">The start offset of the token.</param><param name="length">The length of the token.</param><param name="startPosition">The <see cref="T:ActiproSoftware.Text.TextPosition" /> of the first character in the token.</param><param name="endPosition">The <see cref="T:ActiproSoftware.Text.TextPosition" /> after the last character in the token.</param></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.TokenBase.EndOffset"><summary>
            Gets the offset after the last character in the token.
            </summary><value>The offset after the last character in the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.TokenBase.EndPosition"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.TextPosition" /> after the last character in the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.TextPosition" /> after the last character in the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.TokenBase.Id"><summary>
            Gets the ID assigned to the token.
            </summary><value>The ID assigned to the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.TokenBase.Key"><summary>
            Gets the key assigned to the token.
            </summary><value>The key assigned to the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.TokenBase.Length"><summary>
            Gets or sets the absolute length of the token.
            </summary><value>The absolute length of the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.TokenBase.LexicalStateId"><summary>
            Gets the ID assigned to the lexical state that contains the token.
            </summary><value>The ID assigned to the lexical state that contains the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.TokenBase.PositionRange"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.TextPositionRange" /> that specifies the text position range of the token.
            </summary><value>A <see cref="T:ActiproSoftware.Text.TextPositionRange" /> that specifies the text position range of the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.TokenBase.StartOffset"><summary>
            Gets or sets the offset of the first character in the token.
            </summary><value>The offset of the first character in the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.TokenBase.StartPosition"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.TextPosition" /> of the first character in the token.
            </summary><value>The <see cref="T:ActiproSoftware.Text.TextPosition" /> of the first character in the token.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.TokenBase.TextRange"><summary>
            Gets a <see cref="P:ActiproSoftware.Text.Lexing.Implementation.TokenBase.TextRange" /> that specifies the text range of the token.
            </summary><value>A <see cref="P:ActiproSoftware.Text.Lexing.Implementation.TokenBase.TextRange" /> that specifies the text range of the token.</value></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.TokenIdProviderBase"><summary>
            Represents an abstract base class for an object that provides static IDs for the tokens of an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" />.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.TokenIdProviderBase.ContainsId(System.Int32)"><summary>
            Returns whether the specified ID value is valid for this ID provider.
            </summary><param name="id">The ID to examine.</param><returns><c>true</c> if the ID value is valid; otherwise, <c>false</c></returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.TokenIdProviderBase.GetDescription(System.Int32)"><summary>
            Returns the actual string representation for the specified ID.
            </summary><param name="id">The ID to examine.</param><returns>The actual string representation for the specified ID.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.TokenIdProviderBase.GetKey(System.Int32)"><summary>
            Returns the string-based key for the specified ID.
            </summary><param name="id">The ID to examine.</param><returns>The string-based key for the specified ID.</returns></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.TokenIdProviderBase.MaxId"><summary>
            Gets the maximum ID returned by this provider.
            </summary><value>The maximum ID returned by this provider.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.TokenIdProviderBase.MinId"><summary>
            Gets the minimum ID returned by this provider.
            </summary><value>The minimum ID returned by this provider.</value></member><member name="F:ActiproSoftware.Text.Lexing.Implementation.TokenIdProviderBase.DocumentEnd"><summary>
            Gets the <c>DocumentEnd</c> token ID, which is common among all languages.
            </summary><value>The <c>DocumentEnd</c> token ID.</value></member><member name="F:ActiproSoftware.Text.Lexing.Implementation.TokenIdProviderBase.Invalid"><summary>
            Gets the <c>Invalid</c> token ID, which is common among all languages.
            </summary><value>The <c>Invalid</c> token ID.</value></member><member name="T:ActiproSoftware.Text.Lexing.Implementation.TokenSet"><summary>
            Stores token data for a range of text.
            </summary></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.TokenSet.GetEnumerator"><summary>
            Retrieves an <c>IEnumerator</c> object for the entire collection.
            </summary><returns>An <c>IEnumerator</c> object for the entire collection</returns><remarks>
            Enumerators are intended to be used only to read data in the collection. 
            Enumerators cannot be used to modify the underlying collection.
            <para>
            The enumerator does not have exclusive access to the collection.
            </para><para>
            When an enumerator is instantiated, it takes a snapshot of the current state of the collection. 
            If changes are made to the collection, such as adding, modifying or deleting elements, the 
            snapshot gets out of sync and the enumerator throws an <c>InvalidOperationException</c>. 
            Two enumerators instantiated from the same collection at the same time can have 
            different snapshots of the collection.
            </para></remarks></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.TokenSet.IndexOf(System.Int32,System.Int32)"><summary>
            Returns the index of the <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> in the set that contains the specified offset, if any.
            </summary><param name="offset">The offset for which to search.</param><param name="hintIndex">The hint index at which to begin searching; otherwise, <c>-1</c>.</param><returns>The index of the <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> in the set that contains the specified offset; otherwise, <c>-1</c>.</returns></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.TokenSet.#ctor(ActiproSoftware.Text.TextRange,System.Collections.Generic.IEnumerable{ActiproSoftware.Text.Lexing.IToken},System.Object)"><summary>
            Initializes a new instance of the <c>TokenSet</c> class.
            </summary><param name="textRange">The <see cref="P:ActiproSoftware.Text.Lexing.Implementation.TokenSet.TextRange" /> for which tokens in this set are available.</param><param name="tokens">The enumerable collection of tokens to add to the set.</param><param name="parseContext">An optional object that may be used to help provide context information when resuming incremental parsing near the end of this token set.</param></member><member name="M:ActiproSoftware.Text.Lexing.Implementation.TokenSet.#ctor(ActiproSoftware.Text.TextRange,System.Collections.Generic.IEnumerable{ActiproSoftware.Text.Tagging.TagSnapshotRange{ActiproSoftware.Text.Tagging.ITokenTag}},System.Object)"><summary>
            Initializes a new instance of the <c>TokenSet</c> class.
            </summary><param name="textRange">The <see cref="P:ActiproSoftware.Text.Lexing.Implementation.TokenSet.TextRange" /> for which tokens in this set are available.</param><param name="tagRanges">The enumerable collection of token tag ranges to add to the set.</param><param name="parseContext">An optional object that may be used to help provide context information when resuming incremental parsing near the end of this token set.</param></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.TokenSet.Count"><summary>
            Gets the count of tokens that are stored in the token set.
            </summary><value>The count of tokens that are stored in the token set.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.TokenSet.FirstToken"><summary>
            Gets the first <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> in the set.
            </summary><value>The first <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> in the set.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.TokenSet.FirstTokenExtendsBack"><summary>
            Gets whether the <see cref="P:ActiproSoftware.Text.Lexing.Implementation.TokenSet.FirstToken" /> extends back to another token set.
            </summary><value><c>true</c> if the <see cref="P:ActiproSoftware.Text.Lexing.Implementation.TokenSet.FirstToken" /> extends back to another token set; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.TokenSet.LastToken"><summary>
            Gets the last <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> in the set.
            </summary><value>The last <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> in the set.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.TokenSet.LastTokenExtendsForward"><summary>
            Gets whether the <see cref="P:ActiproSoftware.Text.Lexing.Implementation.TokenSet.LastToken" /> extends forward to another token set.
            </summary><value><c>true</c> if the <see cref="P:ActiproSoftware.Text.Lexing.Implementation.TokenSet.LastToken" /> extends forward to another token set; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.TokenSet.ParseContext"><summary>
            Gets an optional object that may be used to help provide context information when resuming incremental parsing near the end of this token set.
            </summary><value>An optional object that may be used to help provide context information when resuming incremental parsing near the end of this token set.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.TokenSet.TextRange"><summary>
            Gets the <see cref="P:ActiproSoftware.Text.Lexing.Implementation.TokenSet.TextRange" /> for which tokens in this set are available.
            </summary><value>The <see cref="P:ActiproSoftware.Text.Lexing.Implementation.TokenSet.TextRange" /> for which tokens in this set are available.</value></member><member name="P:ActiproSoftware.Text.Lexing.Implementation.TokenSet.Tokens(System.Int32)"><summary>
            Gets an <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> in the token set.
            </summary><param name="index">The index of the <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> to return.</param><value>
            An <see cref="T:ActiproSoftware.Text.Lexing.IToken" /> in the token set.
            </value></member><member name="T:ActiproSoftware.Text.Implementation.ClassificationType"><summary>
            Represents the default implementation of a class that represents a classification type.
            </summary></member><member name="M:ActiproSoftware.Text.Implementation.ClassificationType.Equals(System.Object)"><summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary><param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param><returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns><exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception></member><member name="M:ActiproSoftware.Text.Implementation.ClassificationType.GetHashCode"><summary>
            Returns a hash code for this object.
            </summary><returns>An integer value that specifies a hash value for this object.</returns></member><member name="M:ActiproSoftware.Text.Implementation.ClassificationType.ToString"><summary>
            Returns a <c>String</c> that represents the current <c>Object</c>.
            </summary><returns>A <c>String</c> that represents the current <c>Object</c>.</returns></member><member name="M:ActiproSoftware.Text.Implementation.ClassificationType.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>ClassificationType</c> class.
            </summary><param name="key">The string key that uniquely identifies the classification type.</param></member><member name="M:ActiproSoftware.Text.Implementation.ClassificationType.#ctor(System.String,System.String)"><summary>
            Initializes a new instance of the <c>ClassificationType</c> class.
            </summary><param name="key">The string key that uniquely identifies the classification type.</param><param name="description">The description of the classification type.</param></member><member name="P:ActiproSoftware.Text.Implementation.ClassificationType.Description"><summary>
            Gets the description of the classification type, which is displayed in the user interface.
            </summary><value>The description of the classification type, which is displayed in the user interface.</value></member><member name="P:ActiproSoftware.Text.Implementation.ClassificationType.Key"><summary>
            Gets the string key that uniquely identifies the classification type.
            </summary><value>The string key that uniquely identifies the classification type.</value></member><member name="T:ActiproSoftware.Text.Implementation.CodeDocument"><summary>
            Represents a text document with some advanced features that relate to syntax highlighting and code parsing.
            </summary></member><member name="M:ActiproSoftware.Text.Implementation.CodeDocument.AddLanguageChangedEventHandler(System.EventHandler{ActiproSoftware.Text.SyntaxLanguageChangedEventArgs},ActiproSoftware.Text.Utility.EventHandlerPriority)"><summary>
            Adds an event handler for the <see cref="E:ActiproSoftware.Text.Implementation.CodeDocument.LanguageChanged" /> event using the specified priority level.
            </summary><param name="handler">The delegate handler.</param><param name="priority">A <see cref="T:ActiproSoftware.Text.Utility.EventHandlerPriority" /> specifying the priority level.</param></member><member name="M:ActiproSoftware.Text.Implementation.CodeDocument.CreateParseRequest"><summary>
            Creates an <see cref="T:ActiproSoftware.Text.Parsing.IParseRequest" /> that will be used by calls to <see cref="M:ActiproSoftware.Text.Implementation.CodeDocument.QueueParseRequest" />.
            </summary><returns>The <see cref="T:ActiproSoftware.Text.Parsing.IParseRequest" /> that was created.</returns></member><member name="M:ActiproSoftware.Text.Implementation.CodeDocument.CreateTagAggregator``1"><summary>
            Creates a new <see cref="T:ActiproSoftware.Text.Tagging.ITagAggregator`1" /> that collects the tag results from all <see cref="T:ActiproSoftware.Text.Tagging.ITagger`1" /> instances
            associated with this document.
            </summary><typeparam name="T">The type of <see cref="T:ActiproSoftware.Text.Tagging.ITag" /> associated with this aggregator.</typeparam><returns>The <see cref="T:ActiproSoftware.Text.Tagging.ITagAggregator`1" /> that was created.</returns></member><member name="M:ActiproSoftware.Text.Implementation.CodeDocument.GetReadOnlyRegions(ActiproSoftware.Text.TextRange)"><summary>
            Returns the collection of read-only region tag snapshot ranges.
            </summary><param name="textRange">The text range relative to the current snapshot for which to locate read-only regions.</param><returns>The collection of read-only region tag snapshot ranges.</returns></member><member name="M:ActiproSoftware.Text.Implementation.CodeDocument.GetServices``1"><summary>
            Returns a list of available services of the specified type.
            </summary><typeparam name="TService">The type of service.</typeparam><returns>The list of available services of the specified type.</returns></member><member name="M:ActiproSoftware.Text.Implementation.CodeDocument.NotifyParseComplete(ActiproSoftware.Text.Parsing.IParseRequest,ActiproSoftware.Text.Parsing.IParseData)"><summary>
            Called when a parsing operation has completed for this document, and passes the original request along with the result.
            </summary><param name="request">An <see cref="T:ActiproSoftware.Text.Parsing.IParseRequest" /> that contains information about the parsing operation that was requested.</param><param name="result">An <see cref="T:ActiproSoftware.Text.Parsing.IParseData" /> that is the result of the parsing operation.</param><remarks>
            The default implementation of this method assigns <paramref name="result" /> to the <see cref="P:ActiproSoftware.Text.Implementation.CodeDocument.ParseData" /> property.
            </remarks></member><member name="M:ActiproSoftware.Text.Implementation.CodeDocument.OnFileNameChanged(ActiproSoftware.Text.Utility.StringPropertyChangedEventArgs)"><summary>
            Raises the <c>FileNameChanged</c> event.
            </summary><param name="e">An <c>StringPropertyChangedEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.Text.Implementation.CodeDocument.OnLanguageChanged(ActiproSoftware.Text.SyntaxLanguageChangedEventArgs)"><summary>
            Raises the <c>LanguageChanged</c> event.
            </summary><param name="e">An <c>SyntaxLanguageChangedEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.Text.Implementation.CodeDocument.OnParseDataChanged(ActiproSoftware.Text.Parsing.ParseDataPropertyChangedEventArgs)"><summary>
            Raises the <c>ParseDataChanged</c> event.
            </summary><param name="e">An <c>ParseDataPropertyChangedEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.Text.Implementation.CodeDocument.OnTextChanged(ActiproSoftware.Text.TextSnapshotChangedEventArgs)"><summary>
            Raises the <see cref="E:ActiproSoftware.Text.ITextDocument.TextChanged" /> event.
            </summary><param name="e">A <c>TextSnapshotChangedEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.Text.Implementation.CodeDocument.QueueParseRequest"><summary>
            Queues up a parse request for the document with the ambient dispatcher.
            </summary><remarks>
            If <see cref="T:ActiproSoftware.Text.Parsing.AmbientParseRequestDispatcherProvider" /> does not provide a dispatcher,
            the parsing operation is completed immediately in the calling thread.
            </remarks></member><member name="M:ActiproSoftware.Text.Implementation.CodeDocument.RemoveLanguageChangedEventHandler(System.EventHandler{ActiproSoftware.Text.SyntaxLanguageChangedEventArgs},ActiproSoftware.Text.Utility.EventHandlerPriority)"><summary>
            Removes an event handler for the <see cref="E:ActiproSoftware.Text.Implementation.CodeDocument.LanguageChanged" /> event using the specified priority level.
            </summary><param name="handler">The delegate handler.</param><param name="priority">A <see cref="T:ActiproSoftware.Text.Utility.EventHandlerPriority" /> specifying the priority level.</param></member><member name="M:ActiproSoftware.Text.Implementation.CodeDocument.#ctor"><summary>
            Initializes a new instance of the <c>CodeDocument</c> class.
            </summary></member><member name="P:ActiproSoftware.Text.Implementation.CodeDocument.Language"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> that is currently loaded.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> that is currently loaded.</value><remarks>The default value is a plain text language.</remarks></member><member name="P:ActiproSoftware.Text.Implementation.CodeDocument.LanguageData"><summary>
            Gets or sets an object that specifies document-specific data for the <see cref="P:ActiproSoftware.Text.Implementation.CodeDocument.Language" /> that is loaded.
            </summary><value>An object that specifies document-specific data for the <see cref="P:ActiproSoftware.Text.Implementation.CodeDocument.Language" /> that is loaded.</value></member><member name="P:ActiproSoftware.Text.Implementation.CodeDocument.ParseData"><summary>
            Gets or sets the syntax/semantic parse data that has been assigned to this document as a result of a parsing operation.
            </summary><value>The syntax/semantic parse data that has been assigned to this document as a result of a parsing operation.</value></member><member name="P:ActiproSoftware.Text.Implementation.CodeDocument.Properties"><summary>
            Gets the dictionary containing custom properties for this object.
            </summary><value>The dictionary containing custom properties for this object.</value></member><member name="E:ActiproSoftware.Text.Implementation.CodeDocument.LanguageChanged"><summary>
            Occurs after the value of the <see cref="P:ActiproSoftware.Text.Implementation.CodeDocument.Language" /> property has changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>SyntaxLanguageChangedEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.Implementation.CodeDocument.ParseDataChanged"><summary>
            Occurs after the value of the <see cref="P:ActiproSoftware.Text.Implementation.CodeDocument.ParseData" /> property has changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>ParseDataPropertyChangedEventArgs</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.Text.Implementation.DefaultWordBreakFinder"><summary>
            Provides the default implementation of an object that finds word breaks within an <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </summary><remarks>
            Instances of this object can be registered with an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> using the 
            <see cref="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService(System.Object,System.Object)" /> method.
            Once an instance is registered with the language for the <see cref="T:ActiproSoftware.Text.IWordBreakFinder" /> interface type, its features can be used by the language.
            </remarks></member><member name="M:ActiproSoftware.Text.Implementation.DefaultWordBreakFinder.FindCurrentWordEnd(ActiproSoftware.Text.TextSnapshotOffset)"><summary>
            Returns the <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> offset of the word end character that occurs at or after the specified start offset.
            </summary><param name="snapshotOffset">The <see cref="T:ActiproSoftware.Text.TextSnapshotOffset" /> from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> offset of the word end character that occurs at or after the specified start offset.</returns></member><member name="M:ActiproSoftware.Text.Implementation.DefaultWordBreakFinder.FindCurrentWordStart(ActiproSoftware.Text.TextSnapshotOffset)"><summary>
            Returns the <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> offset of the word start character that occurs at or before the specified start offset.
            </summary><param name="snapshotOffset">The <see cref="T:ActiproSoftware.Text.TextSnapshotOffset" /> from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> offset of the word start character that occurs at or before the specified start offset.</returns></member><member name="M:ActiproSoftware.Text.Implementation.DefaultWordBreakFinder.FindNextWordStart(ActiproSoftware.Text.TextSnapshotOffset)"><summary>
            Returns the <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> offset of the word start character that occurs after the specified start offset.
            </summary><param name="snapshotOffset">The <see cref="T:ActiproSoftware.Text.TextSnapshotOffset" /> from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> offset of the word start character that occurs after the specified start offset.</returns></member><member name="M:ActiproSoftware.Text.Implementation.DefaultWordBreakFinder.FindPreviousWordStart(ActiproSoftware.Text.TextSnapshotOffset)"><summary>
            Returns the <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> offset of the word start character that occurs before the specified start offset.
            </summary><param name="snapshotOffset">The <see cref="T:ActiproSoftware.Text.TextSnapshotOffset" /> from which to start parsing.</param><returns>The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> offset of the word start character that occurs before the specified start offset.</returns></member><member name="M:ActiproSoftware.Text.Implementation.DefaultWordBreakFinder.#ctor"><summary>
            Initializes a new instance of the <c>DefaultWordBreakFinder</c> class. 
            </summary><remarks>
            The default constructor initializes all fields to their default values.
            </remarks></member><member name="P:ActiproSoftware.Text.Implementation.DefaultWordBreakFinder.DefaultWordContainsAdditionalCharacters"><summary>
            Gets the default <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> for the <see cref="P:ActiproSoftware.Text.Implementation.DefaultWordBreakFinder.WordContainsAdditionalCharacters" /> property.
            </summary><value>The default <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> for the <see cref="P:ActiproSoftware.Text.Implementation.DefaultWordBreakFinder.WordContainsAdditionalCharacters" /> property.</value></member><member name="P:ActiproSoftware.Text.Implementation.DefaultWordBreakFinder.DefaultWordStandaloneCharacters"><summary>
            Gets the default <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> for the <see cref="P:ActiproSoftware.Text.Implementation.DefaultWordBreakFinder.WordStandaloneCharacters" /> property.
            </summary><value>The default <see cref="T:ActiproSoftware.Text.RegularExpressions.CharClass" /> for the <see cref="P:ActiproSoftware.Text.Implementation.DefaultWordBreakFinder.WordStandaloneCharacters" /> property.</value></member><member name="P:ActiproSoftware.Text.Implementation.DefaultWordBreakFinder.WordContainsAdditionalCharacters"><summary>
            Gets or sets the set of additional characters that can constitute the inside of a word, other than letters and digits.
            </summary><value>The set of additional characters that can constitute the inside of a word, other than letters and digits.</value><remarks>
            The default value is the <c>_</c> character.
            </remarks></member><member name="P:ActiproSoftware.Text.Implementation.DefaultWordBreakFinder.WordStandaloneCharacters"><summary>
            Gets or sets the set of characters that are intended to be single character words.
            </summary><value>The set of characters that are intended to be single character words.</value><remarks>
            The default value is the set of <c>.,()&lt;&gt;[]{}?!\/:;'"</c> characters.
            </remarks></member><member name="T:ActiproSoftware.Text.Implementation.ExampleTextProvider"><summary>
            Implements an object that returns example text,
            which can be displayed in an application to show how a language's code snippet is syntax-highlighted.
            </summary><remarks>
            Instances of this object can be registered with an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> using the 
            <see cref="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService(System.Object,System.Object)" /> method.
            Once an instance is registered with the language for the <see cref="T:ActiproSoftware.Text.IExampleTextProvider" /> interface type, its features can be used by the language.
            </remarks></member><member name="M:ActiproSoftware.Text.Implementation.ExampleTextProvider.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>ExampleTextProvider</c> class. 
            </summary><param name="exampleText">The example text, a code snippet of the related language.</param></member><member name="P:ActiproSoftware.Text.Implementation.ExampleTextProvider.ExampleText"><summary>
            Gets or sets the example text, a code snippet of the related language.
            </summary><value>The example text.</value></member><member name="T:ActiproSoftware.Text.Implementation.LineBasedLineCommenter"><summary>
            Represents an object that can comment and uncomment lines on a per-line basis.
            </summary><remarks>
            The <see cref="P:ActiproSoftware.Text.Implementation.LineBasedLineCommenter.StartDelimiter" /> is required.  
            <para>
            The start delimiter is added/removed from each line in the range.
            </para><para>
            Instances of this object can be registered with an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> using the 
            <see cref="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService(System.Object,System.Object)" /> method.
            Once an instance is registered with the language for the <see cref="T:ActiproSoftware.Text.ILineCommenter" /> interface type, its features can be used by the language.
            </para></remarks></member><member name="M:ActiproSoftware.Text.Implementation.LineBasedLineCommenter.Comment(ActiproSoftware.Text.ITextSnapshot,ActiproSoftware.Text.ITextPositionRangeCollection,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Comments out the lines of code in the specified position ranges.
            </summary><param name="snapshot">The target <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.</param><param name="positionRanges">The <see cref="T:ActiproSoftware.Text.ITextPositionRangeCollection" /> indicating the position ranges over which to comment lines.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param></member><member name="M:ActiproSoftware.Text.Implementation.LineBasedLineCommenter.Uncomment(ActiproSoftware.Text.ITextSnapshot,ActiproSoftware.Text.ITextPositionRangeCollection,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Uncomments the lines of code in the specified position ranges.
            </summary><param name="snapshot">The target <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.</param><param name="positionRanges">The <see cref="T:ActiproSoftware.Text.ITextPositionRangeCollection" /> indicating the position ranges over which to uncomment lines.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param></member><member name="P:ActiproSoftware.Text.Implementation.LineBasedLineCommenter.CanCommentEmptyLines"><summary>
            Gets or sets a value indicating whether to comment empty lines, when the target range includes more than one line.
            </summary><value><c>true</c> if empty lines are to be commented, when the target range includes more than one line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Implementation.LineBasedLineCommenter.StartDelimiter"><summary>
            Gets or sets the start delimiter text that is added or removed during comment/uncomment operations.
            </summary><value>The start delimiter text that is added or removed during comment/uncomment operations.</value><remarks>
            In <c>C#</c>, the start delimiter would be <c>//</c>.
            </remarks></member><member name="T:ActiproSoftware.Text.Implementation.RangeLineCommenter"><summary>
            Represents an object that can comment and uncomment lines over a particular range.
            </summary><remarks>
            The <see cref="P:ActiproSoftware.Text.Implementation.RangeLineCommenter.StartDelimiter" /> and <see cref="P:ActiproSoftware.Text.Implementation.RangeLineCommenter.EndDelimiter" /> properties are both required.  
            <para>
            The start delimiter is added/removed from the start of the range.
            The end delimiter is added/removed from the end of the range.
            </para><para>
            Instances of this object can be registered with an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> using the 
            <see cref="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService(System.Object,System.Object)" /> method.
            Once an instance is registered with the language for the <see cref="T:ActiproSoftware.Text.ILineCommenter" /> interface type, its features can be used by the language.
            </para></remarks></member><member name="M:ActiproSoftware.Text.Implementation.RangeLineCommenter.Comment(ActiproSoftware.Text.ITextSnapshot,ActiproSoftware.Text.ITextPositionRangeCollection,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Comments out the lines of code in the specified position ranges.
            </summary><param name="snapshot">The target <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.</param><param name="positionRanges">The <see cref="T:ActiproSoftware.Text.ITextPositionRangeCollection" /> indicating the position ranges over which to comment lines.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param></member><member name="M:ActiproSoftware.Text.Implementation.RangeLineCommenter.FindCommentTextRange(ActiproSoftware.Text.TextSnapshotRange)"><summary>
            Returns the full text range of the comment that surrounds the specified snapshot range, if any.
            </summary><param name="snapshotRange">The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> to examine.</param><returns>The full text range of the comment that surrounds the specified snapshot range, if any.</returns></member><member name="M:ActiproSoftware.Text.Implementation.RangeLineCommenter.Uncomment(ActiproSoftware.Text.ITextSnapshot,ActiproSoftware.Text.ITextPositionRangeCollection,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Uncomments the lines of code in the specified position ranges.
            </summary><param name="snapshot">The target <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.</param><param name="positionRanges">The <see cref="T:ActiproSoftware.Text.ITextPositionRangeCollection" /> indicating the position ranges over which to uncomment lines.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param></member><member name="P:ActiproSoftware.Text.Implementation.RangeLineCommenter.CommentTokenId"><summary>
            Gets or sets the comment token ID.
            </summary><value>The comment token ID.</value><remarks>
            If a token ID is specified for the comment, it can be used to help locate a surrounding comment when uncommenting.
            </remarks></member><member name="P:ActiproSoftware.Text.Implementation.RangeLineCommenter.EndDelimiter"><summary>
            Gets or sets the end delimiter text that is added or removed during comment/uncomment operations.
            </summary><value>The end delimiter text that is added or removed during comment/uncomment operations.</value><remarks>
            For instance, in <c>XML</c> the end delimiter would be <c>--&gt;</c>.
            </remarks></member><member name="P:ActiproSoftware.Text.Implementation.RangeLineCommenter.StartDelimiter"><summary>
            Gets or sets the start delimiter text that is added or removed during comment/uncomment operations.
            </summary><value>The start delimiter text that is added or removed during comment/uncomment operations.</value><remarks>
            For instance, in <c>XML</c> the start delimiter would be <c>&lt;!--</c>.
            </remarks></member><member name="T:ActiproSoftware.Text.Implementation.StringTextBufferReader"><summary>
            Represents an <see cref="T:ActiproSoftware.Text.ITextBufferReader" /> implementation for a <see cref="T:System.String" />.
            </summary></member><member name="M:ActiproSoftware.Text.Implementation.StringTextBufferReader.AsTextReader"><summary>
            Returns a <see cref="T:System.IO.TextReader" /> wrapper for this reader.
            </summary><returns>A <see cref="T:System.IO.TextReader" /> wrapper for this reader.</returns></member><member name="M:ActiproSoftware.Text.Implementation.StringTextBufferReader.GetSubstring(System.Int32,System.Int32)"><summary>
            Returns a substring from the text buffer using <see cref="F:ActiproSoftware.Text.LineTerminator.Newline" /> for line ends.
            </summary><param name="startOffset">The offset at which to retrieve the text.</param><param name="substringLength">The number of characters to return.</param><returns>The substring from the text buffer using <see cref="F:ActiproSoftware.Text.LineTerminator.Newline" /> for line ends.</returns></member><member name="M:ActiproSoftware.Text.Implementation.StringTextBufferReader.Peek"><summary>
            Peeks at a single character from the text buffer without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.Text.Implementation.StringTextBufferReader.Peek(System.Int32)"><summary>
            Peeks at a certain character from the text buffer after the current <see cref="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.Offset" /> without seeking past it.
            </summary><param name="count">The number of characters away from the current <see cref="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.Offset" /> at which to peek.</param><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.Text.Implementation.StringTextBufferReader.PeekReverse"><summary>
            Reverse peeks at a single character from the text buffer without seeking past it.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.Text.Implementation.StringTextBufferReader.Pop"><summary>
            Pops the top offset from the stack and moves the <see cref="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.Offset" /> to that offset.
            </summary><returns><c>true</c> if a pop occurred; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Implementation.StringTextBufferReader.PopAll"><summary>
            Pops the all offsets from the stack and moves the <see cref="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.Offset" /> to the offset that was on the bottom of the stack.
            </summary><returns><c>true</c> if a pop occurred; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Implementation.StringTextBufferReader.Push"><summary>
            Pushes the <see cref="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.Offset" /> onto the stack for later restoration.
            </summary></member><member name="M:ActiproSoftware.Text.Implementation.StringTextBufferReader.Read"><summary>
            Reads a single character from the text buffer and seeks forward one offset.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.Text.Implementation.StringTextBufferReader.ReadReverse"><summary>
            Reverse reads a single character from the text buffer and seeks backward one offset.
            </summary><returns>The character that was read.</returns></member><member name="M:ActiproSoftware.Text.Implementation.StringTextBufferReader.ReadReverseThrough(System.Char)"><summary>
            Reverse reads characters from the text buffer until the specified character is read through.
            </summary><param name="ch">The desired character.</param><returns><c>true</c> if the desired character was read; otherwise, <c>false</c> if the start of the text buffer was reached.
            </returns></member><member name="M:ActiproSoftware.Text.Implementation.StringTextBufferReader.ReadReverseThrough(System.Char,System.Int32)"><summary>
            Reverse reads characters from the text buffer until the specified character is read through, or the specified offset is reached.
            </summary><param name="ch">The desired character.</param><param name="minOffset">The minimum offset to check.</param><returns><c>true</c> if the desired character was read; otherwise, <c>false</c> if the specified offset was reached.
            </returns></member><member name="M:ActiproSoftware.Text.Implementation.StringTextBufferReader.ReadThrough(System.Char)"><summary>
            Reads characters from the text buffer until the specified character is read through.
            </summary><param name="ch">The desired character.</param><returns><c>true</c> if the desired character was read; otherwise, <c>false</c> if the end of the text buffer was reached.
            </returns></member><member name="M:ActiproSoftware.Text.Implementation.StringTextBufferReader.ReadThrough(System.Char,System.Int32)"><summary>
            Reads characters from the text buffer until the specified character is read through, or the specified offset is reached.
            </summary><param name="ch">The desired character.</param><param name="maxOffset">The maximum offset to check.</param><returns><c>true</c> if the desired character was read; otherwise, <c>false</c> if the specified offset was reached.
            </returns></member><member name="M:ActiproSoftware.Text.Implementation.StringTextBufferReader.ToString"><summary>
            Creates and returns a string representation of the current object.
            </summary><returns>A string representation of the current object.</returns></member><member name="M:ActiproSoftware.Text.Implementation.StringTextBufferReader.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>StringTextBufferReader</c> class.
            </summary><param name="text">The text to store in the text buffer.</param></member><member name="M:ActiproSoftware.Text.Implementation.StringTextBufferReader.#ctor(System.String,ActiproSoftware.Text.TextPosition,System.Int32)"><summary>
            Initializes a new instance of the <c>StringTextBufferReader</c> class.
            </summary><param name="text">The text to store in the text buffer.</param><param name="position">The initial <see cref="T:ActiproSoftware.Text.TextPosition" /> of the reader.</param><param name="offset">The initial offset of the reader.</param></member><member name="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.HasStackEntries"><summary>
            Gets whether there are entries on the stack.
            </summary><value><c>true</c> if there are entries on the stack; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.IsAtEnd"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.Offset" /> is at the end of the text buffer.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.Offset" /> is at the end of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.IsAtStart"><summary>
            Gets whether the current <see cref="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.Offset" /> is at the start of the text buffer.
            </summary><value><c>true</c> if the current <see cref="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.Offset" /> is at the start of the text buffer; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.IsWhitespaceOnlyAfterOnLine"><summary>
            Gets whether only whitespace characters appear at and after the <see cref="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.Offset" /> on the current line.
            </summary><value><c>true</c> if only whitespace characters appear at and after the <see cref="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.Offset" /> on the current line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.IsWhitespaceOnlyBeforeOnLine"><summary>
            Gets whether only whitespace characters appear before the <see cref="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.Offset" /> on the current line.
            </summary><value><c>true</c> if only whitespace characters appear before the <see cref="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.Offset" /> on the current line; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.Length"><summary>
            Gets the number of characters in the text buffer.
            </summary><value>The number of characters in the text buffer.</value></member><member name="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.Offset"><summary>
            Gets or sets the current reader offset in the text buffer.
            </summary><value>The current reader offset in the text buffer.</value><remarks>
            For performance reasons there is no bounds check on the setter.
            </remarks></member><member name="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.OffsetDelta"><summary>
            Gets the amount by which to alter the offset values that are parsed.
            </summary><value>The amount by which to alter the offset values that are parsed.</value></member><member name="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.Position"><summary>
            Gets the current reader <see cref="T:ActiproSoftware.Text.TextPosition" /> in the text buffer.
            </summary><value>The current reader <see cref="T:ActiproSoftware.Text.TextPosition" /> in the text buffer.</value></member><member name="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.PositionDelta"><summary>
            Gets the amount by which to alter the <see cref="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.Position" /> values that are parsed.
            </summary><value>The amount by which to alter the <see cref="P:ActiproSoftware.Text.Implementation.StringTextBufferReader.Position" /> values that are parsed.</value><remarks>
            The <c>Character</c> portion only affects character offset of the line after the <c>Line</c> count.
            </remarks></member><member name="T:ActiproSoftware.Text.Implementation.SyntaxLanguage"><summary>
            Implements a syntax-highlighting language definition that can be used to parse an <see cref="T:ActiproSoftware.Text.ICodeDocument" /> and provide additional functionality
            via registered services.
            </summary></member><member name="M:ActiproSoftware.Text.Implementation.SyntaxLanguage.GetAllServiceTypes"><summary>
            Returns a collection of all the service types that have been registered.
            </summary><returns>A collection of all the service types that have been registered.</returns></member><member name="M:ActiproSoftware.Text.Implementation.SyntaxLanguage.GetService``1"><summary>
            Returns the service that has been registered with the specified type.
            </summary><typeparam name="T">The type of service to return.</typeparam><returns>The service that has been registered with the specified type.</returns></member><member name="M:ActiproSoftware.Text.Implementation.SyntaxLanguage.GetService(System.Object)"><summary>
            Returns the service that has been registered with the specified type.
            </summary><param name="serviceType">The type of service to return.</param><returns>The service that has been registered with the specified type.</returns></member><member name="M:ActiproSoftware.Text.Implementation.SyntaxLanguage.OnServiceAdded(ActiproSoftware.Text.Utility.CollectionChangeEventArgs{System.Object})"><summary>
            Raises the <c>ServiceAdded</c> event.
            </summary><param name="e">A <c>CollectionChangeEventArgs{object}</c> that contains the event data.</param></member><member name="M:ActiproSoftware.Text.Implementation.SyntaxLanguage.OnServiceRemoved(ActiproSoftware.Text.Utility.CollectionChangeEventArgs{System.Object})"><summary>
            Raises the <c>ServiceRemoved</c> event.
            </summary><param name="e">A <c>CollectionChangeEventArgs{object}</c> that contains the event data.</param></member><member name="M:ActiproSoftware.Text.Implementation.SyntaxLanguage.RegisterService``1(``0)"><summary>
            Registers a service instance for the specified service type.
            </summary><typeparam name="T">The type of service.</typeparam><param name="service">The service object instance.</param></member><member name="M:ActiproSoftware.Text.Implementation.SyntaxLanguage.RegisterService(System.Object,System.Object)"><summary>
            Registers a service instance for the specified service type.
            </summary><param name="serviceType">The type of service.</param><param name="service">The service object instance.</param></member><member name="M:ActiproSoftware.Text.Implementation.SyntaxLanguage.UnregisterService``1"><summary>
            Unregisters a service of the specified service type.
            </summary><typeparam name="T">The type of service.</typeparam></member><member name="M:ActiproSoftware.Text.Implementation.SyntaxLanguage.UnregisterService(System.Object)"><summary>
            Unregisters a service of the specified service type.
            </summary><param name="serviceType">The type of service.</param></member><member name="M:ActiproSoftware.Text.Implementation.SyntaxLanguage.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>SyntaxLanguage</c> class.
            </summary><param name="key">A string that identifies the language.</param></member><member name="P:ActiproSoftware.Text.Implementation.SyntaxLanguage.Key"><summary>
            Gets a string that identifies the language.
            </summary><value>A string that identifies the language.</value></member><member name="P:ActiproSoftware.Text.Implementation.SyntaxLanguage.PlainText"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.Implementation.SyntaxLanguage" /> that implements a default plain text parser.
            </summary><value>
            A <see cref="T:ActiproSoftware.Text.Implementation.SyntaxLanguage" /> that implements a default plain text parser.
            </value></member><member name="P:ActiproSoftware.Text.Implementation.SyntaxLanguage.SyncRoot"><summary>
            Gets an object that can be used to synchronize access to the services. 
            </summary><value>An object that can be used to synchronize access to the services.</value></member><member name="E:ActiproSoftware.Text.Implementation.SyntaxLanguage.ServiceAdded"><summary>
            Occurs after a service is added to the object.
            </summary><eventdata>
            The event handler receives an argument of type <c>CollectionChangeEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.Implementation.SyntaxLanguage.ServiceRemoved"><summary>
            Occurs after a service is removed from the object.
            </summary><eventdata>
            The event handler receives an argument of type <c>CollectionChangeEventArgs</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.Text.Implementation.TextChangeOptions"><summary>
            Represents options that are applied to an <see cref="T:ActiproSoftware.Text.ITextChange" />.
            </summary></member><member name="M:ActiproSoftware.Text.Implementation.TextChangeOptions.#ctor"><summary>
            Initializes a new instance of the <c>TextChangeOptions</c> class.
            </summary></member><member name="P:ActiproSoftware.Text.Implementation.TextChangeOptions.CanMergeIntoPreviousChange"><summary>
            Gets or sets whether this text change can merge into the previous text change in the undo stack.
            </summary><value><c>true</c> if this text change can merge into the previous text change in the undo stack; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Implementation.TextChangeOptions.CustomData"><summary>
            Gets or sets custom data that can be persisted with the text change and restored when undo operations occur later on.
            </summary><value>The custom data.</value><remarks>
            This custom data is only persisted for the root text change of a set of operations.
            </remarks></member><member name="P:ActiproSoftware.Text.Implementation.TextChangeOptions.CheckReadOnly"><summary>
            Gets or sets whether to prevent the text change from occurring if the text range to modify is flagged as read-only.
            </summary><value><c>true</c> if the read-only state should be checked; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Implementation.TextChangeOptions.RetainSelection"><summary>
            Gets or sets whether to prevent the caret from moving to the end of the text change in the active view.
            </summary><value><c>true</c> if the caret move should be prevented; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Implementation.TextChangeOptions.OffsetDelta"><summary>
            Gets or sets how an <see cref="T:ActiproSoftware.Text.ITextChange" />'s <see cref="T:ActiproSoftware.Text.ITextChangeOperation" /> offsets are modified based on previously-added operations.
            </summary><value>A <see cref="T:ActiproSoftware.Text.TextChangeOffsetDelta" /> value indicating how to apply offset deltas, if at all.</value></member><member name="P:ActiproSoftware.Text.Implementation.TextChangeOptions.Source"><summary>
            Gets or sets the optional source of the text change, which is most often an editor view if specified.
            </summary><value>The optional source of the text change, which is most often an editor view if specified.</value></member><member name="T:ActiproSoftware.Text.Implementation.TextDocumentBase"><summary>
            Represents a text document.
            </summary></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.AddTextChangedEventHandler(System.EventHandler{ActiproSoftware.Text.TextSnapshotChangedEventArgs},ActiproSoftware.Text.Utility.EventHandlerPriority)"><summary>
            Adds an event handler for the <see cref="E:ActiproSoftware.Text.Implementation.TextDocumentBase.TextChanged" /> event using the specified priority level.
            </summary><param name="handler">The delegate handler.</param><param name="priority">A <see cref="T:ActiproSoftware.Text.Utility.EventHandlerPriority" /> specifying the priority level.</param></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.AddTextChangingEventHandler(System.EventHandler{ActiproSoftware.Text.TextSnapshotChangingEventArgs},ActiproSoftware.Text.Utility.EventHandlerPriority)"><summary>
            Adds an event handler for the <see cref="E:ActiproSoftware.Text.Implementation.TextDocumentBase.TextChanging" /> event using the specified priority level.
            </summary><param name="handler">The delegate handler.</param><param name="priority">A <see cref="T:ActiproSoftware.Text.Utility.EventHandlerPriority" /> specifying the priority level.</param></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.AppendText(ActiproSoftware.Text.ITextChangeType,System.String)"><summary>
            Appends text to the end of the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot" /> text.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="text">The text to append to the current contents of the snapshot.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds an append operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.CreateTextChange(ActiproSoftware.Text.ITextChangeType)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.DeleteText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.ReplaceText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SetText(ActiproSoftware.Text.ITextChangeType,System.String)" /></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.AppendText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Appends text to the end of the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot" /> text and allows for the specification of other options.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="text">The text to append to the current contents of the snapshot.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds an append operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.CreateTextChange(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.ITextChangeOptions)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.DeleteText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.ReplaceText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SetText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.CreateTextChange(ActiproSoftware.Text.ITextChangeType)"><summary>
            Creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> based on the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot" />, whereby any following calls to methods such as 
            <see cref="T:ActiproSoftware.Text.ITextChange" />.<see cref="M:ActiproSoftware.Text.ITextChange.ReplaceText(System.Int32,System.Int32,System.String)" /> are grouped into the text change as operations and 
            sequentially executed upon a <see cref="T:ActiproSoftware.Text.ITextChange" />.<see cref="M:ActiproSoftware.Text.ITextChange.Apply" /> call.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><returns>The <see cref="T:ActiproSoftware.Text.ITextChange" /> that was created.</returns><remarks>
            The <see cref="T:ActiproSoftware.Text.ITextChange" />.<see cref="M:ActiproSoftware.Text.ITextChange.Apply" /> method must be called to apply the queued operations to the document.
            </remarks></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.CreateTextChange(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> based on the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot" />, whereby any following calls to methods such as 
            <see cref="T:ActiproSoftware.Text.ITextChange" />.<see cref="M:ActiproSoftware.Text.ITextChange.ReplaceText(System.Int32,System.Int32,System.String)" /> are grouped into the text change as operations and 
            sequentially executed upon a <see cref="T:ActiproSoftware.Text.ITextChange" />.<see cref="M:ActiproSoftware.Text.ITextChange.Apply" /> call.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param><returns>The <see cref="T:ActiproSoftware.Text.ITextChange" /> that was created.</returns><remarks>
            The <see cref="T:ActiproSoftware.Text.ITextChange" />.<see cref="M:ActiproSoftware.Text.ITextChange.Apply" /> method must be called to apply the queued operations to the document.
            </remarks></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.DeleteText(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.TextRange)"><summary>
            Performs a delete text change in the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot" />.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="textRange">The <see cref="T:ActiproSoftware.Text.TextRange" /> of offsets to delete.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a delete operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.CreateTextChange(ActiproSoftware.Text.ITextChangeType)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.AppendText(ActiproSoftware.Text.ITextChangeType,System.String)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.ReplaceText(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.TextRange,System.String)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SetText(ActiproSoftware.Text.ITextChangeType,System.String)" /></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.DeleteText(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.TextRange,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Performs a delete text change in the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot" /> and allows for the specification of other options.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="textRange">The <see cref="T:ActiproSoftware.Text.TextRange" /> of offsets to delete.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a delete operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.CreateTextChange(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.ITextChangeOptions)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.AppendText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.ReplaceText(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.TextRange,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SetText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.DeleteText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32)"><summary>
            Performs a delete text change in the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot" />.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="offset">The starting offset at which to delete.</param><param name="length">The number of characters to delete.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a delete operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.CreateTextChange(ActiproSoftware.Text.ITextChangeType)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.AppendText(ActiproSoftware.Text.ITextChangeType,System.String)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.ReplaceText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SetText(ActiproSoftware.Text.ITextChangeType,System.String)" /></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.DeleteText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Performs a delete text change in the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot" /> and allows for the specification of other options.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="offset">The starting offset at which to delete.</param><param name="length">The number of characters to delete.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a delete operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.CreateTextChange(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.ITextChangeOptions)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.AppendText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.ReplaceText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SetText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.GetTextReplacementInsertText(ActiproSoftware.Text.ITextChangeOperation)"><summary>
            Returns the scrubbed text that should be inserted for an entire text replacement <see cref="T:ActiproSoftware.Text.ITextChangeOperation" />.
            </summary><param name="operation">The <see cref="T:ActiproSoftware.Text.ITextChangeOperation" /> contanining default text to insert.</param><returns>The text to insert.</returns><remarks>
            This method can be overridden to scrub the text to insert, such as remove trailing whitespace, etc.
            By default it returns a <see langword="null" />, meaning to use the unscrubbed <see cref="P:ActiproSoftware.Text.ITextChangeOperation.InsertedText" /> value.
            </remarks></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String)"><summary>
            Performs an insert text change in the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot" /> at the specified offset.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="offset">The offset at which to insert.</param><param name="text">The text to insert.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds an insert operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.CreateTextChange(ActiproSoftware.Text.ITextChangeType)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.AppendText(ActiproSoftware.Text.ITextChangeType,System.String)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.DeleteText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.ReplaceText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SetText(ActiproSoftware.Text.ITextChangeType,System.String)" /></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Performs an insert text change in the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot" /> at the specified offset and allows for the specification of other options.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="offset">The offset at which to insert.</param><param name="text">The text to insert.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds an insert operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.CreateTextChange(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.ITextChangeOptions)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.AppendText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.DeleteText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.ReplaceText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SetText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.OnTextChanged(ActiproSoftware.Text.TextSnapshotChangedEventArgs)"><summary>
            Raises the <see cref="E:ActiproSoftware.Text.Implementation.TextDocumentBase.TextChanged" /> event.
            </summary><param name="e">A <c>TextSnapshotChangedEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.OnTextChanging(ActiproSoftware.Text.TextSnapshotChangingEventArgs)"><summary>
            Raises the <see cref="E:ActiproSoftware.Text.Implementation.TextDocumentBase.TextChanging" /> event.
            </summary><param name="e">A <c>TextSnapshotChangingEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.RemoveTextChangedEventHandler(System.EventHandler{ActiproSoftware.Text.TextSnapshotChangedEventArgs},ActiproSoftware.Text.Utility.EventHandlerPriority)"><summary>
            Removes an event handler for the <see cref="E:ActiproSoftware.Text.Implementation.TextDocumentBase.TextChanged" /> event using the specified priority level.
            </summary><param name="handler">The delegate handler.</param><param name="priority">A <see cref="T:ActiproSoftware.Text.Utility.EventHandlerPriority" /> specifying the priority level.</param></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.RemoveTextChangingEventHandler(System.EventHandler{ActiproSoftware.Text.TextSnapshotChangingEventArgs},ActiproSoftware.Text.Utility.EventHandlerPriority)"><summary>
            Removes an event handler for the <see cref="E:ActiproSoftware.Text.Implementation.TextDocumentBase.TextChanging" /> event using the specified priority level.
            </summary><param name="handler">The delegate handler.</param><param name="priority">A <see cref="T:ActiproSoftware.Text.Utility.EventHandlerPriority" /> specifying the priority level.</param></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.ReplaceText(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.TextRange,System.String)"><summary>
            Performs a replace text change in the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot" /> at the specified offset.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="textRange">The <see cref="T:ActiproSoftware.Text.TextRange" /> of offsets to delete.</param><param name="text">The text to insert.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a replace operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.CreateTextChange(ActiproSoftware.Text.ITextChangeType)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.AppendText(ActiproSoftware.Text.ITextChangeType,System.String)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.DeleteText(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.TextRange)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SetText(ActiproSoftware.Text.ITextChangeType,System.String)" /></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.ReplaceText(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.TextRange,System.String,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Performs a replace text change in the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot" /> at the specified offset and allows for the specification of other options.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="textRange">The <see cref="T:ActiproSoftware.Text.TextRange" /> of offsets to delete.</param><param name="text">The text to insert.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a replace operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.CreateTextChange(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.ITextChangeOptions)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.AppendText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.DeleteText(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.TextRange,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SetText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.ReplaceText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,System.String)"><summary>
            Performs a replace text change in the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot" /> at the specified offset.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="offset">The offset at which to insert.</param><param name="length">The number of characters to delete before inserting the text.</param><param name="text">The text to insert.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a replace operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.CreateTextChange(ActiproSoftware.Text.ITextChangeType)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.AppendText(ActiproSoftware.Text.ITextChangeType,System.String)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.DeleteText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SetText(ActiproSoftware.Text.ITextChangeType,System.String)" /></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.ReplaceText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Performs a replace text change in the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot" /> at the specified offset and allows for the specification of other options.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="offset">The offset at which to insert.</param><param name="length">The number of characters to delete before inserting the text.</param><param name="text">The text to insert.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a replace operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.CreateTextChange(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.ITextChangeOptions)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.AppendText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.DeleteText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SetText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SetHeaderAndFooterText(System.String,System.String)"><summary>
            Sets the <see cref="P:ActiproSoftware.Text.ITextSnapshot.HeaderText" /> and <see cref="P:ActiproSoftware.Text.ITextSnapshot.FooterText" />, and creates a new snapshot with the results.
            </summary><param name="headerText">The new header text value.</param><param name="footerText">The new footer text value.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SetText(System.String)"><summary>
            Replaces all the text in the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot" /> and marks the operation as a programmatic replacement.
            </summary><param name="text">The text to insert.  Pass an empty string to "clear" the snapshot text.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            A programmatic text replacement means that the undo history will be cleared, and any attached editors will reset the caret to offset <c>0</c>.
            <para>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a set text operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.CreateTextChange(ActiproSoftware.Text.ITextChangeType)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </para></remarks><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SetText(ActiproSoftware.Text.ITextChangeType,System.String)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SetText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SetText(ActiproSoftware.Text.ITextChangeType,System.String)"><summary>
            Replaces all the text in the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot" />.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="text">The text to insert.  Pass an empty string to "clear" the snapshot text.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a set text operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.CreateTextChange(ActiproSoftware.Text.ITextChangeType)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.AppendText(ActiproSoftware.Text.ITextChangeType,System.String)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.DeleteText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.ReplaceText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,System.String)" /></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SetText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)"><summary>
            Replaces all the text in the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot" /> and allows for the specification of other options.
            </summary><param name="type">An <see cref="T:ActiproSoftware.Text.ITextChangeType" /> specifying the type of change.</param><param name="text">The text to insert.  Pass an empty string to "clear" the snapshot text.</param><param name="options">The <see cref="T:ActiproSoftware.Text.ITextChangeOptions" /> for the change.</param><returns><c>true</c> if a text change was allowed to occur; otherwise, <c>false</c>.
            </returns><remarks>
            This method creates an <see cref="T:ActiproSoftware.Text.ITextChange" /> for the current snapshot, adds a set text operation, and immediately applies it.
            If you will be executing multiple text change operations in a row, for improved performance it is recommended that 
            you call the <see cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.CreateTextChange(ActiproSoftware.Text.ITextChangeType,ActiproSoftware.Text.ITextChangeOptions)" /> method instead, add operations to the returned <see cref="T:ActiproSoftware.Text.ITextChange" />, 
            and then apply the text change.
            </remarks><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.AppendText(ActiproSoftware.Text.ITextChangeType,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.DeleteText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.InsertText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)" /><seealso cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.ReplaceText(ActiproSoftware.Text.ITextChangeType,System.Int32,System.Int32,System.String,ActiproSoftware.Text.ITextChangeOptions)" /></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.GetReadOnlyRegions(ActiproSoftware.Text.TextRange)"><summary>
            Returns the collection of read-only region tag snapshot ranges.
            </summary><param name="textRange">The text range relative to the current snapshot for which to locate read-only regions.</param><returns>The collection of read-only region tag snapshot ranges.</returns></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.IsTextRangeReadOnly(ActiproSoftware.Text.TextRange)"><summary>
            Returns whether any character in the specified <see cref="T:ActiproSoftware.Text.TextRange" /> is flagged as read-only.
            </summary><param name="textRange">The <see cref="T:ActiproSoftware.Text.TextRange" /> to examine.</param><returns><c>true</c> if any character in the specified <see cref="T:ActiproSoftware.Text.TextRange" /> is flagged as read-only; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.NotifyPropertyChanged(System.String)"><summary>
            Notifies that a property's value has changed.
            </summary><param name="name">The name of the property.</param></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.OnIsModifiedChanged(System.EventArgs)"><summary>
            Raises the <c>IsModifiedChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.OnIsReadOnlyChanged(System.EventArgs)"><summary>
            Raises the <c>IsReadOnlyChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.OnTabSizeChanged(System.EventArgs)"><summary>
            Raises the <c>TabSizeChanged</c> event.
            </summary><param name="e">An <c>EventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.ReplaceAll(ActiproSoftware.Text.Searching.ISearchOptions)"><summary>
            Performs a replace all operation in the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot" />.
            </summary><param name="options">The <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> to use.</param><returns>
            An <see cref="T:ActiproSoftware.Text.Searching.ISearchResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.ReplaceAll(ActiproSoftware.Text.Searching.ISearchOptions,ActiproSoftware.Text.TextRange[])"><summary>
            Performs a replace all operation in the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot" /> over a specific range of the snapshot.
            </summary><param name="options">The <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> to use.</param><param name="searchTextRanges">
            The <see cref="T:ActiproSoftware.Text.TextRange" /> array of offsets to search.
            If everything should be searched, specify the range <c>0</c> to the length of the document's current snapshot.
            </param><returns>
            An <see cref="T:ActiproSoftware.Text.Searching.ISearchResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.ReplaceNext(ActiproSoftware.Text.Searching.ISearchOptions,System.Int32,System.Boolean)"><summary>
            Performs a replace next operation in the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot" />.
            </summary><param name="options">The <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> to use.</param><param name="startOffset">The offset at which to start the search.</param><param name="canWrap">Whether the search can wrap at the end of the search text range.</param><returns>
            An <see cref="T:ActiproSoftware.Text.Searching.ISearchResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.ReplaceNext(ActiproSoftware.Text.Searching.ISearchOptions,System.Int32,System.Boolean,ActiproSoftware.Text.TextRange)"><summary>
            Performs a replace next operation in the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot" /> over a specific range of the snapshot.
            </summary><param name="options">The <see cref="T:ActiproSoftware.Text.Searching.ISearchOptions" /> to use.</param><param name="startOffset">The offset at which to start the search.</param><param name="canWrap">Whether the search can wrap at the end of the search text range.</param><param name="searchTextRange">
            The <see cref="T:ActiproSoftware.Text.TextRange" /> of offsets to search.
            If all should be searched, specify the range <c>0</c> to the length of the <see cref="T:ActiproSoftware.Text.ITextSnapshot" />.
            </param><returns>
            An <see cref="T:ActiproSoftware.Text.Searching.ISearchResultSet" /> that specifies the result of the operation.
            </returns></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.LoadFile(System.String)"><summary>
            Loads document text from a file, using the default UTF-8 character encoding.
            </summary><param name="path">The full path of the file from which to load.</param><returns>
            A <see cref="T:ActiproSoftware.Text.LineTerminator" /> indicating the line terminator of the file that was loaded.
            </returns><remarks>
            This method updates the value of the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.FileName" /> property.
            </remarks></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.LoadFile(System.String,System.Text.Encoding)"><summary>
            Loads document text from a file using the specified encoding.
            </summary><param name="path">The full path of the file from which to load.</param><param name="encoding">The <see cref="T:System.Text.Encoding" /> to use when loading the file.</param><returns>
            A <see cref="T:ActiproSoftware.Text.LineTerminator" /> indicating the line terminator of the file that was loaded.
            </returns><remarks>
            This method updates the value of the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.FileName" /> property.
            </remarks></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.LoadFile(System.IO.Stream,System.Text.Encoding)"><summary>
            Loads document text from a <see cref="T:System.IO.Stream" /> using the specified encoding.
            </summary><param name="stream">The <see cref="T:System.IO.Stream" /> from which to load.</param><param name="encoding">The <see cref="T:System.Text.Encoding" /> to use when loading the file.</param><returns>
            A <see cref="T:ActiproSoftware.Text.LineTerminator" /> indicating the line terminator of the file that was loaded.
            </returns></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.OnFileNameChanged(ActiproSoftware.Text.Utility.StringPropertyChangedEventArgs)"><summary>
            Raises the <c>FileNameChanged</c> event.
            </summary><param name="e">An <c>StringPropertyChangedEventArgs</c> that contains the event data.</param></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SaveFile(System.String,ActiproSoftware.Text.LineTerminator)"><summary>
            Saves document text to a UTF-8 encoded file.
            </summary><param name="path">The full path of the file of which to save.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.Text.LineTerminator" /> specifying the output format.</param><remarks>
            The <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.IsModified" /> property is set to <c>false</c> if the specified file path is the same as the
            <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.FileName" /> property's current value.
            </remarks></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SaveFile(System.String,System.Text.Encoding,ActiproSoftware.Text.LineTerminator)"><summary>
            Saves document text to a file using the specified encoding.
            </summary><param name="path">The full path of the file of which to save.</param><param name="encoding">The <see cref="T:System.Text.Encoding" /> to use when saving the file.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.Text.LineTerminator" /> specifying the output format.</param><remarks>
            The <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.IsModified" /> property is set to <c>false</c> if the specified file path is the same as the
            <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.FileName" /> property's current value.
            </remarks></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SaveFile(System.IO.Stream,System.Text.Encoding,ActiproSoftware.Text.LineTerminator)"><summary>
            Saves document text to a <see cref="T:System.IO.Stream" /> using the specified encoding.
            </summary><param name="stream">The <see cref="T:System.IO.Stream" /> to write to.</param><param name="encoding">The <see cref="T:System.Text.Encoding" /> to use when loading the file.</param><param name="lineTerminator">A <see cref="T:ActiproSoftware.Text.LineTerminator" /> specifying the output format.</param></member><member name="M:ActiproSoftware.Text.Implementation.TextDocumentBase.#ctor"><summary>
            Initializes a new instance of the <c>TextDocumentBase</c> class.
            </summary></member><member name="P:ActiproSoftware.Text.Implementation.TextDocumentBase.CurrentSnapshot"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that contains the current text of the document.
            </summary><value>The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> that contains the current text of the document.</value></member><member name="P:ActiproSoftware.Text.Implementation.TextDocumentBase.AutoCharacterCasing"><summary>
            Gets or sets how to modify the case of text that is inserted into the document.
            </summary><value>A <see cref="T:ActiproSoftware.Text.CharacterCasing" /> indicating the desired case of inserted text.</value></member><member name="P:ActiproSoftware.Text.Implementation.TextDocumentBase.AutoConvertTabsToSpaces"><summary>
            Gets or sets whether to convert tabs to spaces when the Tab key is pressed or indenting occurs.
            </summary><value><c>true</c> if tabs should be converted to spaces when the Tab key is pressed or indenting occurs; otherwise, <c>false</c>.
            The default value is <c>false</c>.
            </value><remarks>
            The number of spaces inserted is indicated by the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.TabSize" /> property.
            </remarks></member><member name="P:ActiproSoftware.Text.Implementation.TextDocumentBase.IsModified"><summary>
            Gets or sets whether the document has been modified.
            </summary><value><c>true</c> if the document has been modified; otherwise, <c>false</c>.
            </value><remarks>
            This flag is reset to <c>false</c> when the <see cref="N:ActiproSoftware.Text" /> property is set, or when a <see cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.SaveFile(System.String,ActiproSoftware.Text.LineTerminator)" />
            overload is used that accepts a path matching the current <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.FileName" /> property value.
            </remarks></member><member name="P:ActiproSoftware.Text.Implementation.TextDocumentBase.IsReadOnly"><summary>
            Gets or sets whether the entire document is flagged as read-only.
            </summary><value><c>true</c> if the entire document is flagged as read-only; otherwise, <c>false</c>.
            The default value is <c>false</c>.
            </value><remarks>
            When read-only, the document's contents should not be editable.
            </remarks></member><member name="P:ActiproSoftware.Text.Implementation.TextDocumentBase.TabSize"><summary>
            Gets or sets the distance in spaces between tab stops.
            </summary><value>
            The distance in spaces between tab stops.
            The default value is <c>4</c> spaces.
            </value></member><member name="P:ActiproSoftware.Text.Implementation.TextDocumentBase.UndoHistory"><summary>
            Gets an <see cref="T:ActiproSoftware.Text.Undo.IUndoHistory" /> that provides access to undo and redo functionality for the document.
            </summary><value>An <see cref="T:ActiproSoftware.Text.Undo.IUndoHistory" /> that provides access to undo and redo functionality for the document.</value></member><member name="P:ActiproSoftware.Text.Implementation.TextDocumentBase.FileName"><summary>
            Gets or sets the name of the file currently loaded in the document.
            </summary><value>The name of the file currently loaded in the document.</value><remarks>
            This property is automatically set whenever a <see cref="M:ActiproSoftware.Text.Implementation.TextDocumentBase.LoadFile(System.String)" /> overload is called that accepts a file path.
            </remarks></member><member name="E:ActiproSoftware.Text.Implementation.TextDocumentBase.TextChanged"><summary>
            Occurs after a text change occurs to this document.
            </summary><eventdata>
            The event handler receives an argument of type <c>TextSnapshotChangedEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.Implementation.TextDocumentBase.TextChanging"><summary>
            Occurs before a text change occurs to this document.
            </summary><eventdata>
            The event handler receives an argument of type <c>TextSnapshotChangingEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.Implementation.TextDocumentBase.IsModifiedChanged"><summary>
            Occurs after the value of the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.IsModified" /> property has changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.Implementation.TextDocumentBase.IsReadOnlyChanged"><summary>
            Occurs after the value of the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.IsReadOnly" /> property has changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.Implementation.TextDocumentBase.PropertyChanged"><summary>
            Occurs when a property value is changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>PropertyChangedEventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.Implementation.TextDocumentBase.TabSizeChanged"><summary>
            Occurs after the value of the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.TabSize" /> property has changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.
            </eventdata></member><member name="E:ActiproSoftware.Text.Implementation.TextDocumentBase.FileNameChanged"><summary>
            Occurs after the value of the <see cref="P:ActiproSoftware.Text.Implementation.TextDocumentBase.FileName" /> property has changed.
            </summary><eventdata>
            The event handler receives an argument of type <c>StringPropertyChangedEventArgs</c> containing data related to this event.
            </eventdata></member><member name="T:ActiproSoftware.Text.Implementation.TextStatistics"><summary>
            Provides numerous statistics such as line, word, character counts, and readability scores for text.
            </summary></member><member name="M:ActiproSoftware.Text.Implementation.TextStatistics.CreateStatistic(System.String,System.String,System.Object)"><summary>
            Creates an <see cref="T:ActiproSoftware.Text.ITextStatistic" /> with the specified key and value.
            </summary><param name="key">The key of the statistic.</param><param name="description">The description of the statistic, generally displayed in the user interface.</param><param name="value">The value of the statistic.</param><returns>The <see cref="T:ActiproSoftware.Text.ITextStatistic" /> that was created.</returns></member><member name="M:ActiproSoftware.Text.Implementation.TextStatistics.GetRawStatistics"><summary>
            Returns the list of <see cref="T:ActiproSoftware.Text.ITextStatistic" /> objects that contain the statistic results.
            </summary><returns>The list of <see cref="T:ActiproSoftware.Text.ITextStatistic" /> objects that contain the statistic results.</returns></member><member name="M:ActiproSoftware.Text.Implementation.TextStatistics.#ctor(System.String)"><summary>
            Initializes a new instance of the <c>TextStatistics</c> class. 
            </summary><param name="text">The text to examine and create statistics data.</param></member><member name="P:ActiproSoftware.Text.Implementation.TextStatistics.AverageLettersPerWord"><summary>
            Gets the average number of letters per word.
            </summary><value>The average number of letters per word.</value></member><member name="P:ActiproSoftware.Text.Implementation.TextStatistics.AverageSyllablesPerWord"><summary>
            Gets the average number of syllables per word.
            </summary><value>The average number of syllables per word.</value></member><member name="P:ActiproSoftware.Text.Implementation.TextStatistics.AverageWordsPerSentence"><summary>
            Gets the average number of words per sentence.
            </summary><value>The average number of words per sentence.</value></member><member name="P:ActiproSoftware.Text.Implementation.TextStatistics.Characters"><summary>
            Gets the number of characters in the text.
            </summary><value>The number of characters in the text.</value></member><member name="P:ActiproSoftware.Text.Implementation.TextStatistics.Consonants"><summary>
            Gets the number of consonants in the text.
            </summary><value>The number of consonants in the text.</value></member><member name="P:ActiproSoftware.Text.Implementation.TextStatistics.FleschKincaidGradeLevel"><summary>
            Gets the Flesch-Kincaid grade level, which indicates the number of years of education required to understand the text.
            </summary><remarks>
            A grade level of <c>7.1</c> indicates that an individual with about <c>7</c> years of education could understand the text.
            </remarks></member><member name="P:ActiproSoftware.Text.Implementation.TextStatistics.FleschReadingEaseScore"><summary>
            Gets the Flesch reading ease score in the range of <c>0</c> to <c>100</c>, which indicates how readable the text is.
            </summary><remarks>
            Scores of 90-100 are considered easily understandable by an average 5th grader. 
            Scores of 60-70 are considered easily understandable by 8th and 9th grade students.
            Scores of 0-30 are best understood by college graduates.
            </remarks></member><member name="P:ActiproSoftware.Text.Implementation.TextStatistics.Letters"><summary>
            Gets the number of letters in the text.
            </summary><value>The number of letters in the text.</value></member><member name="P:ActiproSoftware.Text.Implementation.TextStatistics.Lines"><summary>
            Gets the number of lines in the text.
            </summary><value>The number of lines in the text.</value></member><member name="P:ActiproSoftware.Text.Implementation.TextStatistics.NonWhitespaceCharacters"><summary>
            Gets the number of non-whitespace characters in the text.
            </summary><value>The number of non-whitespace characters in the text.</value></member><member name="P:ActiproSoftware.Text.Implementation.TextStatistics.NonWhitespaceLines"><summary>
            Gets the number of non-whitespace lines in the text.
            </summary><value>The number of non-whitespace lines in the text.</value></member><member name="P:ActiproSoftware.Text.Implementation.TextStatistics.Sentences"><summary>
            Gets the number of sentences in the text.
            </summary><value>The number of sentences in the text.</value></member><member name="P:ActiproSoftware.Text.Implementation.TextStatistics.Syllables"><summary>
            Gets the number of syllables in the text.
            </summary><value>The number of syllables in the text.</value></member><member name="P:ActiproSoftware.Text.Implementation.TextStatistics.Vowels"><summary>
            Gets the number of vowels in the text.
            </summary><value>The number of vowels in the text.</value></member><member name="P:ActiproSoftware.Text.Implementation.TextStatistics.WhitespaceCharacters"><summary>
            Gets the number of whitespace characters in the text.
            </summary><value>The number of whitespace characters in the text.</value></member><member name="P:ActiproSoftware.Text.Implementation.TextStatistics.WhitespaceLines"><summary>
            Gets the number of whitespace lines in the text.
            </summary><value>The number of whitespace lines in the text.</value></member><member name="P:ActiproSoftware.Text.Implementation.TextStatistics.Words"><summary>
            Gets the number of words in the text.
            </summary><value>The number of words in the text.</value></member><member name="T:ActiproSoftware.Text.Exporters.IHtmlTextExporter"><summary>
            Provides the base requirements for a class that can export text to <c>HTML</c> markup.
            </summary></member><member name="P:ActiproSoftware.Text.Exporters.IHtmlTextExporter.Title"><summary>
            Gets or sets the title for the exported <c>HTML</c>.
            </summary><value>The title for the exported <c>HTML</c>.</value></member><member name="T:ActiproSoftware.Text.Exporters.IRtfTextExporter"><summary>
            Provides the base requirements for a class that can export text to <c>RTF</c> markup.
            </summary></member><member name="P:ActiproSoftware.Text.Exporters.IRtfTextExporter.FontFamily"><summary>
            Gets or sets the font family name to use for the <c>RTF</c>.
            </summary><value>The font family name to use for the <c>RTF</c>.</value></member><member name="P:ActiproSoftware.Text.Exporters.IRtfTextExporter.FontSizeInPoints"><summary>
            Gets or sets the font size in points to use for the <c>RTF</c>.
            </summary><value>The font size in points to use for the <c>RTF</c>.</value></member><member name="T:ActiproSoftware.Text.Exporters.ITextExporter"><summary>
            Provides the base requirements for a class that can export text to some other format, such as HTML or RTF markup.
            </summary></member><member name="M:ActiproSoftware.Text.Exporters.ITextExporter.Export(ActiproSoftware.Text.ITextSnapshot,System.Collections.Generic.ICollection{ActiproSoftware.Text.TextRange})"><summary>
            Exports the specified <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> ranges to another text format.
            </summary><param name="snapshot">The <see cref="T:ActiproSoftware.Text.ITextSnapshot" /> from which to export.</param><param name="textRanges">The collection of text ranges in the snapshot for which to export.</param><returns>The string that was created to represent the text ranges.</returns></member><member name="P:ActiproSoftware.Text.Exporters.ITextExporter.DataFormat"><summary>
            Gets a string that describes the data format this exporter creates.
            </summary><value>A string that describes the data format this exporter creates.</value></member><member name="P:ActiproSoftware.Text.Exporters.ITextExporter.LineTerminator"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Text.LineTerminator" /> specifying the type of line terminators to use.
            </summary><value>The <see cref="T:ActiproSoftware.Text.LineTerminator" /> specifying the type of line terminators to use.</value></member><member name="T:ActiproSoftware.Text.Analysis.IAutoCorrector"><summary>
            Provides the base requirements for a class that can perform auto-correction.
            </summary><remarks>
            This interface type can be registered with an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> using the 
            <see cref="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService(System.Object,System.Object)" /> method.
            Once an object that implements this interface is registered with the language for this interface type, its features can be used by the language.
            </remarks></member><member name="M:ActiproSoftware.Text.Analysis.IAutoCorrector.AutoCorrect(ActiproSoftware.Text.TextSnapshotRange)"><summary>
            Auto-corrects over the specified <see cref="T:ActiproSoftware.Text.TextSnapshotRange" />.
            </summary><param name="snapshotRange">The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> to examine.</param></member><member name="T:ActiproSoftware.Text.Analysis.ICodeBlockFinder"><summary>
            Provides the base requirements for a class that can find containing code blocks, generally used for code block selection expansion in an editor.
            </summary><remarks>
            This interface type can be registered with an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> using the 
            <see cref="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService(System.Object,System.Object)" /> method.
            Once an object that implements this interface is registered with the language for this interface type, its features can be used by the language.
            </remarks></member><member name="M:ActiproSoftware.Text.Analysis.ICodeBlockFinder.FindContaining(ActiproSoftware.Text.TextSnapshotRange)"><summary>
            Returns the <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> of the containing code block.
            </summary><param name="snapshotRange">The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> from which to begin the search.</param><returns>The <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> of the containing code block.</returns></member><member name="T:ActiproSoftware.Text.Analysis.IDelimiterAutoCompleter"><summary>
            Provides the base requirements for a class that can perform delimiter auto-completion.
            </summary><remarks>
            This interface type can be registered with an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> using the 
            <see cref="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService(System.Object,System.Object)" /> method.
            Once an object that implements this interface is registered with the language for this interface type, its features can be used by the language.
            </remarks></member><member name="P:ActiproSoftware.Text.Analysis.IDelimiterAutoCompleter.CanCompleteAngleBraces"><summary>
            Gets or sets whether angle braces can be completed.
            </summary><value><c>true</c> if angle braces can be completed; otherwise, <c>false</c>.
            The default value is <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Analysis.IDelimiterAutoCompleter.CanCompleteCurlyBraces"><summary>
            Gets or sets whether curly braces can be completed.
            </summary><value><c>true</c> if curly braces can be completed; otherwise, <c>false</c>.
            The default value is <c>true</c>.
            </value></member><member name="P:ActiproSoftware.Text.Analysis.IDelimiterAutoCompleter.CanCompleteParentheses"><summary>
            Gets or sets whether parentheses can be completed.
            </summary><value><c>true</c> if parentheses can be completed; otherwise, <c>false</c>.
            The default value is <c>true</c>.
            </value></member><member name="P:ActiproSoftware.Text.Analysis.IDelimiterAutoCompleter.CanCompleteSquareBraces"><summary>
            Gets or sets whether square braces can be completed.
            </summary><value><c>true</c> if square braces can be completed; otherwise, <c>false</c>.
            The default value is <c>true</c>.
            </value></member><member name="T:ActiproSoftware.Text.Analysis.IStructureMatcher"><summary>
            Provides the base requirements for a class that can locate matching structural text ranges for an offset, such as finding matching brackets.
            </summary><remarks>
            This interface type can be registered with an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> using the 
            <see cref="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService(System.Object,System.Object)" /> method.
            Once an object that implements this interface is registered with the language for this interface type, its features can be used by the language.
            </remarks></member><member name="M:ActiproSoftware.Text.Analysis.IStructureMatcher.Match(ActiproSoftware.Text.TextSnapshotOffset,ActiproSoftware.Text.Analysis.IStructureMatchOptions)"><summary>
            Attempts to locate structural text, such as bracket pairs, at the specified offset.
            </summary><param name="snapshotOffset">The <see cref="T:ActiproSoftware.Text.TextSnapshotOffset" /> to examine.</param><param name="options">The <see cref="T:ActiproSoftware.Text.Analysis.IStructureMatchOptions" /> to use.</param><returns>An <see cref="T:ActiproSoftware.Text.Analysis.IStructureMatchResultSet" /> that contains the results that were found, if any.</returns><remarks>
            When the result set is empty, no structural delimiter was next to the specified offset.
            When the result set contains a single result, a structural delimiter such as a bracket was found next to the specified offset, 
            but no matching structural delimiter was found.
            The result set may contain multiple entries in cases such as when a language wishes to flag <c>#if...#else...#endif</c> blocks as a structure.
            </remarks></member><member name="T:ActiproSoftware.Text.Analysis.IStructureMatchOptions"><summary>
            Provides the base requirements for a class that stores options for a structure match operation.
            </summary></member><member name="P:ActiproSoftware.Text.Analysis.IStructureMatchOptions.IsNavigationRequest"><summary>
            Gets or sets whether the structure match is being performed for a navigation request.
            </summary><value><c>true</c> if the structure match is being performed for a navigation request; otherwise, <c>false</c>.
            </value><remarks>
            When the operating is being performed for a navigation request, the match algorithm may want to 
            be more liberal with its match algorithm.
            </remarks></member><member name="T:ActiproSoftware.Text.Analysis.IStructureMatchResult"><summary>
            Provides the base requirements for a class that stores a single result of a structure match operation.
            </summary></member><member name="P:ActiproSoftware.Text.Analysis.IStructureMatchResult.MatchEdges"><summary>
            Gets which edges of a <see cref="T:ActiproSoftware.Text.Analysis.IStructureMatchResult" />'s range can cause the <see cref="T:ActiproSoftware.Text.Analysis.IStructureMatcher" /> to match the result again.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Analysis.StructureMatchEdges" /> that specifies the valid edges.</value></member><member name="P:ActiproSoftware.Text.Analysis.IStructureMatchResult.IsSource"><summary>
            Gets whether this result is the match that occurred from the source offset.
            </summary><value><c>true</c> if the result is the match that occurred from the source offset; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Analysis.IStructureMatchResult.NavigationSnapshotOffset"><summary>
            Gets the <see cref="T:ActiproSoftware.Text.TextSnapshotOffset" /> to navigate for the match, if one is available.
            </summary><value>The <see cref="T:ActiproSoftware.Text.TextSnapshotOffset" /> to navigate for the match, if one is available.</value></member><member name="P:ActiproSoftware.Text.Analysis.IStructureMatchResult.SnapshotRange"><summary>
            Gets a <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> indicating the offset range of the match.
            </summary><value>A <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> indicating the offset range of the match.</value></member><member name="T:ActiproSoftware.Text.Analysis.IStructureMatchResultCollection"><summary>
            Provides the base requirements for a collection of <see cref="T:ActiproSoftware.Text.Analysis.IStructureMatchResult" /> objects.
            </summary></member><member name="T:ActiproSoftware.Text.Analysis.IStructureMatchResultSet"><summary>
            Provides the base requirements for a class that stores the results of a structure match operation.
            </summary></member><member name="P:ActiproSoftware.Text.Analysis.IStructureMatchResultSet.Results"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.Text.Analysis.IStructureMatchResult" /> objects.
            </summary><value>The collection of <see cref="T:ActiproSoftware.Text.Analysis.IStructureMatchResult" /> objects.</value></member><member name="T:ActiproSoftware.Text.Analysis.StructureMatchEdges"><summary>
            Specifies which edges of a <see cref="T:ActiproSoftware.Text.Analysis.IStructureMatchResult" />'s range can cause the <see cref="T:ActiproSoftware.Text.Analysis.IStructureMatcher" /> to match the result again.
            </summary></member><member name="F:ActiproSoftware.Text.Analysis.StructureMatchEdges.None"><summary>
            Only the inside of the match result range can cause the matcher to match the result again; no outer edges will match.
            </summary></member><member name="F:ActiproSoftware.Text.Analysis.StructureMatchEdges.Start"><summary>
            Only the start offset of the match result's range can cause the matcher to match the result again.
            </summary></member><member name="F:ActiproSoftware.Text.Analysis.StructureMatchEdges.End"><summary>
            Only the end offset of the match result's range can cause the matcher to match the result again.
            </summary></member><member name="F:ActiproSoftware.Text.Analysis.StructureMatchEdges.Both"><summary>
            Both the match result range's start and end offsets can cause the matcher to match the result again.
            </summary></member><member name="T:ActiproSoftware.Text.Analysis.Implementation.StructureMatcher"><summary>
            Represents a default implementation of an <see cref="T:ActiproSoftware.Text.Analysis.IStructureMatcher" /> that is capable of matching common bracket delimiters.
            </summary><remarks>
            Instances of this object can be registered with an <see cref="T:ActiproSoftware.Text.ISyntaxLanguage" /> using the 
            <see cref="M:ActiproSoftware.Text.Utility.IServiceLocator.RegisterService(System.Object,System.Object)" /> method.
            Once an instance is registered with the language for the <see cref="T:ActiproSoftware.Text.Analysis.IStructureMatcher" /> interface type, its features can be used by the language.
            </remarks></member><member name="M:ActiproSoftware.Text.Analysis.Implementation.StructureMatcher.Match(ActiproSoftware.Text.TextSnapshotOffset,ActiproSoftware.Text.Analysis.IStructureMatchOptions)"><summary>
            Attempts to locate structural text, such as bracket pairs, at the specified offset.
            </summary><param name="snapshotOffset">The <see cref="T:ActiproSoftware.Text.TextSnapshotOffset" /> to examine.</param><param name="options">The <see cref="T:ActiproSoftware.Text.Analysis.IStructureMatchOptions" /> to use.</param><returns>An <see cref="T:ActiproSoftware.Text.Analysis.IStructureMatchResultSet" /> that contains the results that were found, if any.</returns><remarks>
            When the result set is empty, no structural delimiter was next to the specified offset.
            When the result set contains a single result, a structural delimiter such as a bracket was found next to the specified offset, 
            but no matching structural delimiter was found.
            The result set may contain multiple entries in cases such as when a language wishes to flag <c>#if...#else...#endif</c> blocks as a structure.
            </remarks></member><member name="M:ActiproSoftware.Text.Analysis.Implementation.StructureMatcher.#ctor"><summary>
            Initializes a new instance of the <c>StructureMatcher</c> class.
            </summary></member><member name="P:ActiproSoftware.Text.Analysis.Implementation.StructureMatcher.CanMatchAngleBraces"><summary>
            Gets or sets whether angle braces can be matched.
            </summary><value><c>true</c> if angle braces can be matched; otherwise, <c>false</c>.
            The default value is <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Analysis.Implementation.StructureMatcher.CanMatchCurlyBraces"><summary>
            Gets or sets whether curly braces can be matched.
            </summary><value><c>true</c> if curly braces can be matched; otherwise, <c>false</c>.
            The default value is <c>true</c>.
            </value></member><member name="P:ActiproSoftware.Text.Analysis.Implementation.StructureMatcher.CanMatchParentheses"><summary>
            Gets or sets whether parentheses can be matched.
            </summary><value><c>true</c> if parentheses can be matched; otherwise, <c>false</c>.
            The default value is <c>true</c>.
            </value></member><member name="P:ActiproSoftware.Text.Analysis.Implementation.StructureMatcher.CanMatchSquareBraces"><summary>
            Gets or sets whether square braces can be matched.
            </summary><value><c>true</c> if square braces can be matched; otherwise, <c>false</c>.
            The default value is <c>true</c>.
            </value></member><member name="P:ActiproSoftware.Text.Analysis.Implementation.StructureMatcher.CloseAngleBraceTokenId"><summary>
            Gets the optional token ID value used to ensure that a close angle brace character is valid for structure matching.
            </summary><value>
            The optional token ID value used to ensure that a close angle brace character is valid for structure matching.
            </value><remarks>
            Leave the value <see langword="null" /> if token validation is not required for angle braces.
            </remarks></member><member name="P:ActiproSoftware.Text.Analysis.Implementation.StructureMatcher.CloseCurlyBraceTokenId"><summary>
            Gets the optional token ID value used to ensure that a close curly brace character is valid for structure matching.
            </summary><value>
            The optional token ID value used to ensure that a close curly brace character is valid for structure matching.
            </value><remarks>
            Leave the value <see langword="null" /> if token validation is not required for curly braces.
            </remarks></member><member name="P:ActiproSoftware.Text.Analysis.Implementation.StructureMatcher.CloseParenthesisTokenId"><summary>
            Gets the optional token ID value used to ensure that a close parenthesis character is valid for structure matching.
            </summary><value>
            The optional token ID value used to ensure that a close parenthesis character is valid for structure matching.
            </value><remarks>
            Leave the value <see langword="null" /> if token validation is not required for parentheses.
            </remarks></member><member name="P:ActiproSoftware.Text.Analysis.Implementation.StructureMatcher.CloseSquareBraceTokenId"><summary>
            Gets the optional token ID value used to ensure that a close square brace character is valid for structure matching.
            </summary><value>
            The optional token ID value used to ensure that a close square brace character is valid for structure matching.
            </value><remarks>
            Leave the value <see langword="null" /> if token validation is not required for square braces.
            </remarks></member><member name="P:ActiproSoftware.Text.Analysis.Implementation.StructureMatcher.OpenAngleBraceTokenId"><summary>
            Gets the optional token ID value used to ensure that an open angle brace character is valid for structure matching.
            </summary><value>
            The optional token ID value used to ensure that an open angle brace character is valid for structure matching.
            </value><remarks>
            Leave the value <see langword="null" /> if token validation is not required for angle braces.
            </remarks></member><member name="P:ActiproSoftware.Text.Analysis.Implementation.StructureMatcher.OpenCurlyBraceTokenId"><summary>
            Gets the optional token ID value used to ensure that an open curly brace character is valid for structure matching.
            </summary><value>
            The optional token ID value used to ensure that an open curly brace character is valid for structure matching.
            </value><remarks>
            Leave the value <see langword="null" /> if token validation is not required for curly braces.
            </remarks></member><member name="P:ActiproSoftware.Text.Analysis.Implementation.StructureMatcher.OpenParenthesisTokenId"><summary>
            Gets the optional token ID value used to ensure that an open parenthesis character is valid for structure matching.
            </summary><value>
            The optional token ID value used to ensure that an open parenthesis character is valid for structure matching.
            </value><remarks>
            Leave the value <see langword="null" /> if token validation is not required for parentheses.
            </remarks></member><member name="P:ActiproSoftware.Text.Analysis.Implementation.StructureMatcher.OpenSquareBraceTokenId"><summary>
            Gets the optional token ID value used to ensure that an open square brace character is valid for structure matching.
            </summary><value>
            The optional token ID value used to ensure that an open square brace character is valid for structure matching.
            </value><remarks>
            Leave the value <see langword="null" /> if token validation is not required for square braces.
            </remarks></member><member name="T:ActiproSoftware.Text.Analysis.Implementation.StructureMatchOptions"><summary>
            Represents options for a structure match operation.
            </summary></member><member name="P:ActiproSoftware.Text.Analysis.Implementation.StructureMatchOptions.IsNavigationRequest"><summary>
            Gets or sets whether the structure match is being performed for a navigation request.
            </summary><value><c>true</c> if the structure match is being performed for a navigation request; otherwise, <c>false</c>.
            </value><remarks>
            When the operating is being performed for a navigation request, the match algorithm may want to 
            be more liberal with its match algorithm.
            </remarks></member><member name="T:ActiproSoftware.Text.Analysis.Implementation.StructureMatchResult"><summary>
            Stores a single result of a structure match operation.
            </summary></member><member name="M:ActiproSoftware.Text.Analysis.Implementation.StructureMatchResult.#ctor(ActiproSoftware.Text.TextSnapshotRange)"><summary>
            Initializes a new instance of the <c>StructureMatchResult</c> class.
            </summary><param name="snapshotRange">A <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> indicating the offset range of the match.</param></member><member name="P:ActiproSoftware.Text.Analysis.Implementation.StructureMatchResult.MatchEdges"><summary>
            Gets or sets which edges of a <see cref="T:ActiproSoftware.Text.Analysis.IStructureMatchResult" />'s range can cause the <see cref="T:ActiproSoftware.Text.Analysis.IStructureMatcher" /> to match the result again.
            </summary><value>A <see cref="T:ActiproSoftware.Text.Analysis.StructureMatchEdges" /> that specifies the valid edges.</value></member><member name="P:ActiproSoftware.Text.Analysis.Implementation.StructureMatchResult.IsSource"><summary>
            Gets or sets whether this result is the match that occurred from the source offset.
            </summary><value><c>true</c> if the result is the match that occurred from the source offset; otherwise, <c>false</c>.
            </value></member><member name="P:ActiproSoftware.Text.Analysis.Implementation.StructureMatchResult.NavigationSnapshotOffset"><summary>
            Gets or sets the <see cref="T:ActiproSoftware.Text.TextSnapshotOffset" /> to navigate for the match, if one is available.
            </summary><value>The <see cref="T:ActiproSoftware.Text.TextSnapshotOffset" /> to navigate for the match, if one is available.</value></member><member name="P:ActiproSoftware.Text.Analysis.Implementation.StructureMatchResult.SnapshotRange"><summary>
            Gets or sets a <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> indicating the offset range of the match.
            </summary><value>A <see cref="T:ActiproSoftware.Text.TextSnapshotRange" /> indicating the offset range of the match.</value></member><member name="T:ActiproSoftware.Text.Analysis.Implementation.StructureMatchResultCollection"><summary>
            Represents a collection of an <see cref="T:ActiproSoftware.Text.Analysis.IStructureMatchResult" /> objects.
            </summary></member><member name="P:ActiproSoftware.Text.Analysis.Implementation.StructureMatchResultCollection.IsReadOnly"><summary>
            Gets whether the collection is allowed to be modified.
            </summary><value><c>true</c> if the collection is allowed to be modified; otherwise, <c>false</c>.
            </value></member><member name="T:ActiproSoftware.Text.Analysis.Implementation.StructureMatchResultSet"><summary>
            Stores the results of a structure match operation.
            </summary></member><member name="M:ActiproSoftware.Text.Analysis.Implementation.StructureMatchResultSet.#ctor(ActiproSoftware.Text.Analysis.IStructureMatchResultCollection)"><summary>
            Initializes a new instance of the <c>StructureMatchResultSet</c> class.
            </summary><param name="results">The collection of <see cref="T:ActiproSoftware.Text.Analysis.IStructureMatchResult" /> objects.</param></member><member name="P:ActiproSoftware.Text.Analysis.Implementation.StructureMatchResultSet.Results"><summary>
            Gets the collection of <see cref="T:ActiproSoftware.Text.Analysis.IStructureMatchResult" /> objects.
            </summary><value>The collection of <see cref="T:ActiproSoftware.Text.Analysis.IStructureMatchResult" /> objects.</value></member><member name="T:ActiproSoftware.Products.Text.Resources"><summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ResourceManager"><summary>
              Returns the cached ResourceManager instance used by this class.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.Culture"><summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExAutoCorrectNotPermittedWithRegex"><summary>
              Looks up a localized string similar to A CaseSensitivity setting of 'AutoCorrect' is not permitted on regex lexical pattern groups..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExEnumerationEnded"><summary>
              Looks up a localized string similar to The enumeration has ended..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExEnumerationNotStarted"><summary>
              Looks up a localized string similar to The enumeration has not been started..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExIntervalsDoNotIntersect"><summary>
              Looks up a localized string similar to Intervals don't intersect..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExInvalidDynamicLexerLexicalStateType"><summary>
              Looks up a localized string similar to An IDynamicLexer can only contain lexical states of type DynamicLexicalState..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExInvalidDynamicLexicalMacroRegex"><summary>
              Looks up a localized string similar to Invalid regular expression in DynamicLexicalMacro '{0}' with pattern '{1}'..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExInvalidDynamicLexicalPatternGroupLookAheadRegex"><summary>
              Looks up a localized string similar to Invalid regular expression in DynamicLexicalPatternGroup for token '{0}' in the look-ahead pattern '{1}'..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExInvalidDynamicLexicalPatternGroupLookBehindRegex"><summary>
              Looks up a localized string similar to Invalid regular expression in DynamicLexicalPatternGroup for token '{0}' in the look-behind pattern '{1}'..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExInvalidDynamicLexicalPatternGroupRegex"><summary>
              Looks up a localized string similar to Invalid regular expression in DynamicLexicalPatternGroup for token '{0}' in the pattern '{1}'..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExInvalidEncodedCharacter"><summary>
              Looks up a localized string similar to Invalid encoded character specification..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExInvalidMacroKey"><summary>
              Looks up a localized string similar to The macro '{0}' is not defined..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExInvalidOffsetLength"><summary>
              Looks up a localized string similar to Invalid offset and length..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExInvalidParameterType"><summary>
              Looks up a localized string similar to Parameter must be of type {0}..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExInvalidRegexNodeType"><summary>
              Looks up a localized string similar to The regular expression encountered an unhandled node type '{0}'..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExInvalidRegexOpCode"><summary>
              Looks up a localized string similar to Op code '{0}' not implemented..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExInvalidUnicodeCategoryName"><summary>
              Looks up a localized string similar to Invalid Unicode category name..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExInvalidWalkerTreeStateMovingToNextLeaf"><summary>
              Looks up a localized string similar to Invalid walker tree state while moving to the next leaf..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExInvalidWalkerTreeStateMovingToPreviousLeaf"><summary>
              Looks up a localized string similar to Invalid walker tree state while moving to the previous leaf..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExNoDefaultLexicalState"><summary>
              Looks up a localized string similar to The language's lexer doesn't define a default lexical state..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExNoFindText"><summary>
              Looks up a localized string similar to No find text was specified..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExNoMergableLexer"><summary>
              Looks up a localized string similar to The document's language doesn't have a IMergableLexer available..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExNoMergableToken"><summary>
              Looks up a localized string similar to The lexer '{0}' did not return an IMergableToken instance..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExParseRequestNoParser"><summary>
              Looks up a localized string similar to The IParseRequest did not specify an IParser..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExReaderClosed"><summary>
              Looks up a localized string similar to The reader has already been closed..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExReadOnlyCollection"><summary>
              Looks up a localized string similar to The collection is read-only and cannot be modified..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExRegexParserEmptyQuotedString"><summary>
              Looks up a localized string similar to Unquoted string did not contain any characters..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExRegexParserInvalidRangeCharacter"><summary>
              Looks up a localized string similar to An invalid character '{0}' was found in a range specification..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExRegexParserInvalidSubstitutionGroupNumber"><summary>
              Looks up a localized string similar to Invalid substitution group number..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExRegexParserNoLeftExpressionForBarOperand"><summary>
              Looks up a localized string similar to No left expression for operand |..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExRegexParserNoRangeMinimum"><summary>
              Looks up a localized string similar to A valid minimum must be indicated for a range specification..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExRegexParserNoRegularExpression"><summary>
              Looks up a localized string similar to No regular expression was located..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExRegexParserOpenCurlyBraceExpected"><summary>
              Looks up a localized string similar to '{' character expected..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExRegexParserUnexpectedCharClassEnd"><summary>
              Looks up a localized string similar to Unexpected end in regular expression character class..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExRegexParserUnexpectedGroupingConstructEnd"><summary>
              Looks up a localized string similar to Unexpected end in regular expression advanced grouping construct..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExRegexParserUnexpectedLookBehindConstructEnd"><summary>
              Looks up a localized string similar to Unexpected end in regular expression look-behind construct..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExRegexParserUnexpectedMacroReferenceEnd"><summary>
              Looks up a localized string similar to Unexpected end in regular expression macro reference..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExRegexParserUnexpectedQuotedStringEnd"><summary>
              Looks up a localized string similar to Unexpected end in regular expression quoted string..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExRegexParserUnknownGroupingConstruct"><summary>
              Looks up a localized string similar to Unknown regular expression advanced grouping construct..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExStartOffsetNotInSearchRange"><summary>
              Looks up a localized string similar to The start offset must be within the search text range..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExTabSizeMinimum"><summary>
              Looks up a localized string similar to The tab size must be at least 1..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExTaggerConstructorNotFound"><summary>
              Looks up a localized string similar to A public constructor that accepts a single ICodeDocument instance parameter on the tagger type '{0}' was not found..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExTaggerConstructorUnableToLoad"><summary>
              Looks up a localized string similar to A public constructor that accepts a single ICodeDocument instance parameter on the tagger type '{0}' was unable to be loaded..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExTextChangeOffsetDeltaSequentialOnlyInvalidOperation"><summary>
              Looks up a localized string similar to Since the TextChangeOffsetDelta.SequentialOnly option is set, no operation may occur at a start offset before any previously-added operation within this text change..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExTextChangeOperationRequired"><summary>
              Looks up a localized string similar to Operation must be of type TextChangeOperation..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExTextChangeRequiresOneOperation"><summary>
              Looks up a localized string similar to The ITextChange must contain at least one operation..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExTextSnapshotRangeDeleted"><summary>
              Looks up a localized string similar to The specified TextSnapshotRange cannot be deleted..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExTextSnapshotRangeSnapshotMismatch"><summary>
              Looks up a localized string similar to TextSnapshotRange objects must reference the same snapshot..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExTextSnapshotRequiresCodeDocument"><summary>
              Looks up a localized string similar to The specified ITextSnapshot must be for an ICodeDocument..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExTextSnapshotRequiresTextDocumentBase"><summary>
              Looks up a localized string similar to The snapshot must point to a TextDocumentBase implementation..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.ExTextVersionDocumentMismatch"><summary>
              Looks up a localized string similar to Both versions must reference the same ITextDocument..
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UIClassificationTypeComment"><summary>
              Looks up a localized string similar to Comment.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UIClassificationTypeCompilerError"><summary>
              Looks up a localized string similar to Compiler Error.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UIClassificationTypeIdentifier"><summary>
              Looks up a localized string similar to Identifier.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UIClassificationTypeKeyword"><summary>
              Looks up a localized string similar to Keyword.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UIClassificationTypeNumber"><summary>
              Looks up a localized string similar to Number.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UIClassificationTypeOtherError"><summary>
              Looks up a localized string similar to Other Error.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UIClassificationTypePreprocessorKeyword"><summary>
              Looks up a localized string similar to Preprocessor Keyword.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UIClassificationTypeReadOnlyRegion"><summary>
              Looks up a localized string similar to Read-Only Region.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UIClassificationTypeString"><summary>
              Looks up a localized string similar to String.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UIClassificationTypeSyntaxError"><summary>
              Looks up a localized string similar to Syntax Error.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UIClassificationTypeWarning"><summary>
              Looks up a localized string similar to Warning.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UILanguageKeyPlainText"><summary>
              Looks up a localized string similar to Plain text.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UISearchOperationTypeFindAll"><summary>
              Looks up a localized string similar to Find all.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UISearchOperationTypeFindNext"><summary>
              Looks up a localized string similar to Find next.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UISearchOperationTypeReplaceAll"><summary>
              Looks up a localized string similar to Replace all.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UISearchOperationTypeReplaceNext"><summary>
              Looks up a localized string similar to Replace next.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UISearchPatternProviderAcronym"><summary>
              Looks up a localized string similar to Acronym.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UISearchPatternProviderNormal"><summary>
              Looks up a localized string similar to Normal.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UISearchPatternProviderRegularExpression"><summary>
              Looks up a localized string similar to Regular expression.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UISearchPatternProviderShorthand"><summary>
              Looks up a localized string similar to Shorthand.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UISearchPatternProviderWildcard"><summary>
              Looks up a localized string similar to Wildcard.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UISearchResultWrapped"><summary>
              Looks up a localized string similar to (wrapped).
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeAutoComplete"><summary>
              Looks up a localized string similar to Auto-complete.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeAutoCorrect"><summary>
              Looks up a localized string similar to Auto-correct.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeAutoFormat"><summary>
              Looks up a localized string similar to Auto-format.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeAutoIndent"><summary>
              Looks up a localized string similar to Auto-indent.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeAutoReplace"><summary>
              Looks up a localized string similar to Auto-replace.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeBackspace"><summary>
              Looks up a localized string similar to Backspace.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeChangeCase"><summary>
              Looks up a localized string similar to Change case.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeCommentLines"><summary>
              Looks up a localized string similar to Comment lines.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeConvertSpacesToTabs"><summary>
              Looks up a localized string similar to Convert spaces to tabs.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeConvertTabsToSpaces"><summary>
              Looks up a localized string similar to Convert tabs to spaces.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeCustom"><summary>
              Looks up a localized string similar to Custom.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeCut"><summary>
              Looks up a localized string similar to Cut.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeDelete"><summary>
              Looks up a localized string similar to Delete.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeDragAndDrop"><summary>
              Looks up a localized string similar to Drag/drop.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeDuplicate"><summary>
              Looks up a localized string similar to Duplicate.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeEnter"><summary>
              Looks up a localized string similar to Enter.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeHeaderAndFooterChange"><summary>
              Looks up a localized string similar to Header/footer change.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeIndent"><summary>
              Looks up a localized string similar to Indent.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeInsertCodeSnippetTemplate"><summary>
              Looks up a localized string similar to Insert snippet template.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeInsertFile"><summary>
              Looks up a localized string similar to Insert file.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeMoveSelectedLinesDown"><summary>
              Looks up a localized string similar to Move selected lines down.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeMoveSelectedLinesUp"><summary>
              Looks up a localized string similar to Move selected lines up.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeOpenLine"><summary>
              Looks up a localized string similar to Open line.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeOutdent"><summary>
              Looks up a localized string similar to Outdent.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypePaste"><summary>
              Looks up a localized string similar to Paste.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeReplace"><summary>
              Looks up a localized string similar to Replace.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeReplaceAll"><summary>
              Looks up a localized string similar to Replace all.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeSpellingChange"><summary>
              Looks up a localized string similar to Spelling change.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeTextReplacement"><summary>
              Looks up a localized string similar to Text replacement.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeToggleCase"><summary>
              Looks up a localized string similar to Toggle case.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeTransposeCharacters"><summary>
              Looks up a localized string similar to Transpose characters.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeTransposeLines"><summary>
              Looks up a localized string similar to Transpose lines.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeTransposeWords"><summary>
              Looks up a localized string similar to Transpose words.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeTrimTrailingWhitespace"><summary>
              Looks up a localized string similar to Trim trailing whitespace.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeTyping"><summary>
              Looks up a localized string similar to Typing.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeUncommentLines"><summary>
              Looks up a localized string similar to Uncomment lines.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextChangeTypeUpdateCodeSnippetTemplateFields"><summary>
              Looks up a localized string similar to Update template fields.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextStatisticAverageLettersPerWord"><summary>
              Looks up a localized string similar to Average Letters / Word.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextStatisticAverageSyllablesPerWord"><summary>
              Looks up a localized string similar to Average Syllables / Word.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextStatisticAverageWordsPerSentence"><summary>
              Looks up a localized string similar to Average Words / Sentence.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextStatisticCharacters"><summary>
              Looks up a localized string similar to Characters.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextStatisticConsonants"><summary>
              Looks up a localized string similar to Consonants.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextStatisticFleschKincaidGradeLevel"><summary>
              Looks up a localized string similar to Flesch-Kincaid Grade Level.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextStatisticFleschReadingEaseScore"><summary>
              Looks up a localized string similar to Flesch Reading Ease Score (0-100).
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextStatisticLetters"><summary>
              Looks up a localized string similar to Letters.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextStatisticLines"><summary>
              Looks up a localized string similar to Lines.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextStatisticNonWhitespaceCharacters"><summary>
              Looks up a localized string similar to Characters (non-whitespace).
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextStatisticNonWhitespaceLines"><summary>
              Looks up a localized string similar to Lines (non-whitespace).
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextStatisticSentences"><summary>
              Looks up a localized string similar to Sentences.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextStatisticSyllables"><summary>
              Looks up a localized string similar to Syllables.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextStatisticVowels"><summary>
              Looks up a localized string similar to Vowels.
            </summary></member><member name="P:ActiproSoftware.Products.Text.Resources.UITextStatisticWords"><summary>
              Looks up a localized string similar to Words.
            </summary></member><member name="T:ActiproSoftware.Products.Text.SR"><summary>
            Provides access to the string resources of this assembly, also allowing for their customization.
            </summary><remarks>
            Call the <see cref="M:ActiproSoftware.Products.Text.SR.GetString(System.String)" /> method to return a resolved resource string.
            If a custom string has been set for a specified string resource name, it will be returned.
            Otherwise, the default string resource value is returned.
            <para>
            If any of the resource strings are customized via a call to <see cref="M:ActiproSoftware.Products.Text.SR.SetCustomString(System.String,System.String)" />,
            it is best to do so before any other classes in this assembly are referenced,
            such as in the application startup.
            </para></remarks></member><member name="M:ActiproSoftware.Products.Text.SR.ClearCustomStrings"><summary>
            Removes all custom strings.
            </summary></member><member name="M:ActiproSoftware.Products.Text.SR.ContainsCustomString(System.String)"><summary>
            Returns whether a custom string is defined for the specified string resource.
            </summary><param name="name">The name of the resource for which to search.</param><returns><c>true</c> if a custom string is defined for the specified string resource; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Products.Text.SR.GetCustomString(System.String)"><summary>
            Returns custom string that is stored for the specified string resource, if any.
            </summary><param name="name">The name of the resource to get.</param><returns>The custom string that is stored for the specified string resource, if any.</returns></member><member name="M:ActiproSoftware.Products.Text.SR.GetString(System.String)"><summary>
            Returns the resolved value of the specified string resource.
            </summary><param name="name">The name of the resource to get.</param><returns>
            The value of the resource localized for the caller's current culture settings. 
            If a best match is not possible, <see langword="null" /> is returned.
            </returns></member><member name="M:ActiproSoftware.Products.Text.SR.GetString(ActiproSoftware.Products.Text.SRName)"><summary>
            Returns the resolved value of the specified string resource.
            </summary><param name="name">The name of the resource to get.</param><returns>
            The value of the resource localized for the caller's current culture settings. 
            If a best match is not possible, <see langword="null" /> is returned.
            </returns></member><member name="M:ActiproSoftware.Products.Text.SR.GetString(System.String,System.Object[])"><summary>
            Returns the resolved value of the specified string resource, by calling <c>String.Format</c> using supplied arguments.
            </summary><param name="name">The name of the resource to get.</param><param name="args">The arguments to pass to <c>String.Format</c>.</param><returns>
            The value of the resource localized for the caller's current culture settings. 
            If a best match is not possible, <see langword="null" /> is returned.
            </returns></member><member name="M:ActiproSoftware.Products.Text.SR.GetString(ActiproSoftware.Products.Text.SRName,System.Object[])"><summary>
            Returns the resolved value of the specified string resource, by calling <c>String.Format</c> using supplied arguments.
            </summary><param name="name">The name of the resource to get.</param><param name="args">The arguments to pass to <c>String.Format</c>.</param><returns>
            The value of the resource localized for the caller's current culture settings. 
            If a best match is not possible, <see langword="null" /> is returned.
            </returns></member><member name="M:ActiproSoftware.Products.Text.SR.RemoveCustomString(System.String)"><summary>
            Removes any custom string that is defined for the specified string resource.
            </summary><param name="name">The name of the resource to remove.</param></member><member name="M:ActiproSoftware.Products.Text.SR.SetCustomString(System.String,System.String)"><summary>
            Sets a custom string value for the specified string resource.
            </summary><param name="name">The name of the resource to set.</param><param name="value">The value of the resource to set.</param></member><member name="P:ActiproSoftware.Products.Text.SR.ResourceManager"><summary>
            Gets the <see cref="P:ActiproSoftware.Products.Text.SR.ResourceManager" /> that provides the default resources. 
            </summary><value>The <see cref="P:ActiproSoftware.Products.Text.SR.ResourceManager" /> that provides the default resources.</value></member><member name="T:ActiproSoftware.Products.Text.SRTextBase"><summary>
            Provides an abstract base class for accessing the string resources of an assembly, along with customization capabilities.
            </summary></member><member name="M:ActiproSoftware.Products.Text.SRTextBase.ClearCustomStringsCore"><summary>
            Removes all custom strings.
            </summary></member><member name="M:ActiproSoftware.Products.Text.SRTextBase.ContainsCustomStringCore(System.String)"><summary>
            Returns whether a custom string is defined for the specified string resource.
            </summary><param name="name">The name of the resource for which to search.</param><returns><c>true</c> if a custom string is defined for the specified string resource; otherwise, <c>false</c>.
            </returns></member><member name="M:ActiproSoftware.Products.Text.SRTextBase.GetCustomStringCore(System.String)"><summary>
            Returns custom string that is stored for the specified string resource, if any.
            </summary><param name="name">The name of the resource to get.</param><returns>The custom string that is stored for the specified string resource, if any.</returns></member><member name="M:ActiproSoftware.Products.Text.SRTextBase.GetStringCore(System.String,System.Object[])"><summary>
            Returns the resolved value of the specified string resource, by calling <c>String.Format</c> using supplied arguments.
            </summary><param name="name">The name of the resource to get.</param><param name="args">The arguments to pass to <c>String.Format</c>.</param><returns>
            The value of the resource localized for the caller's current culture settings. 
            If a best match is not possible, <see langword="null" /> is returned.
            </returns></member><member name="M:ActiproSoftware.Products.Text.SRTextBase.RemoveCustomStringCore(System.String)"><summary>
            Removes any custom string that is defined for the specified string resource.
            </summary><param name="name">The name of the resource to remove.</param></member><member name="M:ActiproSoftware.Products.Text.SRTextBase.SetCustomStringCore(System.String,System.String)"><summary>
            Sets a custom string value for the specified string resource.
            </summary><param name="name">The name of the resource to set.</param><param name="value">The value of the resource to set.</param></member><member name="P:ActiproSoftware.Products.Text.SRTextBase.ResourceManager"><summary>
            Gets the <see cref="P:ActiproSoftware.Products.Text.SRTextBase.ResourceManager" /> that provides the default resources. 
            </summary><value>The <see cref="P:ActiproSoftware.Products.Text.SRTextBase.ResourceManager" /> that provides the default resources.</value></member><member name="T:ActiproSoftware.Products.Text.SRName"><summary>
            Specifies the names of string resources for this assembly.
            </summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExAutoCorrectNotPermittedWithRegex"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExEnumerationEnded"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExEnumerationNotStarted"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExIntervalsDoNotIntersect"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExInvalidDynamicLexicalMacroRegex"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExInvalidDynamicLexerLexicalStateType"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExInvalidDynamicLexicalPatternGroupLookAheadRegex"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExInvalidDynamicLexicalPatternGroupLookBehindRegex"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExInvalidDynamicLexicalPatternGroupRegex"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExInvalidEncodedCharacter"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExInvalidMacroKey"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExInvalidOffsetLength"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExInvalidParameterType"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExInvalidRegexNodeType"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExInvalidRegexOpCode"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExInvalidUnicodeCategoryName"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExInvalidWalkerTreeStateMovingToNextLeaf"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExInvalidWalkerTreeStateMovingToPreviousLeaf"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExNoDefaultLexicalState"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExNoFindText"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExNoMergableLexer"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExNoMergableToken"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExParseRequestNoParser"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExReaderClosed"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExReadOnlyCollection"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExRegexParserEmptyQuotedString"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExRegexParserInvalidRangeCharacter"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExRegexParserInvalidSubstitutionGroupNumber"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExRegexParserNoLeftExpressionForBarOperand"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExRegexParserNoRangeMinimum"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExRegexParserNoRegularExpression"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExRegexParserOpenCurlyBraceExpected"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExRegexParserUnexpectedCharClassEnd"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExRegexParserUnexpectedGroupingConstructEnd"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExRegexParserUnexpectedLookBehindConstructEnd"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExRegexParserUnexpectedMacroReferenceEnd"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExRegexParserUnexpectedQuotedStringEnd"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExRegexParserUnknownGroupingConstruct"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExStartOffsetNotInSearchRange"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExTabSizeMinimum"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExTaggerConstructorNotFound"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExTaggerConstructorUnableToLoad"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExTextChangeOffsetDeltaSequentialOnlyInvalidOperation"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExTextChangeOperationRequired"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExTextChangeRequiresOneOperation"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExTextSnapshotRangeDeleted"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExTextSnapshotRangeSnapshotMismatch"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExTextSnapshotRequiresCodeDocument"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExTextSnapshotRequiresTextDocumentBase"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.ExTextVersionDocumentMismatch"><summary>An exception message string.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UIClassificationTypeComment"><summary>A classification type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UIClassificationTypeCompilerError"><summary>A classification type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UIClassificationTypeIdentifier"><summary>A classification type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UIClassificationTypeNumber"><summary>A classification type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UIClassificationTypeKeyword"><summary>A classification type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UIClassificationTypeOtherError"><summary>A classification type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UIClassificationTypePreprocessorKeyword"><summary>A classification type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UIClassificationTypeReadOnlyRegion"><summary>A classification type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UIClassificationTypeString"><summary>A classification type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UIClassificationTypeSyntaxError"><summary>A classification type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UIClassificationTypeWarning"><summary>A classification type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UILanguageKeyPlainText"><summary>A language key.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UISearchOperationTypeFindAll"><summary>A search operation type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UISearchOperationTypeFindNext"><summary>A search operation type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UISearchOperationTypeReplaceAll"><summary>A search operation type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UISearchOperationTypeReplaceNext"><summary>A search operation type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UISearchPatternProviderAcronym"><summary>A search pattern provider description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UISearchPatternProviderNormal"><summary>A search pattern provider description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UISearchPatternProviderRegularExpression"><summary>A search pattern provider description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UISearchPatternProviderShorthand"><summary>A search pattern provider description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UISearchPatternProviderWildcard"><summary>A search pattern provider description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UISearchResultWrapped"><summary>A search result wrapped description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeAutoComplete"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeAutoCorrect"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeAutoFormat"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeAutoIndent"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeAutoReplace"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeBackspace"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeChangeCase"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeCommentLines"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeConvertSpacesToTabs"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeConvertTabsToSpaces"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeCustom"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeCut"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeDelete"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeDragAndDrop"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeDuplicate"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeEnter"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeHeaderAndFooterChange"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeIndent"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeInsertCodeSnippetTemplate"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeInsertFile"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeMoveSelectedLinesDown"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeMoveSelectedLinesUp"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeOpenLine"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeOutdent"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypePaste"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeReplace"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeReplaceAll"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeSpellingChange"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeTextReplacement"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeToggleCase"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeTransposeCharacters"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeTransposeLines"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeTransposeWords"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeTrimTrailingWhitespace"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeTyping"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeUncommentLines"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextChangeTypeUpdateCodeSnippetTemplateFields"><summary>A text change type description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextStatisticAverageLettersPerWord"><summary>A text statistic description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextStatisticAverageSyllablesPerWord"><summary>A text statistic description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextStatisticAverageWordsPerSentence"><summary>A text statistic description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextStatisticCharacters"><summary>A text statistic description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextStatisticConsonants"><summary>A text statistic description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextStatisticFleschKincaidGradeLevel"><summary>A text statistic description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextStatisticFleschReadingEaseScore"><summary>A text statistic description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextStatisticLetters"><summary>A text statistic description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextStatisticLines"><summary>A text statistic description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextStatisticNonWhitespaceCharacters"><summary>A text statistic description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextStatisticNonWhitespaceLines"><summary>A text statistic description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextStatisticSentences"><summary>A text statistic description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextStatisticSyllables"><summary>A text statistic description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextStatisticVowels"><summary>A text statistic description.</summary></member><member name="F:ActiproSoftware.Products.Text.SRName.UITextStatisticWords"><summary>A text statistic description.</summary></member><member name="T:ActiproSoftware.Text.Utility.PropertyDictionary.Creator`1"><summary>
            Creates a property value.
            </summary><typeparam name="TValue">The type of object to create.</typeparam><returns>The property value that was created.</returns></member><member name="T:ActiproSoftware.Text.Utility.WeakEventListener`2.EventAction`3"><summary>
            Provides the delegate for an event action.
            </summary><typeparam name="T1">The first parameter type.</typeparam><typeparam name="T2">The second parameter type.</typeparam><typeparam name="T3">The third parameter type.</typeparam><param name="arg1">The first argument.</param><param name="arg2">The second argument.</param><param name="arg3">The third argument.</param></member></members></doc>